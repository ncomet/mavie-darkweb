(function (Opal) {
  function initialize (Opal) {
Opal.modules["json"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $Object = Opal.Object, $hash2 = Opal.hash2, $eqeqeq = Opal.eqeqeq, $defs = Opal.defs, $truthy = Opal.truthy, $def = Opal.def, $return_val = Opal.return_val, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('raise,new,push,[]=,[],create_id,json_create,const_get,attr_accessor,create_id=,===,parse,generate,from_object,merge,to_json,responds_to?,to_io,write,to_s,to_a,strftime');
  
  (function($base, $parent_nesting) {
    var self = $module($base, 'JSON');

    var $a, $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    $klass($nesting[0], $$('StandardError'), 'JSONError');
    $klass($nesting[0], $$('JSONError'), 'ParserError');
    
    var $hasOwn = Opal.hasOwnProperty;

    function $parse(source) {
      try {
        return JSON.parse(source);
      } catch (e) {
        self.$raise($$$($$('JSON'), 'ParserError'), e.message);
      }
    };

    function to_opal(value, options) {
      var klass, arr, hash, i, ii, k;

      switch (typeof value) {
        case 'string':
          return value;

        case 'number':
          return value;

        case 'boolean':
          return !!value;

        case 'undefined':
          return nil;

        case 'object':
          if (!value) return nil;

          if (value.$$is_array) {
            arr = (options.array_class).$new();

            for (i = 0, ii = value.length; i < ii; i++) {
              (arr).$push(to_opal(value[i], options));
            }

            return arr;
          }
          else {
            hash = (options.object_class).$new();

            for (k in value) {
              if ($hasOwn.call(value, k)) {
                ($a = [k, to_opal(value[k], options)], $send((hash), '[]=', $a), $a[$a.length - 1]);
              }
            }

            if (!options.parse && (klass = (hash)['$[]']($$('JSON').$create_id())) != nil) {
              return $Object.$const_get(klass).$json_create(hash);
            }
            else {
              return hash;
            }
          }
        }
    };
  ;
    (function(self, $parent_nesting) {
      
      return self.$attr_accessor("create_id")
    })(Opal.get_singleton_class(self), $nesting);
    self['$create_id=']("json_class");
    $defs(self, '$[]', function $JSON_$$$1(value, options) {
      var self = this;

      
      if (options == null) options = $hash2([], {});
      if ($eqeqeq($$('String'), value)) {
        return self.$parse(value, options)
      } else {
        return self.$generate(value, options)
      };
    }, -2);
    $defs(self, '$parse', function $$parse(source, options) {
      var self = this;

      
      if (options == null) options = $hash2([], {});
      return self.$from_object($parse(source), options.$merge($hash2(["parse"], {"parse": true})));
    }, -2);
    $defs(self, '$parse!', function $JSON_parse$excl$2(source, options) {
      var self = this;

      
      if (options == null) options = $hash2([], {});
      return self.$parse(source, options);
    }, -2);
    $defs(self, '$load', function $$load(source, options) {
      var self = this;

      
      if (options == null) options = $hash2([], {});
      return self.$from_object($parse(source), options);
    }, -2);
    $defs(self, '$from_object', function $$from_object(js_object, options) {
      var $ret_or_1 = nil;

      
      if (options == null) options = $hash2([], {});
      if ($truthy(($ret_or_1 = options['$[]']("object_class")))) {
        $ret_or_1
      } else {
        options['$[]=']("object_class", $$('Hash'))
      };
      if ($truthy(($ret_or_1 = options['$[]']("array_class")))) {
        $ret_or_1
      } else {
        options['$[]=']("array_class", $$('Array'))
      };
      return to_opal(js_object, options.$$smap);;
    }, -2);
    $defs(self, '$generate', function $$generate(obj, options) {
      
      
      if (options == null) options = $hash2([], {});
      return obj.$to_json(options);
    }, -2);
    return $defs(self, '$dump', function $$dump(obj, io, limit) {
      var self = this, string = nil;

      
      if (io == null) io = nil;
      if (limit == null) limit = nil;
      string = self.$generate(obj);
      if ($truthy(io)) {
        
        if ($truthy(io['$responds_to?']("to_io"))) {
          io = io.$to_io()
        };
        io.$write(string);
        return io;
      } else {
        return string
      };
    }, -2);
  })($nesting[0], $nesting);
  (function($base, $super) {
    var self = $klass($base, $super, 'Object');

    
    return $def(self, '$to_json', function $$to_json() {
      var self = this;

      return self.$to_s().$to_json()
    })
  })($nesting[0], null);
  (function($base) {
    var self = $module($base, 'Enumerable');

    
    return $def(self, '$to_json', function $$to_json() {
      var self = this;

      return self.$to_a().$to_json()
    })
  })($nesting[0]);
  (function($base, $super) {
    var self = $klass($base, $super, 'Array');

    
    return $def(self, '$to_json', function $$to_json() {
      var self = this;

      
      var result = [];

      for (var i = 0, length = self.length; i < length; i++) {
        result.push((self[i]).$to_json());
      }

      return '[' + result.join(',') + ']';
    
    })
  })($nesting[0], null);
  (function($base, $super) {
    var self = $klass($base, $super, 'Boolean');

    
    return $def(self, '$to_json', function $$to_json() {
      var self = this;

      return (self == true) ? 'true' : 'false';
    })
  })($nesting[0], null);
  (function($base, $super) {
    var self = $klass($base, $super, 'Hash');

    
    return $def(self, '$to_json', function $$to_json() {
      var self = this;

      
      var result = [];

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        result.push((key).$to_s().$to_json() + ':' + (value).$to_json());
      }

      return '{' + result.join(',') + '}';
    
    })
  })($nesting[0], null);
  (function($base, $super) {
    var self = $klass($base, $super, 'NilClass');

    
    return $def(self, '$to_json', $return_val("null"))
  })($nesting[0], null);
  (function($base, $super) {
    var self = $klass($base, $super, 'Numeric');

    
    return $def(self, '$to_json', function $$to_json() {
      var self = this;

      return self.toString();
    })
  })($nesting[0], null);
  (function($base, $super) {
    var self = $klass($base, $super, 'String');

    
    return $def(self, '$to_json', function $$to_json() {
      var self = this;

      return JSON.stringify(self);
    })
  })($nesting[0], null);
  (function($base, $super) {
    var self = $klass($base, $super, 'Time');

    
    return $def(self, '$to_json', function $$to_json() {
      var self = this;

      return self.$strftime("%FT%T%z").$to_json()
    })
  })($nesting[0], null);
  return (function($base, $super) {
    var self = $klass($base, $super, 'Date');

    
    
    
    $def(self, '$to_json', function $$to_json() {
      var self = this;

      return self.$to_s().$to_json()
    });
    return $def(self, '$as_json', function $$as_json() {
      var self = this;

      return self.$to_s()
    });
  })($nesting[0], null);
};

Opal.modules["asciidoctor-revealjs/converter"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $module = Opal.module, $klass = Opal.klass, $const_set = Opal.const_set, $truthy = Opal.truthy, $send = Opal.send, $def = Opal.def, $eqeq = Opal.eqeq, $hash2 = Opal.hash2, $to_ary = Opal.to_ary, $not = Opal.not, $rb_plus = Opal.rb_plus, $class_variable_set = Opal.class_variable_set, $class_variable_get = Opal.class_variable_get, $neqeq = Opal.neqeq, $rb_le = Opal.rb_le, $slice = Opal.slice, $rb_lt = Opal.rb_lt, $send2 = Opal.send2, $find_super = Opal.find_super, $eqeqeq = Opal.eqeqeq, $to_a = Opal.to_a, $rb_times = Opal.rb_times, $rb_minus = Opal.rb_minus, $rb_ge = Opal.rb_ge, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('require,include?,option?,nil?,join,map,split,!=,to_s,attr?,==,attr,downcase,inject,!,nil_or_empty?,is_a?,compact,<<,empty?,+,select,to_h,start_with?,data_attrs,role,roles,html_tag,merge,special,level,parent,instance_of?,object_id,[],length,attributes,new,context,text,id,[]=,index,values,to_i,document,<=,caption,numbered,sectnum,captioned_title,instance_variable_get,converter,target,type,icon_uri,encode_attribute_value,alt,img_tag,img_link,has_role?,<,safe,read_svg_contents,html5_converter,image_uri,bool_data_attr,append_link_constraint_attrs,content,lambda,key?,fetch,delete,call,gsub,authors,format_author,first,each,in_context,sub_replacements,name,email,sub_macros,push,pop,generate,constants,const_set,const_get,register_for,respond_to?,basebackend,outfilesuffix,filetype,supports_templates,create,backend_info,node_name,send,extend,instance_eval,set_local_variables,title?,title,each_with_index,items,resolve_content,doctype,puts,===,flatten,map!,to_proc,reject!,convert,text?,blocks?,chomp,last,inline_text_container,to_sym,strip,sub_specialcharacters,end_with?,tr_s,references,content_for,noheader,docinfo,header?,media_uri,reject,subtitle?,doctitle,slice_text,header,subtitle,find_by,generate_authors,extname,slice,normalize_web_path,generate_stem,syntax_highlighter,docinfo?,yield_content,to_boolean,to_valid_slidenumber,revealjs_dependencies,style,has_header?,notitle,footnotes?,footnotes,highlight?,format,*,sections,section_level,section_title,size,zero?,blocks,slide_footnotes,-,clear_slide_footnotes,>=,colspan,rowspan,list_marker_keyword,convert_image,slide_footnote,convert_inline_image,local_variable_set');
  
  (function($base, $parent_nesting) {
    var self = $module($base, 'Asciidoctor');

    var $nesting = [self].concat($parent_nesting);

    return ($module($nesting[0], 'Revealjs'), nil)
  })($nesting[0], $nesting);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Converter');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

    $proto.delegate_converter = nil;
    
    nil;
    self.$require("json");
    (function($base, $parent_nesting) {
      var self = $module($base, 'Helpers');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      
      $const_set($nesting[0], 'EOL', "\n");
      $const_set($nesting[0], 'SliceHintRx', /  +/);
      
      $def(self, '$slice_text', function $$slice_text(str, active) {
        var self = this;

        
        if (active == null) active = nil;
        if ((($truthy(active) || (($truthy(active['$nil?']()) && ($truthy(self['$option?']("slice")))))) && ($truthy(str['$include?']("  "))))) {
          return $send(str.$split($$('SliceHintRx')), 'map', [], function $$1(line){
            
            if (line == null) line = nil;
            return "<span class=\"line\">" + (line) + "</span>";}).$join($$('EOL'))
        } else {
          return str
        };
      }, -2);
      
      $def(self, '$to_boolean', function $$to_boolean(val) {
        var $ret_or_1 = nil, $ret_or_2 = nil, $ret_or_3 = nil;

        if ($truthy(($ret_or_1 = ($truthy(($ret_or_2 = ($truthy(($ret_or_3 = val)) ? (val['$!=']("false")) : ($ret_or_3)))) ? (val.$to_s()['$!=']("0")) : ($ret_or_2))))) {
          return $ret_or_1
        } else {
          return false
        }
      });
      
      $def(self, '$bool_data_attr', function $$bool_data_attr(val) {
        var self = this;

        
        if (!$truthy(self['$attr?'](val))) {
          return false
        };
        if (($eqeq(self.$attr(val).$downcase(), "false") || ($eqeq(self.$attr(val), "0")))) {
          return "false"
        } else {
          return true
        };
      });
      
      $def(self, '$to_valid_slidenumber', function $$to_valid_slidenumber(val) {
        
        
        if ($eqeq(val, "")) {
          return true
        };
        if ($eqeq(val.$to_s(), "false")) {
          return false
        } else {
          return "'" + (val) + "'"
        };
      });
      $const_set($nesting[0], 'DEFAULT_TOCLEVELS', 2);
      $const_set($nesting[0], 'DEFAULT_SECTNUMLEVELS', 3);
      $const_set($nesting[0], 'VOID_ELEMENTS', ["area", "base", "br", "col", "command", "embed", "hr", "img", "input", "keygen", "link", "meta", "param", "source", "track", "wbr"]);
      
      $def(self, '$html_tag', function $$html_tag(name, attributes, content) {
        var $yield = $$html_tag.$$p || nil, attrs = nil, attrs_str = nil, $ret_or_1 = nil;

        $$html_tag.$$p = null;
        
        if (attributes == null) attributes = $hash2([], {});
        if (content == null) content = nil;
        attrs = $send(attributes, 'inject', [[]], function $$2(attrs, $mlhs_tmp1){var $a, $b, k = nil, v = nil;

          
          if (attrs == null) attrs = nil;
          if ($mlhs_tmp1 == null) $mlhs_tmp1 = nil;
          $b = $mlhs_tmp1, $a = $to_ary($b), (k = ($a[0] == null ? nil : $a[0])), (v = ($a[1] == null ? nil : $a[1])), $b;
          if (!($truthy(v) && (($eqeq(v, true) || ($not(v['$nil_or_empty?']())))))) {
            return attrs
          };
          if ($truthy(v['$is_a?']($$('Array')))) {
            v = v.$compact().$join(" ")
          };
          return attrs['$<<'](($eqeq(v, true) ? (k) : ("" + (k) + "=\"" + (v) + "\"")));}, {$$has_top_level_mlhs_arg: true});
        attrs_str = ($truthy(attrs['$empty?']()) ? ("") : ($rb_plus(" ", attrs.$join(" "))));
        if ($truthy($$('VOID_ELEMENTS')['$include?'](name.$to_s()))) {
          return "<" + (name) + (attrs_str) + ">"
        } else {
          
          content = ($truthy(($ret_or_1 = content)) ? ($ret_or_1) : ((($yield !== nil) ? (Opal.yieldX($yield, [])) : nil)));
          return "<" + (name) + (attrs_str) + ">" + (content) + "</" + (name) + ">";
        };
      }, -2);
      
      $def(self, '$data_attrs', function $$data_attrs(attributes) {
        
        return $send($send(attributes, 'map', [], function $$3(key, value){
          
          if (key == null) key = nil;
          if (value == null) value = nil;
          if ($eqeq(key, "step")) {
            return ["data-fragment-index", value]
          } else {
            return [key, value]
          };}).$to_h(), 'select', [], function $$4(key, _){
          
          if (key == null) key = nil;
          if (_ == null) _ = nil;
          return key.$to_s()['$start_with?']("data-");})
      });
      
      $def(self, '$inline_text_container', function $$inline_text_container(content) {
        var $yield = $$inline_text_container.$$p || nil, self = this, data_attrs = nil, classes = nil, $ret_or_1 = nil;
        if (self.attributes == null) self.attributes = nil;
        if (self.id == null) self.id = nil;

        $$inline_text_container.$$p = null;
        
        if (content == null) content = nil;
        data_attrs = self.$data_attrs(self.attributes);
        classes = [self.$role(), ((($truthy(self['$option?']("step")) || ($truthy(self['$attr?']("step")))) || ($truthy(self.$roles()['$include?']("step")))) ? ("fragment") : nil)].$compact();
        if ((($not(self.$roles()['$empty?']()) || ($not(data_attrs['$empty?']()))) || ($not(self.id['$nil?']())))) {
          return self.$html_tag("span", $hash2(["id", "class"], {"id": self.id, "class": classes}).$merge(data_attrs), ($truthy(($ret_or_1 = content)) ? ($ret_or_1) : ((($yield !== nil) ? (Opal.yieldX($yield, [])) : nil))))
        } else if ($truthy(($ret_or_1 = content))) {
          return $ret_or_1
        } else {
          
          if (($yield !== nil)) {
            return Opal.yieldX($yield, []);
          } else {
            return nil
          };
        };
      }, -1);
      
      $def(self, '$section_level', function $$section_level(sec) {
        var self = this, $ret_or_1 = nil;
        if (self._section_level == null) self._section_level = nil;

        
        if (sec == null) sec = self;
        return (self._section_level = ($truthy(($ret_or_1 = self._section_level)) ? ($ret_or_1) : (($eqeq(sec.$level(), 0) && ($truthy(sec.$special()))) ? (1) : (sec.$level()))));
      }, -1);
      $class_variable_set($nesting[0], '@@slide_footnotes', $hash2([], {}));
      $class_variable_set($nesting[0], '@@section_footnotes', $hash2([], {}));
      
      $def(self, '$slide_footnote', function $$slide_footnote(footnote) {
        var footnote_parent = nil, footnote_parent_object_id = nil, section_footnotes = nil, $ret_or_1 = nil, footnote_index = nil, attributes = nil, inline_footnote = nil, parent = nil, initial_index = nil, slide_index = nil, existing_footnote = nil;

        
        footnote_parent = footnote.$parent();
        if ($truthy(footnote_parent['$instance_of?']($$$($$$('Asciidoctor'), 'Section')))) {
          
          footnote_parent_object_id = footnote_parent.$object_id();
          section_footnotes = ($truthy(($ret_or_1 = $class_variable_get($nesting[0], '@@section_footnotes', false)['$[]'](footnote_parent_object_id))) ? ($ret_or_1) : ([]));
          footnote_index = $rb_plus(section_footnotes.$length(), 1);
          attributes = footnote.$attributes().$merge($hash2(["index"], {"index": footnote_index}));
          inline_footnote = $$$($$('Asciidoctor'), 'Inline').$new(footnote_parent, footnote.$context(), footnote.$text(), $hash2(["attributes"], {"attributes": attributes}));
          section_footnotes['$<<']($$$($$$($$('Asciidoctor'), 'Document'), 'Footnote').$new(inline_footnote.$attr("index"), inline_footnote.$id(), inline_footnote.$text()));
          $class_variable_get($nesting[0], '@@section_footnotes', false)['$[]='](footnote_parent_object_id, section_footnotes);
          return inline_footnote;
        } else {
          
          parent = footnote.$parent();
          while (!($truthy(($truthy(($ret_or_1 = parent['$=='](nil))) ? ($ret_or_1) : (parent['$instance_of?']($$$($$$('Asciidoctor'), 'Section'))))))) {
          parent = parent.$parent()
          };
          section_footnotes = ($neqeq(parent, nil) ? (($truthy(($ret_or_1 = $class_variable_get($nesting[0], '@@section_footnotes', false)['$[]'](parent.$object_id()))) ? ($ret_or_1) : ([]))) : ([]));
          initial_index = footnote.$attr("index");
          slide_index = ($truthy((existing_footnote = $class_variable_get($nesting[0], '@@slide_footnotes', false)['$[]'](initial_index))) ? (existing_footnote.$index()) : ($rb_plus($rb_plus($class_variable_get($nesting[0], '@@slide_footnotes', false).$length(), section_footnotes.$length()), 1)));
          attributes = footnote.$attributes().$merge($hash2(["index"], {"index": slide_index}));
          inline_footnote = $$$($$('Asciidoctor'), 'Inline').$new(footnote_parent, footnote.$context(), footnote.$text(), $hash2(["attributes"], {"attributes": attributes}));
          $class_variable_get($nesting[0], '@@slide_footnotes', false)['$[]='](initial_index, $$$($$$($$('Asciidoctor'), 'Document'), 'Footnote').$new(inline_footnote.$attr("index"), inline_footnote.$id(), inline_footnote.$text()));
          return inline_footnote;
        };
      });
      
      $def(self, '$clear_slide_footnotes', function $$clear_slide_footnotes() {
        
        return $class_variable_set($nesting[0], '@@slide_footnotes', $hash2([], {}))
      });
      
      $def(self, '$slide_footnotes', function $$slide_footnotes(section) {
        var section_object_id = nil, section_footnotes = nil, $ret_or_1 = nil;

        
        section_object_id = section.$object_id();
        section_footnotes = ($truthy(($ret_or_1 = $class_variable_get($nesting[0], '@@section_footnotes', false)['$[]'](section_object_id))) ? ($ret_or_1) : ([]));
        return $rb_plus(section_footnotes, $class_variable_get($nesting[0], '@@slide_footnotes', false).$values());
      });
      
      $def(self, '$section_title', function $$section_title(sec) {
        var self = this, sectnumlevels = nil;

        
        if (sec == null) sec = self;
        sectnumlevels = self.$document().$attr("sectnumlevels", $$('DEFAULT_SECTNUMLEVELS')).$to_i();
        if ((($truthy(sec.$numbered()) && ($not(sec.$caption()))) && ($truthy($rb_le(sec.$level(), sectnumlevels))))) {
          return [sec.$sectnum(), sec.$captioned_title()].$join(" ")
        } else {
          return sec.$captioned_title()
        };
      }, -1);
      
      $def(self, '$html5_converter', function $$html5_converter() {
        var self = this;

        return self.$converter().$instance_variable_get("@delegate_converter")
      });
      
      $def(self, '$convert_inline_image', function $$convert_inline_image(node) {
        var $a, $b, self = this, target = nil, $ret_or_1 = nil, icons = nil, i_class_attr_val = nil, attrs = nil, img = nil, src = nil, html_attrs = nil;

        
        if (node == null) node = self;
        target = node.$target();
        if ($eqeq(($truthy(($ret_or_1 = node.$type())) ? ($ret_or_1) : ("image")), "icon")) {
          if ($eqeq((icons = node.$document().$attr("icons")), "font")) {
            
            i_class_attr_val = "" + (node.$attr("set", "fa")) + " fa-" + (target);
            if ($truthy(node['$attr?']("size"))) {
              i_class_attr_val = "" + (i_class_attr_val) + " fa-" + (node.$attr("size"))
            };
            if ($truthy(node['$attr?']("flip"))) {
              i_class_attr_val = "" + (i_class_attr_val) + " fa-flip-" + (node.$attr("flip"))
            } else if ($truthy(node['$attr?']("rotate"))) {
              i_class_attr_val = "" + (i_class_attr_val) + " fa-rotate-" + (node.$attr("rotate"))
            };
            attrs = ($truthy(node['$attr?']("title")) ? (" title=\"" + (node.$attr("title")) + "\"") : (""));
            img = "<i class=\"" + (i_class_attr_val) + "\"" + (attrs) + "></i>";
          } else if ($truthy(icons)) {
            
            attrs = ($truthy(node['$attr?']("width")) ? (" width=\"" + (node.$attr("width")) + "\"") : (""));
            if ($truthy(node['$attr?']("height"))) {
              attrs = "" + (attrs) + " height=\"" + (node.$attr("height")) + "\""
            };
            if ($truthy(node['$attr?']("title"))) {
              attrs = "" + (attrs) + " title=\"" + (node.$attr("title")) + "\""
            };
            img = "<img src=\"" + ((src = node.$icon_uri(target))) + "\" alt=\"" + (self.$encode_attribute_value(node.$alt())) + "\"" + (attrs) + ">";
          } else {
            img = "[" + (node.$alt()) + "&#93;"
          }
        } else {
          
          html_attrs = ($truthy(node['$attr?']("width")) ? (" width=\"" + (node.$attr("width")) + "\"") : (""));
          if ($truthy(node['$attr?']("height"))) {
            html_attrs = "" + (html_attrs) + " height=\"" + (node.$attr("height")) + "\""
          };
          if ($truthy(node['$attr?']("title"))) {
            html_attrs = "" + (html_attrs) + " title=\"" + (node.$attr("title")) + "\""
          };
          $b = self.$img_tag(node, target, html_attrs), $a = $to_ary($b), (img = ($a[0] == null ? nil : $a[0])), (src = ($a[1] == null ? nil : $a[1])), $b;
        };
        return self.$img_link(node, src, img);
      }, -1);
      
      $def(self, '$convert_image', function $$convert_image(node) {
        var $a, $b, self = this, $ret_or_1 = nil, height_value = nil, html_attrs = nil, img = nil, src = nil;

        
        if (node == null) node = self;
        if (($truthy(node['$has_role?']("stretch")) && ($not(($truthy(($ret_or_1 = node['$attr?']("width"))) ? ($ret_or_1) : (node['$attr?']("height"))))))) {
          height_value = "100%"
        } else if ($truthy(node['$attr?']("height"))) {
          height_value = node.$attr("height")
        } else {
          height_value = nil
        };
        html_attrs = ($truthy(node['$attr?']("width")) ? (" width=\"" + (node.$attr("width")) + "\"") : (""));
        if ($truthy(height_value)) {
          html_attrs = "" + (html_attrs) + " height=\"" + (height_value) + "\""
        };
        if ($truthy(node['$attr?']("title"))) {
          html_attrs = "" + (html_attrs) + " title=\"" + (node.$attr("title")) + "\""
        };
        if ($truthy(node['$attr?']("background"))) {
          html_attrs = "" + (html_attrs) + " style=\"background: " + (node.$attr("background")) + "\""
        };
        $b = self.$img_tag(node, node.$attr("target"), html_attrs), $a = $to_ary($b), (img = ($a[0] == null ? nil : $a[0])), (src = ($a[1] == null ? nil : $a[1])), $b;
        return self.$img_link(node, src, img);
      }, -1);
      
      $def(self, '$img_tag', function $$img_tag($a, $b, $c) {
        var $post_args, node, target, html_attrs, self = this, img = nil, $ret_or_1 = nil, fallback = nil, src = nil;

        
        $post_args = $slice(arguments);
        
        if ($post_args.length > 2) node = $post_args.shift();if (node == null) node = self;
        
        target = $post_args.shift();if (target == null) target = nil;
        
        html_attrs = $post_args.shift();if (html_attrs == null) html_attrs = nil;
        if ((($truthy(node['$attr?']("format", "svg")) || ($truthy(target['$include?'](".svg")))) && ($truthy($rb_lt(node.$document().$safe(), $$$($$$($$$('Asciidoctor'), 'SafeMode'), 'SECURE')))))) {
          if ($truthy(node['$option?']("inline"))) {
            img = ($truthy(($ret_or_1 = self.$html5_converter().$read_svg_contents(node, target))) ? ($ret_or_1) : ("<span class=\"alt\">" + (node.$alt()) + "</span>"))
          } else if ($truthy(node['$option?']("interactive"))) {
            
            fallback = ($truthy(node['$attr?']("fallback")) ? ("<img src=\"" + (node.$image_uri(node.$attr("fallback"))) + "\" alt=\"" + (self.$encode_attribute_value(node.$alt())) + "\"" + (html_attrs) + ">") : ("<span class=\"alt\">" + (node.$alt()) + "</span>"));
            img = "<object type=\"image/svg+xml\" data=\"" + ((src = node.$image_uri(target))) + "\"" + (html_attrs) + ">" + (fallback) + "</object>";
          } else {
            img = "<img src=\"" + ((src = node.$image_uri(target))) + "\" alt=\"" + (self.$encode_attribute_value(node.$alt())) + "\"" + (html_attrs) + ">"
          }
        } else {
          img = "<img src=\"" + ((src = node.$image_uri(target))) + "\" alt=\"" + (self.$encode_attribute_value(node.$alt())) + "\"" + (html_attrs) + ">"
        };
        return [img, src];
      }, -3);
      
      $def(self, '$img_link', function $$img_link($a, $b, $c) {
        var $post_args, node, src, content, self = this, href_attr_val = nil, link_preview_value = nil, data_preview_attr = nil;

        
        $post_args = $slice(arguments);
        
        if ($post_args.length > 2) node = $post_args.shift();if (node == null) node = self;
        
        src = $post_args.shift();if (src == null) src = nil;
        
        content = $post_args.shift();if (content == null) content = nil;
        if (($truthy(node['$attr?']("link")) && (($neqeq((href_attr_val = node.$attr("link")), "self") || ($truthy((href_attr_val = src))))))) {
          
          if ($truthy((link_preview_value = self.$bool_data_attr("link_preview")))) {
            data_preview_attr = " data-preview-link=\"" + (($eqeq(link_preview_value, true) ? ("") : (link_preview_value))) + "\""
          };
          return "<a class=\"image\" href=\"" + (href_attr_val) + "\"" + (self.$append_link_constraint_attrs(node).$join()) + (data_preview_attr) + ">" + (content) + "</a>";
        };
        return content;
      }, -3);
      
      $def(self, '$revealjs_dependencies', function $$revealjs_dependencies(document, node, revealjsdir) {
        var dependencies = nil;

        
        dependencies = [];
        if (!$truthy(node['$attr?']("revealjs_plugin_zoom", "disabled"))) {
          dependencies['$<<']("{ src: '" + (revealjsdir) + "/plugin/zoom/zoom.js', async: true, callback: function () { Reveal.registerPlugin(RevealZoom) } }")
        };
        if (!$truthy(node['$attr?']("revealjs_plugin_notes", "disabled"))) {
          dependencies['$<<']("{ src: '" + (revealjsdir) + "/plugin/notes/notes.js', async: true, callback: function () { Reveal.registerPlugin(RevealNotes) } }")
        };
        if ($truthy(node['$attr?']("revealjs_plugin_search", "enabled"))) {
          dependencies['$<<']("{ src: '" + (revealjsdir) + "/plugin/search/search.js', async: true, callback: function () { Reveal.registerPlugin(RevealSearch) } }")
        };
        return dependencies.$join(",\n      ");
      });
      
      $def(self, '$resolve_content', function $$resolve_content() {
        var self = this;
        if (self.content_model == null) self.content_model = nil;

        if ($eqeq(self.content_model, "simple")) {
          return "<p>" + (self.$content()) + "</p>"
        } else {
          return self.$content()
        }
      });
      
      $def(self, '$content_for', function $$content_for(key, opts) {
        var block = $$content_for.$$p || nil, $a, $b, self = this, $ret_or_1 = nil;
        if (self.content == null) self.content = nil;

        $$content_for.$$p = null;
        
        ;
        if (opts == null) opts = $hash2([], {});
        if (!$truthy((($a = self['content'], $a != null && $a !== nil) ? 'instance-variable' : nil))) {
          self.content = $hash2([], {})
        };
        ($truthy(opts['$[]']("append")) ? (($truthy(($ret_or_1 = self.content['$[]'](key))) ? ($ret_or_1) : (($b = [key, []], $send(self.content, '[]=', $b), $b[$b.length - 1])))) : (($b = [key, []], $send(self.content, '[]=', $b), $b[$b.length - 1])))['$<<'](((block !== nil) ? (block) : ($send(self, 'lambda', [], function $$5(){
          return opts['$[]']("content")}))));
        return nil;
      }, -2);
      
      $def(self, '$content_for?', function $Helpers_content_for$ques$6(key) {
        var $a, self = this, $ret_or_1 = nil;
        if (self.content == null) self.content = nil;

        if ($truthy(($ret_or_1 = (($a = self['content'], $a != null && $a !== nil) ? 'instance-variable' : nil)))) {
          
          return self.content['$key?'](key);
        } else {
          return $ret_or_1
        }
      });
      
      $def(self, '$yield_content', function $$yield_content(key, opts) {
        var $a, self = this, blks = nil;
        if (self.content == null) self.content = nil;

        
        if (opts == null) opts = $hash2([], {});
        if (($truthy((($a = self['content'], $a != null && $a !== nil) ? 'instance-variable' : nil)) && ($truthy((blks = ($truthy(opts.$fetch("drain", true)) ? (self.content.$delete(key)) : (self.content['$[]'](key)))))))) {
          $send(blks, 'map', [], function $$7(b){
            
            if (b == null) b = nil;
            return b.$call();}).$join()
        };
        return nil;
      }, -2);
      
      $def(self, '$append_link_constraint_attrs', function $$append_link_constraint_attrs(node, attrs) {
        var rel = nil, window = nil;

        
        if (attrs == null) attrs = [];
        if ($truthy(node['$option?']("nofollow"))) {
          rel = "nofollow"
        };
        if ($truthy((window = node.$attributes()['$[]']("window")))) {
          
          attrs['$<<'](" target=\"" + (window) + "\"");
          if (($eqeq(window, "_blank") || ($truthy(node['$option?']("noopener"))))) {
            attrs['$<<'](($truthy(rel) ? (" rel=\"" + (rel) + " noopener\"") : (" rel=\"noopener\"")))
          };
        } else if ($truthy(rel)) {
          attrs['$<<'](" rel=\"" + (rel) + "\"")
        };
        return attrs;
      }, -2);
      
      $def(self, '$encode_attribute_value', function $$encode_attribute_value(val) {
        
        if ($truthy(val['$include?']("\""))) {
          
          return val.$gsub("\"", "&quot;");
        } else {
          return val
        }
      });
      
      $def(self, '$generate_authors', function $$generate_authors(node) {
        var self = this, result = nil;

        
        if ($truthy(node.$authors()['$empty?']())) {
          return nil
        };
        if ($eqeq(node.$authors().$length(), 1)) {
          return "<p class=\"byline\">\n" + "  " + (self.$format_author(node, node.$authors().$first())) + "\n" + "  </p>"
        } else {
          
          result = ["<ul class=\"byline\">"];
          $send(node.$authors(), 'each', [], function $$8(author){var self = $$8.$$s == null ? this : $$8.$$s;

            
            if (author == null) author = nil;
            return result['$<<']("<li>" + (self.$format_author(node, author)) + "</li>");}, {$$s: self});
          result['$<<']("</ul>");
          return result.$join($$$($$('Asciidoctor'), 'LF'));
        };
      });
      
      $def(self, '$format_author', function $$format_author(node, author) {
        var self = this;

        return $send(self, 'in_context', ["author"], function $$9(){
          return "<span class=\"author\">" + (node.$sub_replacements(author.$name())) + (($truthy(author.$email()) ? (" " + (node.$sub_macros(author.$email()))) : (""))) + "</span>"})
      });
      
      $def(self, '$in_context', function $$in_context(name) {
        var $yield = $$in_context.$$p || nil, self = this, $ret_or_1 = nil, result = nil;
        if (self.convert_context == null) self.convert_context = nil;

        $$in_context.$$p = null;
        
        (self.convert_context = ($truthy(($ret_or_1 = self.convert_context)) ? ($ret_or_1) : ([]))).$push(name);
        result = Opal.yieldX($yield, []);
        self.convert_context.$pop();
        return result;
      });
      $const_set($nesting[0], 'STEM_EQNUMS_AMS', "ams");
      $const_set($nesting[0], 'STEM_EQNUMS_NONE', "none");
      $const_set($nesting[0], 'STEM_EQNUMS_VALID_VALUES', [$$('STEM_EQNUMS_NONE'), $$('STEM_EQNUMS_AMS'), "all"]);
      $const_set($nesting[0], 'MATHJAX_VERSION', "3.2.0");
      return $def(self, '$generate_stem', function $$generate_stem(cdn_base) {
        var self = this, eqnums_val = nil, mathjax_configuration = nil, mathjaxdir = nil;

        if ($truthy(self['$attr?']("stem"))) {
          
          eqnums_val = self.$attr("eqnums", $$('STEM_EQNUMS_NONE')).$downcase();
          if (!$truthy($$('STEM_EQNUMS_VALID_VALUES')['$include?'](eqnums_val))) {
            eqnums_val = $$('STEM_EQNUMS_AMS')
          };
          mathjax_configuration = $hash2(["tex", "options", "asciimath", "loader"], {"tex": $hash2(["inlineMath", "displayMath", "processEscapes", "tags"], {"inlineMath": [$$$($$('Asciidoctor'), 'INLINE_MATH_DELIMITERS')['$[]']("latexmath")], "displayMath": [$$$($$('Asciidoctor'), 'BLOCK_MATH_DELIMITERS')['$[]']("latexmath")], "processEscapes": false, "tags": eqnums_val}), "options": $hash2(["ignoreHtmlClass"], {"ignoreHtmlClass": "nostem|nolatexmath"}), "asciimath": $hash2(["delimiters"], {"delimiters": [$$$($$('Asciidoctor'), 'BLOCK_MATH_DELIMITERS')['$[]']("asciimath")]}), "loader": $hash2(["load"], {"load": ["input/asciimath", "output/chtml", "ui/menu"]})});
          mathjaxdir = self.$attr("mathjaxdir", "" + (cdn_base) + "/mathjax/" + ($$('MATHJAX_VERSION')) + "/es5");
          return $rb_plus("<script>window.MathJax = " + ($$('JSON').$generate(mathjax_configuration)) + ";</script>", "<script async src=\"" + (mathjaxdir) + "/tex-mml-chtml.js\"></script>");
        } else {
          return nil
        }
      });
    })($nesting[0], $nesting);
    $send($$('Helpers').$constants(), 'each', [], function $Converter$10(const$){var self = $Converter$10.$$s == null ? this : $Converter$10.$$s;

      
      if (const$ == null) const$ = nil;
      return self.$const_set(const$, $$('Helpers').$const_get(const$));}, {$$s: self});
    self.$register_for("revealjs", "reveal.js");
    
    $def(self, '$initialize', function $$initialize(backend, opts) {
      var $yield = $$initialize.$$p || nil, self = this, delegate_backend = nil, $ret_or_1 = nil, factory = nil, converter = nil;

      $$initialize.$$p = null;
      
      if (opts == null) opts = $hash2([], {});
      $send2(self, $find_super(self, 'initialize', $$initialize, false, true), 'initialize', [backend, opts], $yield);
      if ($truthy(self['$respond_to?']("basebackend"))) {
        self.$basebackend("html")
      };
      if ($truthy(self['$respond_to?']("outfilesuffix"))) {
        self.$outfilesuffix(".html")
      };
      if ($truthy(self['$respond_to?']("filetype"))) {
        self.$filetype("html")
      };
      if ($truthy(self['$respond_to?']("supports_templates"))) {
        self.$supports_templates()
      };
      delegate_backend = ($truthy(($ret_or_1 = opts['$[]']("delegate_backend"))) ? ($ret_or_1) : ("html5")).$to_s();
      factory = $$$($$$($$$('Asciidoctor'), 'Converter'), 'Factory');
      converter = factory.$create(delegate_backend, self.$backend_info());
      return (self.delegate_converter = ($eqeq(converter, self) ? (factory.$new().$create(delegate_backend, self.$backend_info())) : (converter)));
    }, -2);
    
    $def(self, '$convert', function $$convert(node, transform, opts) {
      var self = this, meth_name = nil, $ret_or_1 = nil, converter = nil;

      
      if (transform == null) transform = nil;
      if (opts == null) opts = $hash2([], {});
      meth_name = "convert_" + (($truthy(($ret_or_1 = transform)) ? ($ret_or_1) : (node.$node_name())));
      opts = ($truthy(($ret_or_1 = opts)) ? ($ret_or_1) : ($hash2([], {})));
      converter = ($truthy(self['$respond_to?'](meth_name)) ? (self) : (self.delegate_converter));
      if ($truthy(opts['$empty?']())) {
        return converter.$send(meth_name, node)
      } else {
        return converter.$send(meth_name, node, opts)
      };
    }, -2);
    
    $def(self, '$convert_example', function $$convert_example(node, opts) {
      var self = this;

      
      if (opts == null) opts = $hash2([], {});
      node.$extend($$('Helpers'));
      return $send(node, 'instance_eval', [], function $$11(){var self = $$11.$$s == null ? this : $$11.$$s, _buf = nil, _slim_controls1 = nil;
        if (self.id == null) self.id = nil;
        if (self.attributes == null) self.attributes = nil;

        
        if (!$truthy(opts['$empty?']())) {
          self.$converter().$set_local_variables(Opal.Binding.$new(  function($code) {    return eval($code);  },  ["node", "opts"],  self,  ['asciidoctor-revealjs/converter.rb', 521]), opts)
        };
        _buf = [];
        _slim_controls1 = $send(self, 'html_tag', ["div", $hash2(["id", "class"], {"id": self.id, "class": ["exampleblock", self.$role(), (($truthy(self['$option?']("step")) || ($truthy(self['$attr?']("step")))) ? ("fragment") : nil)]}).$merge(self.$data_attrs(self.attributes))], function $$12(){var self = $$12.$$s == null ? this : $$12.$$s, _slim_controls2 = nil;

          
          _slim_controls2 = [];
          if ($truthy(self['$title?']())) {
            
            _slim_controls2['$<<']("<div class=\"title\">");
            _slim_controls2['$<<'](self.$captioned_title());
            _slim_controls2['$<<']("</div>");
          };
          _slim_controls2['$<<']("<div class=\"content\">");
          _slim_controls2['$<<'](self.$content());
          _slim_controls2['$<<']("</div>");
          return (_slim_controls2 = _slim_controls2.$join(""));}, {$$s: self});
        _buf['$<<'](_slim_controls1);
        return (_buf = _buf.$join(""));}, {$$s: self});
    }, -2);
    
    $def(self, '$convert_inline_button', function $$convert_inline_button(node, opts) {
      var self = this;

      
      if (opts == null) opts = $hash2([], {});
      node.$extend($$('Helpers'));
      return $send(node, 'instance_eval', [], function $$13(){var self = $$13.$$s == null ? this : $$13.$$s, _buf = nil, _slim_controls1 = nil;
        if (self.attributes == null) self.attributes = nil;

        
        if (!$truthy(opts['$empty?']())) {
          self.$converter().$set_local_variables(Opal.Binding.$new(  function($code) {    return eval($code);  },  ["node", "opts"],  self,  ['asciidoctor-revealjs/converter.rb', 533]), opts)
        };
        _buf = [];
        _slim_controls1 = $send(self, 'html_tag', ["b", $hash2(["class"], {"class": ["button"]}).$merge(self.$data_attrs(self.attributes))], function $$14(){var self = $$14.$$s == null ? this : $$14.$$s, _slim_controls2 = nil;
          if (self.text == null) self.text = nil;

          
          _slim_controls2 = [];
          _slim_controls2['$<<'](self.text);
          return (_slim_controls2 = _slim_controls2.$join(""));}, {$$s: self});
        _buf['$<<'](_slim_controls1);
        return (_buf = _buf.$join(""));}, {$$s: self});
    }, -2);
    
    $def(self, '$convert_colist', function $$convert_colist(node, opts) {
      var self = this;

      
      if (opts == null) opts = $hash2([], {});
      node.$extend($$('Helpers'));
      return $send(node, 'instance_eval', [], function $$15(){var self = $$15.$$s == null ? this : $$15.$$s, _buf = nil, _slim_controls1 = nil;
        if (self.id == null) self.id = nil;
        if (self.style == null) self.style = nil;
        if (self.attributes == null) self.attributes = nil;

        
        if (!$truthy(opts['$empty?']())) {
          self.$converter().$set_local_variables(Opal.Binding.$new(  function($code) {    return eval($code);  },  ["node", "opts"],  self,  ['asciidoctor-revealjs/converter.rb', 543]), opts)
        };
        _buf = [];
        _slim_controls1 = $send(self, 'html_tag', ["div", $hash2(["id", "class"], {"id": self.id, "class": ["colist", self.style, self.$role(), (($truthy(self['$option?']("step")) || ($truthy(self['$attr?']("step")))) ? ("fragment") : nil)]}).$merge(self.$data_attrs(self.attributes))], function $$16(){var self = $$16.$$s == null ? this : $$16.$$s, _slim_controls2 = nil, font_icons = nil;
          if (self.document == null) self.document = nil;

          
          _slim_controls2 = [];
          if ($truthy(self['$title?']())) {
            
            _slim_controls2['$<<']("<div class=\"title\">");
            _slim_controls2['$<<'](self.$title());
            _slim_controls2['$<<']("</div>");
          };
          if ($truthy(self.document['$attr?']("icons"))) {
            
            font_icons = self.document['$attr?']("icons", "font");
            _slim_controls2['$<<']("<table>");
            $send(self.$items(), 'each_with_index', [], function $$17(item, i){var self = $$17.$$s == null ? this : $$17.$$s, num = nil, _slim_codeattributes1 = nil, _slim_codeattributes2 = nil, _slim_codeattributes3 = nil;

              
              if (item == null) item = nil;
              if (i == null) i = nil;
              num = $rb_plus(i, 1);
              _slim_controls2['$<<']("<tr><td>");
              if ($truthy(font_icons)) {
                
                _slim_controls2['$<<']("<i class=\"conum\"");
                _slim_codeattributes1 = num;
                if ($truthy(_slim_codeattributes1)) {
                  if ($eqeq(_slim_codeattributes1, true)) {
                    _slim_controls2['$<<'](" data-value")
                  } else {
                    
                    _slim_controls2['$<<'](" data-value=\"");
                    _slim_controls2['$<<'](_slim_codeattributes1);
                    _slim_controls2['$<<']("\"");
                  }
                };
                _slim_controls2['$<<']("></i><b>");
                _slim_controls2['$<<'](num);
                _slim_controls2['$<<']("</b>");
              } else {
                
                _slim_controls2['$<<']("<img");
                _slim_codeattributes2 = self.$icon_uri("callouts/" + (num));
                if ($truthy(_slim_codeattributes2)) {
                  if ($eqeq(_slim_codeattributes2, true)) {
                    _slim_controls2['$<<'](" src")
                  } else {
                    
                    _slim_controls2['$<<'](" src=\"");
                    _slim_controls2['$<<'](_slim_codeattributes2);
                    _slim_controls2['$<<']("\"");
                  }
                };
                _slim_codeattributes3 = num;
                if ($truthy(_slim_codeattributes3)) {
                  if ($eqeq(_slim_codeattributes3, true)) {
                    _slim_controls2['$<<'](" alt")
                  } else {
                    
                    _slim_controls2['$<<'](" alt=\"");
                    _slim_controls2['$<<'](_slim_codeattributes3);
                    _slim_controls2['$<<']("\"");
                  }
                };
                _slim_controls2['$<<'](">");
              };
              _slim_controls2['$<<']("</td><td>");
              _slim_controls2['$<<'](item.$text());
              return _slim_controls2['$<<']("</td></tr>");}, {$$s: self});
            _slim_controls2['$<<']("</table>");
          } else {
            
            _slim_controls2['$<<']("<ol>");
            $send(self.$items(), 'each', [], function $$18(item){
              
              if (item == null) item = nil;
              _slim_controls2['$<<']("<li><p>");
              _slim_controls2['$<<'](item.$text());
              return _slim_controls2['$<<']("</p></li>");});
            _slim_controls2['$<<']("</ol>");
          };
          return (_slim_controls2 = _slim_controls2.$join(""));}, {$$s: self});
        _buf['$<<'](_slim_controls1);
        return (_buf = _buf.$join(""));}, {$$s: self});
    }, -2);
    
    $def(self, '$convert_preamble', function $$convert_preamble(node, opts) {
      var self = this;

      
      if (opts == null) opts = $hash2([], {});
      node.$extend($$('Helpers'));
      return $send(node, 'instance_eval', [], function $$19(){var self = $$19.$$s == null ? this : $$19.$$s, _buf = nil;

        
        if (!$truthy(opts['$empty?']())) {
          self.$converter().$set_local_variables(Opal.Binding.$new(  function($code) {    return eval($code);  },  ["node", "opts"],  self,  ['asciidoctor-revealjs/converter.rb', 571]), opts)
        };
        _buf = [];
        return (_buf = _buf.$join(""));}, {$$s: self});
    }, -2);
    
    $def(self, '$convert_sidebar', function $$convert_sidebar(node, opts) {
      var self = this;

      
      if (opts == null) opts = $hash2([], {});
      node.$extend($$('Helpers'));
      return $send(node, 'instance_eval', [], function $$20(){var self = $$20.$$s == null ? this : $$20.$$s, _buf = nil, _slim_controls1 = nil;
        if (self.id == null) self.id = nil;
        if (self.attributes == null) self.attributes = nil;

        
        if (!$truthy(opts['$empty?']())) {
          self.$converter().$set_local_variables(Opal.Binding.$new(  function($code) {    return eval($code);  },  ["node", "opts"],  self,  ['asciidoctor-revealjs/converter.rb', 581]), opts)
        };
        _buf = [];
        if ((($truthy(self['$has_role?']("aside")) || ($truthy(self['$has_role?']("speaker")))) || ($truthy(self['$has_role?']("notes"))))) {
          
          _buf['$<<']("<aside class=\"notes\">");
          _buf['$<<'](self.$resolve_content());
          _buf['$<<']("</aside>");
        } else {
          
          _slim_controls1 = $send(self, 'html_tag', ["div", $hash2(["id", "class"], {"id": self.id, "class": ["sidebarblock", self.$role(), ((($truthy(self['$option?']("step")) || ($truthy(self['$has_role?']("step")))) || ($truthy(self['$attr?']("step")))) ? ("fragment") : nil)]}).$merge(self.$data_attrs(self.attributes))], function $$21(){var self = $$21.$$s == null ? this : $$21.$$s, _slim_controls2 = nil;

            
            _slim_controls2 = [];
            _slim_controls2['$<<']("<div class=\"content\">");
            if ($truthy(self['$title?']())) {
              
              _slim_controls2['$<<']("<div class=\"title\">");
              _slim_controls2['$<<'](self.$title());
              _slim_controls2['$<<']("</div>");
            };
            _slim_controls2['$<<'](self.$content());
            _slim_controls2['$<<']("</div>");
            return (_slim_controls2 = _slim_controls2.$join(""));}, {$$s: self});
          _buf['$<<'](_slim_controls1);
        };
        return (_buf = _buf.$join(""));}, {$$s: self});
    }, -2);
    
    $def(self, '$convert_ruler', function $$convert_ruler(node, opts) {
      var self = this;

      
      if (opts == null) opts = $hash2([], {});
      node.$extend($$('Helpers'));
      return $send(node, 'instance_eval', [], function $$22(){var self = $$22.$$s == null ? this : $$22.$$s, _buf = nil;

        
        if (!$truthy(opts['$empty?']())) {
          self.$converter().$set_local_variables(Opal.Binding.$new(  function($code) {    return eval($code);  },  ["node", "opts"],  self,  ['asciidoctor-revealjs/converter.rb', 598]), opts)
        };
        _buf = [];
        _buf['$<<']("<hr>");
        return (_buf = _buf.$join(""));}, {$$s: self});
    }, -2);
    
    $def(self, '$convert_inline_menu', function $$convert_inline_menu(node, opts) {
      var self = this;

      
      if (opts == null) opts = $hash2([], {});
      node.$extend($$('Helpers'));
      return $send(node, 'instance_eval', [], function $$23(){var self = $$23.$$s == null ? this : $$23.$$s, _buf = nil, menu = nil, menuitem = nil, submenus = nil, _slim_controls1 = nil, _slim_controls3 = nil, _slim_controls5 = nil;
        if (self.attributes == null) self.attributes = nil;

        
        if (!$truthy(opts['$empty?']())) {
          self.$converter().$set_local_variables(Opal.Binding.$new(  function($code) {    return eval($code);  },  ["node", "opts"],  self,  ['asciidoctor-revealjs/converter.rb', 607]), opts)
        };
        _buf = [];
        menu = self.$attr("menu");
        menuitem = self.$attr("menuitem");
        if ($not((submenus = self.$attr("submenus"))['$empty?']())) {
          
          _slim_controls1 = $send(self, 'html_tag', ["span", $hash2(["class"], {"class": ["menuseq"]}).$merge(self.$data_attrs(self.attributes))], function $$24(){var _slim_controls2 = nil;

            
            _slim_controls2 = [];
            _slim_controls2['$<<']("<span class=\"menu\">");
            _slim_controls2['$<<'](menu);
            _slim_controls2['$<<']("</span>&#160;&#9656;&#32;");
            _slim_controls2['$<<']($send(submenus, 'map', [], function $$25(submenu){
              
              if (submenu == null) submenu = nil;
              return "<span class=\"submenu\">" + (submenu) + "</span>&#160;&#9656;&#32;";}).$join());
            _slim_controls2['$<<']("<span class=\"menuitem\">");
            _slim_controls2['$<<'](menuitem);
            _slim_controls2['$<<']("</span>");
            return (_slim_controls2 = _slim_controls2.$join(""));});
          _buf['$<<'](_slim_controls1);
        } else if ($not(menuitem['$nil?']())) {
          
          _slim_controls3 = $send(self, 'html_tag', ["span", $hash2(["class"], {"class": ["menuseq"]}).$merge(self.$data_attrs(self.attributes))], function $$26(){var _slim_controls4 = nil;

            
            _slim_controls4 = [];
            _slim_controls4['$<<']("<span class=\"menu\">");
            _slim_controls4['$<<'](menu);
            _slim_controls4['$<<']("</span>&#160;&#9656;&#32;<span class=\"menuitem\">");
            _slim_controls4['$<<'](menuitem);
            _slim_controls4['$<<']("</span>");
            return (_slim_controls4 = _slim_controls4.$join(""));});
          _buf['$<<'](_slim_controls3);
        } else {
          
          _slim_controls5 = $send(self, 'html_tag', ["span", $hash2(["class"], {"class": ["menu"]}).$merge(self.$data_attrs(self.attributes))], function $$27(){var _slim_controls6 = nil;

            
            _slim_controls6 = [];
            _slim_controls6['$<<'](menu);
            return (_slim_controls6 = _slim_controls6.$join(""));});
          _buf['$<<'](_slim_controls5);
        };
        return (_buf = _buf.$join(""));}, {$$s: self});
    }, -2);
    
    $def(self, '$convert_open', function $$convert_open(node, opts) {
      var self = this;

      
      if (opts == null) opts = $hash2([], {});
      node.$extend($$('Helpers'));
      return $send(node, 'instance_eval', [], function $$28(){var self = $$28.$$s == null ? this : $$28.$$s, _buf = nil, _slim_controls1 = nil, _slim_controls3 = nil;
        if (self.style == null) self.style = nil;
        if (self.document == null) self.document = nil;
        if (self.parent == null) self.parent = nil;
        if (self.id == null) self.id = nil;
        if (self.attributes == null) self.attributes = nil;
        if (self.level == null) self.level = nil;

        
        if (!$truthy(opts['$empty?']())) {
          self.$converter().$set_local_variables(Opal.Binding.$new(  function($code) {    return eval($code);  },  ["node", "opts"],  self,  ['asciidoctor-revealjs/converter.rb', 631]), opts)
        };
        _buf = [];
        if ($eqeq(self.style, "abstract")) {
          if (($eqeq(self.parent, self.document) && ($eqeq(self.document.$doctype(), "book")))) {
            self.$puts("asciidoctor: WARNING: abstract block cannot be used in a document without a title when doctype is book. Excluding block content.")
          } else {
            
            _slim_controls1 = $send(self, 'html_tag', ["div", $hash2(["id", "class"], {"id": self.id, "class": ["quoteblock", "abstract", self.$role(), (($truthy(self['$option?']("step")) || ($truthy(self['$attr?']("step")))) ? ("fragment") : nil)]}).$merge(self.$data_attrs(self.attributes))], function $$29(){var self = $$29.$$s == null ? this : $$29.$$s, _slim_controls2 = nil;

              
              _slim_controls2 = [];
              if ($truthy(self['$title?']())) {
                
                _slim_controls2['$<<']("<div class=\"title\">");
                _slim_controls2['$<<'](self.$title());
                _slim_controls2['$<<']("</div>");
              };
              _slim_controls2['$<<']("<blockquote>");
              _slim_controls2['$<<'](self.$content());
              _slim_controls2['$<<']("</blockquote>");
              return (_slim_controls2 = _slim_controls2.$join(""));}, {$$s: self});
            _buf['$<<'](_slim_controls1);
          }
        } else if (($eqeq(self.style, "partintro") && ((($neqeq(self.level, 0) || ($neqeq(self.parent.$context(), "section"))) || ($neqeq(self.document.$doctype(), "book")))))) {
          self.$puts("asciidoctor: ERROR: partintro block can only be used when doctype is book and it's a child of a book part. Excluding block content.")
        } else if ((($truthy(self['$has_role?']("aside")) || ($truthy(self['$has_role?']("speaker")))) || ($truthy(self['$has_role?']("notes"))))) {
          
          _buf['$<<']("<aside class=\"notes\">");
          _buf['$<<'](self.$resolve_content());
          _buf['$<<']("</aside>");
        } else {
          
          _slim_controls3 = $send(self, 'html_tag', ["div", $hash2(["id", "class"], {"id": self.id, "class": ["openblock", ($neqeq(self.style, "open") ? (self.style) : (nil)), self.$role(), (($truthy(self['$option?']("step")) || ($truthy(self['$attr?']("step")))) ? ("fragment") : nil)]}).$merge(self.$data_attrs(self.attributes))], function $$30(){var self = $$30.$$s == null ? this : $$30.$$s, _slim_controls4 = nil;

            
            _slim_controls4 = [];
            if ($truthy(self['$title?']())) {
              
              _slim_controls4['$<<']("<div class=\"title\">");
              _slim_controls4['$<<'](self.$title());
              _slim_controls4['$<<']("</div>");
            };
            _slim_controls4['$<<']("<div class=\"content\">");
            _slim_controls4['$<<'](self.$content());
            _slim_controls4['$<<']("</div>");
            return (_slim_controls4 = _slim_controls4.$join(""));}, {$$s: self});
          _buf['$<<'](_slim_controls3);
        };
        return (_buf = _buf.$join(""));}, {$$s: self});
    }, -2);
    
    $def(self, '$convert_paragraph', function $$convert_paragraph(node, opts) {
      var self = this;

      
      if (opts == null) opts = $hash2([], {});
      node.$extend($$('Helpers'));
      return $send(node, 'instance_eval', [], function $$31(){var self = $$31.$$s == null ? this : $$31.$$s, _buf = nil, _slim_controls1 = nil;
        if (self.id == null) self.id = nil;
        if (self.attributes == null) self.attributes = nil;

        
        if (!$truthy(opts['$empty?']())) {
          self.$converter().$set_local_variables(Opal.Binding.$new(  function($code) {    return eval($code);  },  ["node", "opts"],  self,  ['asciidoctor-revealjs/converter.rb', 658]), opts)
        };
        _buf = [];
        _slim_controls1 = $send(self, 'html_tag', ["div", $hash2(["id", "class"], {"id": self.id, "class": ["paragraph", self.$role(), (($truthy(self['$option?']("step")) || ($truthy(self['$attr?']("step")))) ? ("fragment") : nil)]}).$merge(self.$data_attrs(self.attributes))], function $$32(){var self = $$32.$$s == null ? this : $$32.$$s, _slim_controls2 = nil;

          
          _slim_controls2 = [];
          if ($truthy(self['$title?']())) {
            
            _slim_controls2['$<<']("<div class=\"title\">");
            _slim_controls2['$<<'](self.$title());
            _slim_controls2['$<<']("</div>");
          };
          if ($truthy(self['$has_role?']("small"))) {
            
            _slim_controls2['$<<']("<small>");
            _slim_controls2['$<<'](self.$content());
            _slim_controls2['$<<']("</small>");
          } else {
            
            _slim_controls2['$<<']("<p>");
            _slim_controls2['$<<'](self.$content());
            _slim_controls2['$<<']("</p>");
          };
          return (_slim_controls2 = _slim_controls2.$join(""));}, {$$s: self});
        _buf['$<<'](_slim_controls1);
        return (_buf = _buf.$join(""));}, {$$s: self});
    }, -2);
    
    $def(self, '$convert_toc', function $$convert_toc(node, opts) {
      var self = this;

      
      if (opts == null) opts = $hash2([], {});
      node.$extend($$('Helpers'));
      return $send(node, 'instance_eval', [], function $$33(){var self = $$33.$$s == null ? this : $$33.$$s, _buf = nil, _temple_html_attributeremover1 = nil, _slim_codeattributes1 = nil;

        
        if (!$truthy(opts['$empty?']())) {
          self.$converter().$set_local_variables(Opal.Binding.$new(  function($code) {    return eval($code);  },  ["node", "opts"],  self,  ['asciidoctor-revealjs/converter.rb', 673]), opts)
        };
        _buf = [];
        _buf['$<<']("<div id=\"toc\"");
        _temple_html_attributeremover1 = [];
        _slim_codeattributes1 = self.$document().$attr("toc-class", "toc");
        if ($eqeqeq($$('Array'), _slim_codeattributes1)) {
          
          _slim_codeattributes1 = _slim_codeattributes1.$flatten();
          $send(_slim_codeattributes1, 'map!', [], "to_s".$to_proc());
          $send(_slim_codeattributes1, 'reject!', [], "empty?".$to_proc());
          _temple_html_attributeremover1['$<<'](_slim_codeattributes1.$join(" "));
        } else {
          _temple_html_attributeremover1['$<<'](_slim_codeattributes1)
        };
        _temple_html_attributeremover1 = _temple_html_attributeremover1.$join("");
        if ($not(_temple_html_attributeremover1['$empty?']())) {
          
          _buf['$<<'](" class=\"");
          _buf['$<<'](_temple_html_attributeremover1);
          _buf['$<<']("\"");
        };
        _buf['$<<']("><div id=\"toctitle\">");
        _buf['$<<'](self.$document().$attr("toc-title"));
        _buf['$<<']("</div>");
        _buf['$<<'](self.$converter().$convert(self.$document(), "outline"));
        _buf['$<<']("</div>");
        return (_buf = _buf.$join(""));}, {$$s: self});
    }, -2);
    
    $def(self, '$convert_dlist', function $$convert_dlist(node, opts) {
      var self = this;

      
      if (opts == null) opts = $hash2([], {});
      node.$extend($$('Helpers'));
      return $send(node, 'instance_eval', [], function $$34(){var self = $$34.$$s == null ? this : $$34.$$s, _buf = nil, _slim_controls1 = nil, _slim_controls3 = nil, _slim_controls5 = nil;
        if (self.style == null) self.style = nil;
        if (self.id == null) self.id = nil;
        if (self.attributes == null) self.attributes = nil;

        
        if (!$truthy(opts['$empty?']())) {
          self.$converter().$set_local_variables(Opal.Binding.$new(  function($code) {    return eval($code);  },  ["node", "opts"],  self,  ['asciidoctor-revealjs/converter.rb', 698]), opts)
        };
        _buf = [];
        
        switch (self.style) {
          case "qanda":
            
            _slim_controls1 = $send(self, 'html_tag', ["div", $hash2(["id", "class"], {"id": self.id, "class": ["qlist", self.style, self.$role()]}).$merge(self.$data_attrs(self.attributes))], function $$35(){var self = $$35.$$s == null ? this : $$35.$$s, _slim_controls2 = nil;

              
              _slim_controls2 = [];
              if ($truthy(self['$title?']())) {
                
                _slim_controls2['$<<']("<div class=\"title\">");
                _slim_controls2['$<<'](self.$title());
                _slim_controls2['$<<']("</div>");
              };
              _slim_controls2['$<<']("<ol>");
              $send(self.$items(), 'each', [], function $$36(questions, answer){
                
                if (questions == null) questions = nil;
                if (answer == null) answer = nil;
                _slim_controls2['$<<']("<li>");
                $send([].concat($to_a(questions)), 'each', [], function $$37(question){
                  
                  if (question == null) question = nil;
                  _slim_controls2['$<<']("<p><em>");
                  _slim_controls2['$<<'](question.$text());
                  return _slim_controls2['$<<']("</em></p>");});
                if (!$truthy(answer['$nil?']())) {
                  
                  if ($truthy(answer['$text?']())) {
                    
                    _slim_controls2['$<<']("<p>");
                    _slim_controls2['$<<'](answer.$text());
                    _slim_controls2['$<<']("</p>");
                  };
                  if ($truthy(answer['$blocks?']())) {
                    _slim_controls2['$<<'](answer.$content())
                  };
                };
                return _slim_controls2['$<<']("</li>");});
              _slim_controls2['$<<']("</ol>");
              return (_slim_controls2 = _slim_controls2.$join(""));}, {$$s: self});
            _buf['$<<'](_slim_controls1);
            break;
          case "horizontal":
            
            _slim_controls3 = $send(self, 'html_tag', ["div", $hash2(["id", "class"], {"id": self.id, "class": ["hdlist", self.$role()]}).$merge(self.$data_attrs(self.attributes))], function $$38(){var self = $$38.$$s == null ? this : $$38.$$s, _slim_controls4 = nil, _slim_codeattributes1 = nil, _slim_codeattributes2 = nil;

              
              _slim_controls4 = [];
              if ($truthy(self['$title?']())) {
                
                _slim_controls4['$<<']("<div class=\"title\">");
                _slim_controls4['$<<'](self.$title());
                _slim_controls4['$<<']("</div>");
              };
              _slim_controls4['$<<']("<table>");
              if (($truthy(self['$attr?']("labelwidth")) || ($truthy(self['$attr?']("itemwidth"))))) {
                
                _slim_controls4['$<<']("<colgroup><col");
                _slim_codeattributes1 = ($truthy(self['$attr?']("labelwidth")) ? ("width:" + (self.$attr("labelwidth").$chomp("%")) + "%;") : (nil));
                if ($truthy(_slim_codeattributes1)) {
                  if ($eqeq(_slim_codeattributes1, true)) {
                    _slim_controls4['$<<'](" style")
                  } else {
                    
                    _slim_controls4['$<<'](" style=\"");
                    _slim_controls4['$<<'](_slim_codeattributes1);
                    _slim_controls4['$<<']("\"");
                  }
                };
                _slim_controls4['$<<']("><col");
                _slim_codeattributes2 = ($truthy(self['$attr?']("itemwidth")) ? ("width:" + (self.$attr("itemwidth").$chomp("%")) + "%;") : (nil));
                if ($truthy(_slim_codeattributes2)) {
                  if ($eqeq(_slim_codeattributes2, true)) {
                    _slim_controls4['$<<'](" style")
                  } else {
                    
                    _slim_controls4['$<<'](" style=\"");
                    _slim_controls4['$<<'](_slim_codeattributes2);
                    _slim_controls4['$<<']("\"");
                  }
                };
                _slim_controls4['$<<']("></colgroup>");
              };
              $send(self.$items(), 'each', [], function $$39(terms, dd){var self = $$39.$$s == null ? this : $$39.$$s, _temple_html_attributeremover1 = nil, _slim_codeattributes3 = nil, last_term = nil;

                
                if (terms == null) terms = nil;
                if (dd == null) dd = nil;
                _slim_controls4['$<<']("<tr><td");
                _temple_html_attributeremover1 = [];
                _slim_codeattributes3 = ["hdlist1", ($truthy(self['$option?']("strong")) ? ("strong") : nil)];
                if ($eqeqeq($$('Array'), _slim_codeattributes3)) {
                  
                  _slim_codeattributes3 = _slim_codeattributes3.$flatten();
                  $send(_slim_codeattributes3, 'map!', [], "to_s".$to_proc());
                  $send(_slim_codeattributes3, 'reject!', [], "empty?".$to_proc());
                  _temple_html_attributeremover1['$<<'](_slim_codeattributes3.$join(" "));
                } else {
                  _temple_html_attributeremover1['$<<'](_slim_codeattributes3)
                };
                _temple_html_attributeremover1 = _temple_html_attributeremover1.$join("");
                if ($not(_temple_html_attributeremover1['$empty?']())) {
                  
                  _slim_controls4['$<<'](" class=\"");
                  _slim_controls4['$<<'](_temple_html_attributeremover1);
                  _slim_controls4['$<<']("\"");
                };
                _slim_controls4['$<<'](">");
                terms = [].concat($to_a(terms));
                last_term = terms.$last();
                $send(terms, 'each', [], function $$40(dt){
                  
                  if (dt == null) dt = nil;
                  _slim_controls4['$<<'](dt.$text());
                  if ($neqeq(dt, last_term)) {
                    return _slim_controls4['$<<']("<br>")
                  } else {
                    return nil
                  };});
                _slim_controls4['$<<']("</td><td class=\"hdlist2\">");
                if (!$truthy(dd['$nil?']())) {
                  
                  if ($truthy(dd['$text?']())) {
                    
                    _slim_controls4['$<<']("<p>");
                    _slim_controls4['$<<'](dd.$text());
                    _slim_controls4['$<<']("</p>");
                  };
                  if ($truthy(dd['$blocks?']())) {
                    _slim_controls4['$<<'](dd.$content())
                  };
                };
                return _slim_controls4['$<<']("</td></tr>");}, {$$s: self});
              _slim_controls4['$<<']("</table>");
              return (_slim_controls4 = _slim_controls4.$join(""));}, {$$s: self});
            _buf['$<<'](_slim_controls3);
            break;
          default:
            
            _slim_controls5 = $send(self, 'html_tag', ["div", $hash2(["id", "class"], {"id": self.id, "class": ["dlist", self.style, self.$role()]}).$merge(self.$data_attrs(self.attributes))], function $$41(){var self = $$41.$$s == null ? this : $$41.$$s, _slim_controls6 = nil;

              
              _slim_controls6 = [];
              if ($truthy(self['$title?']())) {
                
                _slim_controls6['$<<']("<div class=\"title\">");
                _slim_controls6['$<<'](self.$title());
                _slim_controls6['$<<']("</div>");
              };
              _slim_controls6['$<<']("<dl>");
              $send(self.$items(), 'each', [], function $$42(terms, dd){var self = $$42.$$s == null ? this : $$42.$$s;

                
                if (terms == null) terms = nil;
                if (dd == null) dd = nil;
                $send([].concat($to_a(terms)), 'each', [], function $$43(dt){var self = $$43.$$s == null ? this : $$43.$$s, _temple_html_attributeremover2 = nil, _slim_codeattributes4 = nil;
                  if (self.style == null) self.style = nil;

                  
                  if (dt == null) dt = nil;
                  _slim_controls6['$<<']("<dt");
                  _temple_html_attributeremover2 = [];
                  _slim_codeattributes4 = ($truthy(self.style) ? (nil) : ("hdlist1"));
                  if ($eqeqeq($$('Array'), _slim_codeattributes4)) {
                    
                    _slim_codeattributes4 = _slim_codeattributes4.$flatten();
                    $send(_slim_codeattributes4, 'map!', [], "to_s".$to_proc());
                    $send(_slim_codeattributes4, 'reject!', [], "empty?".$to_proc());
                    _temple_html_attributeremover2['$<<'](_slim_codeattributes4.$join(" "));
                  } else {
                    _temple_html_attributeremover2['$<<'](_slim_codeattributes4)
                  };
                  _temple_html_attributeremover2 = _temple_html_attributeremover2.$join("");
                  if ($not(_temple_html_attributeremover2['$empty?']())) {
                    
                    _slim_controls6['$<<'](" class=\"");
                    _slim_controls6['$<<'](_temple_html_attributeremover2);
                    _slim_controls6['$<<']("\"");
                  };
                  _slim_controls6['$<<'](">");
                  _slim_controls6['$<<'](dt.$text());
                  return _slim_controls6['$<<']("</dt>");}, {$$s: self});
                if ($truthy(dd['$nil?']())) {
                  return nil
                } else {
                  
                  _slim_controls6['$<<']("<dd>");
                  if ($truthy(dd['$text?']())) {
                    
                    _slim_controls6['$<<']("<p>");
                    _slim_controls6['$<<'](dd.$text());
                    _slim_controls6['$<<']("</p>");
                  };
                  if ($truthy(dd['$blocks?']())) {
                    _slim_controls6['$<<'](dd.$content())
                  };
                  return _slim_controls6['$<<']("</dd>");
                };}, {$$s: self});
              _slim_controls6['$<<']("</dl>");
              return (_slim_controls6 = _slim_controls6.$join(""));}, {$$s: self});
            _buf['$<<'](_slim_controls5);
        };
        return (_buf = _buf.$join(""));}, {$$s: self});
    }, -2);
    
    $def(self, '$convert_inline_quoted', function $$convert_inline_quoted(node, opts) {
      var self = this;

      
      if (opts == null) opts = $hash2([], {});
      node.$extend($$('Helpers'));
      return $send(node, 'instance_eval', [], function $$44(){var $a, $b, self = $$44.$$s == null ? this : $$44.$$s, _buf = nil, quote_tags = nil, quote_tag = nil, open = nil, close = nil;
        if (self.type == null) self.type = nil;
        if (self.id == null) self.id = nil;
        if (self.attributes == null) self.attributes = nil;
        if (self.text == null) self.text = nil;

        
        if (!$truthy(opts['$empty?']())) {
          self.$converter().$set_local_variables(Opal.Binding.$new(  function($code) {    return eval($code);  },  ["node", "opts"],  self,  ['asciidoctor-revealjs/converter.rb', 759]), opts)
        };
        _buf = [];
        quote_tags = $hash2(["emphasis", "strong", "monospaced", "superscript", "subscript"], {"emphasis": "em", "strong": "strong", "monospaced": "code", "superscript": "sup", "subscript": "sub"});
        if ($truthy((quote_tag = quote_tags['$[]'](self.type)))) {
          _buf['$<<'](self.$html_tag(quote_tag, $hash2(["id", "class"], {"id": self.id, "class": [self.$role(), (($truthy(self['$option?']("step")) || ($truthy(self['$attr?']("step")))) ? ("fragment") : nil)].$compact()}).$merge(self.$data_attrs(self.attributes)), self.text))
        } else 
        switch (self.type) {
          case "double":
            _buf['$<<'](self.$inline_text_container("&#8220;" + (self.text) + "&#8221;"))
            break;
          case "single":
            _buf['$<<'](self.$inline_text_container("&#8216;" + (self.text) + "&#8217;"))
            break;
          case "asciimath":
          case "latexmath":
            
            $b = $$$($$('Asciidoctor'), 'INLINE_MATH_DELIMITERS')['$[]'](self.type), $a = $to_ary($b), (open = ($a[0] == null ? nil : $a[0])), (close = ($a[1] == null ? nil : $a[1])), $b;
            _buf['$<<'](self.$inline_text_container("" + (open) + (self.text) + (close)));
            break;
          default:
            _buf['$<<'](self.$inline_text_container(self.text))
        };
        return (_buf = _buf.$join(""));}, {$$s: self});
    }, -2);
    
    $def(self, '$convert_thematic_break', function $$convert_thematic_break(node, opts) {
      var self = this;

      
      if (opts == null) opts = $hash2([], {});
      node.$extend($$('Helpers'));
      return $send(node, 'instance_eval', [], function $$45(){var self = $$45.$$s == null ? this : $$45.$$s, _buf = nil;

        
        if (!$truthy(opts['$empty?']())) {
          self.$converter().$set_local_variables(Opal.Binding.$new(  function($code) {    return eval($code);  },  ["node", "opts"],  self,  ['asciidoctor-revealjs/converter.rb', 781]), opts)
        };
        _buf = [];
        _buf['$<<']("<hr>");
        return (_buf = _buf.$join(""));}, {$$s: self});
    }, -2);
    
    $def(self, '$convert_stem', function $$convert_stem(node, opts) {
      var self = this;

      
      if (opts == null) opts = $hash2([], {});
      node.$extend($$('Helpers'));
      return $send(node, 'instance_eval', [], function $$46(){var $a, $b, self = $$46.$$s == null ? this : $$46.$$s, _buf = nil, open = nil, close = nil, equation = nil, _slim_controls1 = nil;
        if (self.style == null) self.style = nil;
        if (self.subs == null) self.subs = nil;
        if (self.id == null) self.id = nil;
        if (self.attributes == null) self.attributes = nil;

        
        if (!$truthy(opts['$empty?']())) {
          self.$converter().$set_local_variables(Opal.Binding.$new(  function($code) {    return eval($code);  },  ["node", "opts"],  self,  ['asciidoctor-revealjs/converter.rb', 790]), opts)
        };
        _buf = [];
        $b = $$$($$('Asciidoctor'), 'BLOCK_MATH_DELIMITERS')['$[]'](self.style.$to_sym()), $a = $to_ary($b), (open = ($a[0] == null ? nil : $a[0])), (close = ($a[1] == null ? nil : $a[1])), $b;
        equation = self.$content().$strip();
        if ((($truthy(self.subs['$nil?']()) || ($truthy(self.subs['$empty?']()))) && ($not(self['$attr?']("subs"))))) {
          equation = self.$sub_specialcharacters(equation)
        };
        if (!($truthy(equation['$start_with?'](open)) && ($truthy(equation['$end_with?'](close))))) {
          equation = "" + (open) + (equation) + (close)
        };
        _slim_controls1 = $send(self, 'html_tag', ["div", $hash2(["id", "class"], {"id": self.id, "class": ["stemblock", self.$role(), ((($truthy(self['$option?']("step")) || ($truthy(self['$has_role?']("step")))) || ($truthy(self['$attr?']("step")))) ? ("fragment") : nil)]}).$merge(self.$data_attrs(self.attributes))], function $$47(){var self = $$47.$$s == null ? this : $$47.$$s, _slim_controls2 = nil;

          
          _slim_controls2 = [];
          if ($truthy(self['$title?']())) {
            
            _slim_controls2['$<<']("<div class=\"title\">");
            _slim_controls2['$<<'](self.$title());
            _slim_controls2['$<<']("</div>");
          };
          _slim_controls2['$<<']("<div class=\"content\">");
          _slim_controls2['$<<'](equation);
          _slim_controls2['$<<']("</div>");
          return (_slim_controls2 = _slim_controls2.$join(""));}, {$$s: self});
        _buf['$<<'](_slim_controls1);
        return (_buf = _buf.$join(""));}, {$$s: self});
    }, -2);
    
    $def(self, '$convert_inline_anchor', function $$convert_inline_anchor(node, opts) {
      var self = this;

      
      if (opts == null) opts = $hash2([], {});
      node.$extend($$('Helpers'));
      return $send(node, 'instance_eval', [], function $$48(){var self = $$48.$$s == null ? this : $$48.$$s, _buf = nil, refid = nil, $ret_or_2 = nil, _slim_controls1 = nil, _slim_controls3 = nil;
        if (self.type == null) self.type = nil;
        if (self.target == null) self.target = nil;
        if (self.attributes == null) self.attributes = nil;

        
        if (!$truthy(opts['$empty?']())) {
          self.$converter().$set_local_variables(Opal.Binding.$new(  function($code) {    return eval($code);  },  ["node", "opts"],  self,  ['asciidoctor-revealjs/converter.rb', 808]), opts)
        };
        _buf = [];
        
        switch (self.type) {
          case "xref":
            
            refid = ($truthy(($ret_or_2 = self.$attr("refid"))) ? ($ret_or_2) : (self.target));
            _slim_controls1 = $send(self, 'html_tag', ["a", $hash2(["href", "class"], {"href": self.target, "class": [self.$role(), (($truthy(self['$option?']("step")) || ($truthy(self['$attr?']("step")))) ? ("fragment") : nil)].$compact()}).$merge(self.$data_attrs(self.attributes))], function $$49(){var self = $$49.$$s == null ? this : $$49.$$s, _slim_controls2 = nil;
              if (self.text == null) self.text = nil;
              if (self.document == null) self.document = nil;

              
              _slim_controls2 = [];
              _slim_controls2['$<<'](($truthy(($ret_or_2 = self.text)) ? ($ret_or_2) : (self.document.$references()['$[]']("ids").$fetch(refid, "[" + (refid) + "]"))).$tr_s("\n", " "));
              return (_slim_controls2 = _slim_controls2.$join(""));}, {$$s: self});
            _buf['$<<'](_slim_controls1);
            break;
          case "ref":
            _buf['$<<'](self.$html_tag("a", $hash2(["id"], {"id": self.target}).$merge(self.$data_attrs(self.attributes))))
            break;
          case "bibref":
            
            _buf['$<<'](self.$html_tag("a", $hash2(["id"], {"id": self.target}).$merge(self.$data_attrs(self.attributes))));
            _buf['$<<']("[");
            _buf['$<<'](self.target);
            _buf['$<<']("]");
            break;
          default:
            
            _slim_controls3 = $send(self, 'html_tag', ["a", $hash2(["href", "class", "target", "data-preview-link"], {"href": self.target, "class": [self.$role(), (($truthy(self['$option?']("step")) || ($truthy(self['$attr?']("step")))) ? ("fragment") : nil)].$compact(), "target": self.$attr("window"), "data-preview-link": self.$bool_data_attr("preview")}).$merge(self.$data_attrs(self.attributes))], function $$50(){var self = $$50.$$s == null ? this : $$50.$$s, _slim_controls4 = nil;
              if (self.text == null) self.text = nil;

              
              _slim_controls4 = [];
              _slim_controls4['$<<'](self.text);
              return (_slim_controls4 = _slim_controls4.$join(""));}, {$$s: self});
            _buf['$<<'](_slim_controls3);
        };
        return (_buf = _buf.$join(""));}, {$$s: self});
    }, -2);
    
    $def(self, '$convert_document', function $$convert_document(node, opts) {
      var self = this;

      
      if (opts == null) opts = $hash2([], {});
      node.$extend($$('Helpers'));
      return $send(node, 'instance_eval', [], function $$51(){var self = $$51.$$s == null ? this : $$51.$$s, _buf = nil, slides_content = nil, _slim_codeattributes16 = nil, revealjsdir = nil, asset_uri_scheme = nil, cdn_base = nil, icon_href = nil, icon_type = nil, icon_ext = nil, linkcss = nil, _slim_codeattributes19 = nil, iconfont_cdn = nil, _slim_codeattributes20 = nil, font_awesome_version = nil, _slim_codeattributes21 = nil, _slim_codeattributes22 = nil, _slim_codeattributes23 = nil, syntax_hl = nil, _slim_codeattributes24 = nil, customcss = nil, _docinfo = nil, docinfo_content = nil;

        
        if (!$truthy(opts['$empty?']())) {
          self.$converter().$set_local_variables(Opal.Binding.$new(  function($code) {    return eval($code);  },  ["node", "opts"],  self,  ['asciidoctor-revealjs/converter.rb', 829]), opts)
        };
        _buf = [];
        slides_content = self.$content();
        $send(self, 'content_for', ["slides"], function $$52(){var self = $$52.$$s == null ? this : $$52.$$s, header_docinfo = nil, bg_image = nil, bg_video = nil, _temple_html_attributeremover1 = nil, _temple_html_attributemerger1 = nil, _slim_codeattributes1 = nil, _slim_codeattributes2 = nil, _slim_codeattributes3 = nil, _slim_codeattributes4 = nil, _slim_codeattributes5 = nil, _slim_codeattributes6 = nil, _slim_codeattributes7 = nil, _slim_codeattributes8 = nil, _slim_codeattributes9 = nil, _slim_codeattributes10 = nil, _slim_codeattributes11 = nil, _slim_codeattributes12 = nil, _slim_codeattributes13 = nil, _slim_codeattributes14 = nil, _slim_codeattributes15 = nil, _title_obj = nil, _slice = nil, preamble = nil, footer_docinfo = nil;
          if (self.header == null) self.header = nil;
          if (self.document == null) self.document = nil;

          
          if (!$truthy(self.$noheader())) {
            
            if (!$truthy((header_docinfo = self.$docinfo("header", "-revealjs.html"))['$empty?']())) {
              _buf['$<<'](header_docinfo)
            };
            if ($truthy(self['$header?']())) {
              
              bg_image = ($truthy(self['$attr?']("title-slide-background-image")) ? (self.$image_uri(self.$attr("title-slide-background-image"))) : (nil));
              bg_video = ($truthy(self['$attr?']("title-slide-background-video")) ? (self.$media_uri(self.$attr("title-slide-background-video"))) : (nil));
              _buf['$<<']("<section");
              _temple_html_attributeremover1 = [];
              _temple_html_attributemerger1 = [];
              _temple_html_attributemerger1['$[]='](0, "title");
              _temple_html_attributemerger1['$[]='](1, []);
              _slim_codeattributes1 = self.$role();
              if ($eqeqeq($$('Array'), _slim_codeattributes1)) {
                
                _slim_codeattributes1 = _slim_codeattributes1.$flatten();
                $send(_slim_codeattributes1, 'map!', [], "to_s".$to_proc());
                $send(_slim_codeattributes1, 'reject!', [], "empty?".$to_proc());
                _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1.$join(" "));
              } else {
                _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1)
              };
              _temple_html_attributemerger1['$[]='](1, _temple_html_attributemerger1['$[]'](1).$join(""));
              _temple_html_attributeremover1['$<<']($send(_temple_html_attributemerger1, 'reject', [], "empty?".$to_proc()).$join(" "));
              _temple_html_attributeremover1 = _temple_html_attributeremover1.$join("");
              if ($not(_temple_html_attributeremover1['$empty?']())) {
                
                _buf['$<<'](" class=\"");
                _buf['$<<'](_temple_html_attributeremover1);
                _buf['$<<']("\"");
              };
              _buf['$<<'](" data-state=\"title\"");
              _slim_codeattributes2 = self.$attr("title-slide-transition");
              if ($truthy(_slim_codeattributes2)) {
                if ($eqeq(_slim_codeattributes2, true)) {
                  _buf['$<<'](" data-transition")
                } else {
                  
                  _buf['$<<'](" data-transition=\"");
                  _buf['$<<'](_slim_codeattributes2);
                  _buf['$<<']("\"");
                }
              };
              _slim_codeattributes3 = self.$attr("title-slide-transition-speed");
              if ($truthy(_slim_codeattributes3)) {
                if ($eqeq(_slim_codeattributes3, true)) {
                  _buf['$<<'](" data-transition-speed")
                } else {
                  
                  _buf['$<<'](" data-transition-speed=\"");
                  _buf['$<<'](_slim_codeattributes3);
                  _buf['$<<']("\"");
                }
              };
              _slim_codeattributes4 = self.$attr("title-slide-background");
              if ($truthy(_slim_codeattributes4)) {
                if ($eqeq(_slim_codeattributes4, true)) {
                  _buf['$<<'](" data-background")
                } else {
                  
                  _buf['$<<'](" data-background=\"");
                  _buf['$<<'](_slim_codeattributes4);
                  _buf['$<<']("\"");
                }
              };
              _slim_codeattributes5 = self.$attr("title-slide-background-size");
              if ($truthy(_slim_codeattributes5)) {
                if ($eqeq(_slim_codeattributes5, true)) {
                  _buf['$<<'](" data-background-size")
                } else {
                  
                  _buf['$<<'](" data-background-size=\"");
                  _buf['$<<'](_slim_codeattributes5);
                  _buf['$<<']("\"");
                }
              };
              _slim_codeattributes6 = bg_image;
              if ($truthy(_slim_codeattributes6)) {
                if ($eqeq(_slim_codeattributes6, true)) {
                  _buf['$<<'](" data-background-image")
                } else {
                  
                  _buf['$<<'](" data-background-image=\"");
                  _buf['$<<'](_slim_codeattributes6);
                  _buf['$<<']("\"");
                }
              };
              _slim_codeattributes7 = bg_video;
              if ($truthy(_slim_codeattributes7)) {
                if ($eqeq(_slim_codeattributes7, true)) {
                  _buf['$<<'](" data-background-video")
                } else {
                  
                  _buf['$<<'](" data-background-video=\"");
                  _buf['$<<'](_slim_codeattributes7);
                  _buf['$<<']("\"");
                }
              };
              _slim_codeattributes8 = self.$attr("title-slide-background-video-loop");
              if ($truthy(_slim_codeattributes8)) {
                if ($eqeq(_slim_codeattributes8, true)) {
                  _buf['$<<'](" data-background-video-loop")
                } else {
                  
                  _buf['$<<'](" data-background-video-loop=\"");
                  _buf['$<<'](_slim_codeattributes8);
                  _buf['$<<']("\"");
                }
              };
              _slim_codeattributes9 = self.$attr("title-slide-background-video-muted");
              if ($truthy(_slim_codeattributes9)) {
                if ($eqeq(_slim_codeattributes9, true)) {
                  _buf['$<<'](" data-background-video-muted")
                } else {
                  
                  _buf['$<<'](" data-background-video-muted=\"");
                  _buf['$<<'](_slim_codeattributes9);
                  _buf['$<<']("\"");
                }
              };
              _slim_codeattributes10 = self.$attr("title-slide-background-opacity");
              if ($truthy(_slim_codeattributes10)) {
                if ($eqeq(_slim_codeattributes10, true)) {
                  _buf['$<<'](" data-background-opacity")
                } else {
                  
                  _buf['$<<'](" data-background-opacity=\"");
                  _buf['$<<'](_slim_codeattributes10);
                  _buf['$<<']("\"");
                }
              };
              _slim_codeattributes11 = self.$attr("title-slide-background-iframe");
              if ($truthy(_slim_codeattributes11)) {
                if ($eqeq(_slim_codeattributes11, true)) {
                  _buf['$<<'](" data-background-iframe")
                } else {
                  
                  _buf['$<<'](" data-background-iframe=\"");
                  _buf['$<<'](_slim_codeattributes11);
                  _buf['$<<']("\"");
                }
              };
              _slim_codeattributes12 = self.$attr("title-slide-background-color");
              if ($truthy(_slim_codeattributes12)) {
                if ($eqeq(_slim_codeattributes12, true)) {
                  _buf['$<<'](" data-background-color")
                } else {
                  
                  _buf['$<<'](" data-background-color=\"");
                  _buf['$<<'](_slim_codeattributes12);
                  _buf['$<<']("\"");
                }
              };
              _slim_codeattributes13 = self.$attr("title-slide-background-repeat");
              if ($truthy(_slim_codeattributes13)) {
                if ($eqeq(_slim_codeattributes13, true)) {
                  _buf['$<<'](" data-background-repeat")
                } else {
                  
                  _buf['$<<'](" data-background-repeat=\"");
                  _buf['$<<'](_slim_codeattributes13);
                  _buf['$<<']("\"");
                }
              };
              _slim_codeattributes14 = self.$attr("title-slide-background-position");
              if ($truthy(_slim_codeattributes14)) {
                if ($eqeq(_slim_codeattributes14, true)) {
                  _buf['$<<'](" data-background-position")
                } else {
                  
                  _buf['$<<'](" data-background-position=\"");
                  _buf['$<<'](_slim_codeattributes14);
                  _buf['$<<']("\"");
                }
              };
              _slim_codeattributes15 = self.$attr("title-slide-background-transition");
              if ($truthy(_slim_codeattributes15)) {
                if ($eqeq(_slim_codeattributes15, true)) {
                  _buf['$<<'](" data-background-transition")
                } else {
                  
                  _buf['$<<'](" data-background-transition=\"");
                  _buf['$<<'](_slim_codeattributes15);
                  _buf['$<<']("\"");
                }
              };
              _buf['$<<'](">");
              if ($truthy((_title_obj = self.$doctitle($hash2(["partition", "use_fallback"], {"partition": true, "use_fallback": true})))['$subtitle?']())) {
                
                _buf['$<<']("<h1>");
                _buf['$<<'](self.$slice_text(_title_obj.$title(), (_slice = self.$header()['$option?']("slice"))));
                _buf['$<<']("</h1><h2>");
                _buf['$<<'](self.$slice_text(_title_obj.$subtitle(), _slice));
                _buf['$<<']("</h2>");
              } else {
                
                _buf['$<<']("<h1>");
                _buf['$<<'](self.header.$title());
                _buf['$<<']("</h1>");
              };
              preamble = self.document.$find_by($hash2(["context"], {"context": "preamble"}));
              if (!($truthy(preamble['$nil?']()) || ($eqeq(preamble.$length(), 0)))) {
                
                _buf['$<<']("<div class=\"preamble\">");
                _buf['$<<'](preamble.$pop().$content());
                _buf['$<<']("</div>");
              };
              _buf['$<<'](self.$generate_authors(self.document));
              _buf['$<<']("</section>");
            };
          };
          _buf['$<<'](slides_content);
          if ($truthy((footer_docinfo = self.$docinfo("footer", "-revealjs.html"))['$empty?']())) {
            return nil
          } else {
            return _buf['$<<'](footer_docinfo)
          };}, {$$s: self});
        _buf['$<<']("<!DOCTYPE html><html");
        _slim_codeattributes16 = ($truthy(self['$attr?']("nolang")) ? (nil) : (self.$attr("lang", "en")));
        if ($truthy(_slim_codeattributes16)) {
          if ($eqeq(_slim_codeattributes16, true)) {
            _buf['$<<'](" lang")
          } else {
            
            _buf['$<<'](" lang=\"");
            _buf['$<<'](_slim_codeattributes16);
            _buf['$<<']("\"");
          }
        };
        _buf['$<<']("><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, minimal-ui\"><title>");
        _buf['$<<'](self.$doctitle($hash2(["sanitize", "use_fallback"], {"sanitize": true, "use_fallback": true})));
        _buf['$<<']("</title>");
        if (($eqeq($$('RUBY_ENGINE'), "opal") && ($eqeq($$('JAVASCRIPT_PLATFORM'), "node")))) {
          revealjsdir = self.$attr("revealjsdir", "node_modules/reveal.js")
        } else {
          revealjsdir = self.$attr("revealjsdir", "reveal.js")
        };
        if (!$truthy((asset_uri_scheme = self.$attr("asset-uri-scheme", "https"))['$empty?']())) {
          asset_uri_scheme = "" + (asset_uri_scheme) + ":"
        };
        cdn_base = "" + (asset_uri_scheme) + "//cdnjs.cloudflare.com/ajax/libs";
        $send(["description", "keywords", "author", "copyright"], 'each', [], function $$53(key){var self = $$53.$$s == null ? this : $$53.$$s, _slim_codeattributes17 = nil, _slim_codeattributes18 = nil;

          
          if (key == null) key = nil;
          if ($truthy(self['$attr?'](key))) {
            
            _buf['$<<']("<meta");
            _slim_codeattributes17 = key;
            if ($truthy(_slim_codeattributes17)) {
              if ($eqeq(_slim_codeattributes17, true)) {
                _buf['$<<'](" name")
              } else {
                
                _buf['$<<'](" name=\"");
                _buf['$<<'](_slim_codeattributes17);
                _buf['$<<']("\"");
              }
            };
            _slim_codeattributes18 = self.$attr(key);
            if ($truthy(_slim_codeattributes18)) {
              if ($eqeq(_slim_codeattributes18, true)) {
                _buf['$<<'](" content")
              } else {
                
                _buf['$<<'](" content=\"");
                _buf['$<<'](_slim_codeattributes18);
                _buf['$<<']("\"");
              }
            };
            return _buf['$<<'](">");
          } else {
            return nil
          };}, {$$s: self});
        if ($truthy(self['$attr?']("favicon"))) {
          
          if ($truthy((icon_href = self.$attr("favicon"))['$empty?']())) {
            
            icon_href = "favicon.ico";
            icon_type = "image/x-icon";
          } else if ($truthy((icon_ext = $$('File').$extname(icon_href)))) {
            icon_type = ($eqeq(icon_ext, ".ico") ? ("image/x-icon") : ("image/" + (icon_ext.$slice(1, icon_ext.$length()))))
          } else {
            icon_type = "image/x-icon"
          };
          _buf['$<<']("<link rel=\"icon\" type=\"");
          _buf['$<<'](icon_type);
          _buf['$<<']("\" href=\"");
          _buf['$<<'](icon_href);
          _buf['$<<']("\">");
        };
        linkcss = self['$attr?']("linkcss");
        _buf['$<<']("<link rel=\"stylesheet\" href=\"");
        _buf['$<<'](revealjsdir);
        _buf['$<<']("/dist/reset.css\"><link rel=\"stylesheet\" href=\"");
        _buf['$<<'](revealjsdir);
        _buf['$<<']("/dist/reveal.css\"><link rel=\"stylesheet\"");
        _slim_codeattributes19 = self.$attr("revealjs_customtheme", "" + (revealjsdir) + "/dist/theme/" + (self.$attr("revealjs_theme", "black")) + ".css");
        if ($truthy(_slim_codeattributes19)) {
          if ($eqeq(_slim_codeattributes19, true)) {
            _buf['$<<'](" href")
          } else {
            
            _buf['$<<'](" href=\"");
            _buf['$<<'](_slim_codeattributes19);
            _buf['$<<']("\"");
          }
        };
        _buf['$<<'](" id=\"theme\"><!--This CSS is generated by the Asciidoctor reveal.js converter to further integrate AsciiDoc's existing semantic with reveal.js--><style type=\"text/css\">.reveal div.right {\n  float: right\n}\n\n/* source blocks */\n.reveal .listingblock.stretch > .content {\n  height: 100%\n}\n\n.reveal .listingblock.stretch > .content > pre {\n  height: 100%\n}\n\n.reveal .listingblock.stretch > .content > pre > code {\n  height: 100%;\n  max-height: 100%\n}\n\n/* auto-animate feature */\n/* hide the scrollbar when auto-animating source blocks */\n.reveal pre[data-auto-animate-target] {\n  overflow: hidden;\n}\n\n.reveal pre[data-auto-animate-target] code {\n  overflow: hidden;\n}\n\n/* add a min width to avoid horizontal shift on line numbers */\ncode.hljs .hljs-ln-line.hljs-ln-n {\n  min-width: 1.25em;\n}\n\n/* tables */\ntable {\n  border-collapse: collapse;\n  border-spacing: 0\n}\n\ntable {\n  margin-bottom: 1.25em;\n  border: solid 1px #dedede\n}\n\ntable thead tr th, table thead tr td, table tfoot tr th, table tfoot tr td {\n  padding: .5em .625em .625em;\n  font-size: inherit;\n  text-align: left\n}\n\ntable tr th, table tr td {\n  padding: .5625em .625em;\n  font-size: inherit\n}\n\ntable thead tr th, table tfoot tr th, table tbody tr td, table tr td, table tfoot tr td {\n  display: table-cell;\n  line-height: 1.6\n}\n\ntd.tableblock > .content {\n  margin-bottom: 1.25em\n}\n\ntd.tableblock > .content > :last-child {\n  margin-bottom: -1.25em\n}\n\ntable.tableblock, th.tableblock, td.tableblock {\n  border: 0 solid #dedede\n}\n\ntable.grid-all > thead > tr > .tableblock, table.grid-all > tbody > tr > .tableblock {\n  border-width: 0 1px 1px 0\n}\n\ntable.grid-all > tfoot > tr > .tableblock {\n  border-width: 1px 1px 0 0\n}\n\ntable.grid-cols > * > tr > .tableblock {\n  border-width: 0 1px 0 0\n}\n\ntable.grid-rows > thead > tr > .tableblock, table.grid-rows > tbody > tr > .tableblock {\n  border-width: 0 0 1px\n}\n\ntable.grid-rows > tfoot > tr > .tableblock {\n  border-width: 1px 0 0\n}\n\ntable.grid-all > * > tr > .tableblock:last-child, table.grid-cols > * > tr > .tableblock:last-child {\n  border-right-width: 0\n}\n\ntable.grid-all > tbody > tr:last-child > .tableblock, table.grid-all > thead:last-child > tr > .tableblock, table.grid-rows > tbody > tr:last-child > .tableblock, table.grid-rows > thead:last-child > tr > .tableblock {\n  border-bottom-width: 0\n}\n\ntable.frame-all {\n  border-width: 1px\n}\n\ntable.frame-sides {\n  border-width: 0 1px\n}\n\ntable.frame-topbot, table.frame-ends {\n  border-width: 1px 0\n}\n\n.reveal table th.halign-left, .reveal table td.halign-left {\n  text-align: left\n}\n\n.reveal table th.halign-right, .reveal table td.halign-right {\n  text-align: right\n}\n\n.reveal table th.halign-center, .reveal table td.halign-center {\n  text-align: center\n}\n\n.reveal table th.valign-top, .reveal table td.valign-top {\n  vertical-align: top\n}\n\n.reveal table th.valign-bottom, .reveal table td.valign-bottom {\n  vertical-align: bottom\n}\n\n.reveal table th.valign-middle, .reveal table td.valign-middle {\n  vertical-align: middle\n}\n\ntable thead th, table tfoot th {\n  font-weight: bold\n}\n\ntbody tr th {\n  display: table-cell;\n  line-height: 1.6\n}\n\ntbody tr th, tbody tr th p, tfoot tr th, tfoot tr th p {\n  font-weight: bold\n}\n\nthead {\n  display: table-header-group\n}\n\n.reveal table.grid-none th, .reveal table.grid-none td {\n  border-bottom: 0 !important\n}\n\n/* kbd macro */\nkbd {\n  font-family: \"Droid Sans Mono\", \"DejaVu Sans Mono\", monospace;\n  display: inline-block;\n  color: rgba(0, 0, 0, .8);\n  font-size: .65em;\n  line-height: 1.45;\n  background: #f7f7f7;\n  border: 1px solid #ccc;\n  -webkit-border-radius: 3px;\n  border-radius: 3px;\n  -webkit-box-shadow: 0 1px 0 rgba(0, 0, 0, .2), 0 0 0 .1em white inset;\n  box-shadow: 0 1px 0 rgba(0, 0, 0, .2), 0 0 0 .1em #fff inset;\n  margin: 0 .15em;\n  padding: .2em .5em;\n  vertical-align: middle;\n  position: relative;\n  top: -.1em;\n  white-space: nowrap\n}\n\n.keyseq kbd:first-child {\n  margin-left: 0\n}\n\n.keyseq kbd:last-child {\n  margin-right: 0\n}\n\n/* callouts */\n.conum[data-value] {\n  display: inline-block;\n  color: #fff !important;\n  background: rgba(0, 0, 0, .8);\n  -webkit-border-radius: 50%;\n  border-radius: 50%;\n  text-align: center;\n  font-size: .75em;\n  width: 1.67em;\n  height: 1.67em;\n  line-height: 1.67em;\n  font-family: \"Open Sans\", \"DejaVu Sans\", sans-serif;\n  font-style: normal;\n  font-weight: bold\n}\n\n.conum[data-value] * {\n  color: #fff !important\n}\n\n.conum[data-value] + b {\n  display: none\n}\n\n.conum[data-value]:after {\n  content: attr(data-value)\n}\n\npre .conum[data-value] {\n  position: relative;\n  top: -.125em\n}\n\nb.conum * {\n  color: inherit !important\n}\n\n.conum:not([data-value]):empty {\n  display: none\n}\n\n/* Callout list */\n.hdlist > table, .colist > table {\n  border: 0;\n  background: none\n}\n\n.hdlist > table > tbody > tr, .colist > table > tbody > tr {\n  background: none\n}\n\ntd.hdlist1, td.hdlist2 {\n  vertical-align: top;\n  padding: 0 .625em\n}\n\ntd.hdlist1 {\n  font-weight: bold;\n  padding-bottom: 1.25em\n}\n\n/* Disabled from Asciidoctor CSS because it caused callout list to go under the\n * source listing when .stretch is applied (see #335)\n * .literalblock+.colist,.listingblock+.colist{margin-top:-.5em} */\n.colist td:not([class]):first-child {\n  padding: .4em .75em 0;\n  line-height: 1;\n  vertical-align: top\n}\n\n.colist td:not([class]):first-child img {\n  max-width: none\n}\n\n.colist td:not([class]):last-child {\n  padding: .25em 0\n}\n\n/* Override Asciidoctor CSS that causes issues with reveal.js features */\n.reveal .hljs table {\n  border: 0\n}\n\n/* Callout list rows would have a bottom border with some reveal.js themes (see #335) */\n.reveal .colist > table th, .reveal .colist > table td {\n  border-bottom: 0\n}\n\n/* Fixes line height with Highlight.js source listing when linenums enabled (see #331) */\n.reveal .hljs table thead tr th, .reveal .hljs table tfoot tr th, .reveal .hljs table tbody tr td, .reveal .hljs table tr td, .reveal .hljs table tfoot tr td {\n  line-height: inherit\n}\n\n/* Columns layout */\n.columns .slide-content {\n  display: flex;\n}\n\n.columns.wrap .slide-content {\n  flex-wrap: wrap;\n}\n\n.columns.is-vcentered .slide-content {\n  align-items: center;\n}\n\n.columns .slide-content > .column {\n  display: block;\n  flex-basis: 0;\n  flex-grow: 1;\n  flex-shrink: 1;\n}\n\n.columns .slide-content > .column > * {\n  padding: .75rem;\n}\n\n/* See #353 */\n.columns.wrap .slide-content > .column {\n  flex-basis: auto;\n}\n\n.columns .slide-content > .column.is-full {\n  flex: none;\n  width: 100%;\n}\n\n.columns .slide-content > .column.is-four-fifths {\n  flex: none;\n  width: 80%;\n}\n\n.columns .slide-content > .column.is-three-quarters {\n  flex: none;\n  width: 75%;\n}\n\n.columns .slide-content > .column.is-two-thirds {\n  flex: none;\n  width: 66.6666%;\n}\n\n.columns .slide-content > .column.is-three-fifths {\n  flex: none;\n  width: 60%;\n}\n\n.columns .slide-content > .column.is-half {\n  flex: none;\n  width: 50%;\n}\n\n.columns .slide-content > .column.is-two-fifths {\n  flex: none;\n  width: 40%;\n}\n\n.columns .slide-content > .column.is-one-third {\n  flex: none;\n  width: 33.3333%;\n}\n\n.columns .slide-content > .column.is-one-quarter {\n  flex: none;\n  width: 25%;\n}\n\n.columns .slide-content > .column.is-one-fifth {\n  flex: none;\n  width: 20%;\n}\n\n.columns .slide-content > .column.has-text-left {\n  text-align: left;\n}\n\n.columns .slide-content > .column.has-text-justified {\n  text-align: justify;\n}\n\n.columns .slide-content > .column.has-text-right {\n  text-align: right;\n}\n\n.columns .slide-content > .column.has-text-left {\n  text-align: left;\n}\n\n.columns .slide-content > .column.has-text-justified {\n  text-align: justify;\n}\n\n.columns .slide-content > .column.has-text-right {\n  text-align: right;\n}\n\n.text-left {\n  text-align: left !important\n}\n\n.text-right {\n  text-align: right !important\n}\n\n.text-center {\n  text-align: center !important\n}\n\n.text-justify {\n  text-align: justify !important\n}\n\n.footnotes {\n  border-top: 1px solid rgba(0, 0, 0, 0.2);\n  padding: 0.5em 0 0 0;\n  font-size: 0.65em;\n  margin-top: 4em;\n}\n\n.byline {\n  font-size:.8em\n}\nul.byline {\n  list-style-type: none;\n}\nul.byline li + li {\n  margin-top: 0.25em;\n}\n</style>");
        if ($truthy(self['$attr?']("icons", "font"))) {
          if ($truthy(self['$attr?']("iconfont-remote"))) {
            if ($truthy((iconfont_cdn = self.$attr("iconfont-cdn")))) {
              
              _buf['$<<']("<link rel=\"stylesheet\"");
              _slim_codeattributes20 = iconfont_cdn;
              if ($truthy(_slim_codeattributes20)) {
                if ($eqeq(_slim_codeattributes20, true)) {
                  _buf['$<<'](" href")
                } else {
                  
                  _buf['$<<'](" href=\"");
                  _buf['$<<'](_slim_codeattributes20);
                  _buf['$<<']("\"");
                }
              };
              _buf['$<<'](">");
            } else {
              
              font_awesome_version = self.$attr("font-awesome-version", "5.15.1");
              _buf['$<<']("<link rel=\"stylesheet\"");
              _slim_codeattributes21 = "" + (cdn_base) + "/font-awesome/" + (font_awesome_version) + "/css/all.min.css";
              if ($truthy(_slim_codeattributes21)) {
                if ($eqeq(_slim_codeattributes21, true)) {
                  _buf['$<<'](" href")
                } else {
                  
                  _buf['$<<'](" href=\"");
                  _buf['$<<'](_slim_codeattributes21);
                  _buf['$<<']("\"");
                }
              };
              _buf['$<<']("><link rel=\"stylesheet\"");
              _slim_codeattributes22 = "" + (cdn_base) + "/font-awesome/" + (font_awesome_version) + "/css/v4-shims.min.css";
              if ($truthy(_slim_codeattributes22)) {
                if ($eqeq(_slim_codeattributes22, true)) {
                  _buf['$<<'](" href")
                } else {
                  
                  _buf['$<<'](" href=\"");
                  _buf['$<<'](_slim_codeattributes22);
                  _buf['$<<']("\"");
                }
              };
              _buf['$<<'](">");
            }
          } else {
            
            _buf['$<<']("<link rel=\"stylesheet\"");
            _slim_codeattributes23 = self.$normalize_web_path("" + (self.$attr("iconfont-name", "font-awesome")) + ".css", self.$attr("stylesdir", ""), false);
            if ($truthy(_slim_codeattributes23)) {
              if ($eqeq(_slim_codeattributes23, true)) {
                _buf['$<<'](" href")
              } else {
                
                _buf['$<<'](" href=\"");
                _buf['$<<'](_slim_codeattributes23);
                _buf['$<<']("\"");
              }
            };
            _buf['$<<'](">");
          }
        };
        _buf['$<<'](self.$generate_stem(cdn_base));
        syntax_hl = self.$syntax_highlighter();
        if (($truthy(syntax_hl) && ($truthy(syntax_hl['$docinfo?']("head"))))) {
          _buf['$<<'](syntax_hl.$docinfo("head", self, $hash2(["cdn_base_url", "linkcss", "self_closing_tag_slash"], {"cdn_base_url": cdn_base, "linkcss": linkcss, "self_closing_tag_slash": "/"})))
        };
        if ($truthy(self['$attr?']("customcss"))) {
          
          _buf['$<<']("<link rel=\"stylesheet\"");
          _slim_codeattributes24 = ($truthy((customcss = self.$attr("customcss"))['$empty?']()) ? ("asciidoctor-revealjs.css") : (customcss));
          if ($truthy(_slim_codeattributes24)) {
            if ($eqeq(_slim_codeattributes24, true)) {
              _buf['$<<'](" href")
            } else {
              
              _buf['$<<'](" href=\"");
              _buf['$<<'](_slim_codeattributes24);
              _buf['$<<']("\"");
            }
          };
          _buf['$<<'](">");
        };
        if (!$truthy((_docinfo = self.$docinfo("head", "-revealjs.html"))['$empty?']())) {
          _buf['$<<'](_docinfo)
        };
        _buf['$<<']("</head><body><div class=\"reveal\"><div class=\"slides\">");
        self.$yield_content("slides");
        _buf['$<<']("</div></div><script src=\"");
        _buf['$<<'](revealjsdir);
        _buf['$<<']("/dist/reveal.js\"></script><script>Array.prototype.slice.call(document.querySelectorAll('.slides section')).forEach(function(slide) {\n  if (slide.getAttribute('data-background-color')) return;\n  // user needs to explicitly say he wants CSS color to override otherwise we might break custom css or theme (#226)\n  if (!(slide.classList.contains('canvas') || slide.classList.contains('background'))) return;\n  var bgColor = getComputedStyle(slide).backgroundColor;\n  if (bgColor !== 'rgba(0, 0, 0, 0)' && bgColor !== 'transparent') {\n    slide.setAttribute('data-background-color', bgColor);\n    slide.style.backgroundColor = 'transparent';\n  }\n});\n\n// More info about config & dependencies:\n// - https://github.com/hakimel/reveal.js#configuration\n// - https://github.com/hakimel/reveal.js#dependencies\nReveal.initialize({\n  // Display presentation control arrows\n  controls: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_controls", true)));
        _buf['$<<'](",\n  // Help the user learn the controls by providing hints, for example by\n  // bouncing the down arrow when they first encounter a vertical slide\n  controlsTutorial: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_controlstutorial", true)));
        _buf['$<<'](",\n  // Determines where controls appear, \"edges\" or \"bottom-right\"\n  controlsLayout: '");
        _buf['$<<'](self.$attr("revealjs_controlslayout", "bottom-right"));
        _buf['$<<']("',\n  // Visibility rule for backwards navigation arrows; \"faded\", \"hidden\"\n  // or \"visible\"\n  controlsBackArrows: '");
        _buf['$<<'](self.$attr("revealjs_controlsbackarrows", "faded"));
        _buf['$<<']("',\n  // Display a presentation progress bar\n  progress: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_progress", true)));
        _buf['$<<'](",\n  // Display the page number of the current slide\n  slideNumber: ");
        _buf['$<<'](self.$to_valid_slidenumber(self.$attr("revealjs_slidenumber", false)));
        _buf['$<<'](",\n  // Control which views the slide number displays on\n  showSlideNumber: '");
        _buf['$<<'](self.$attr("revealjs_showslidenumber", "all"));
        _buf['$<<']("',\n  // Add the current slide number to the URL hash so that reloading the\n  // page/copying the URL will return you to the same slide\n  hash: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_hash", false)));
        _buf['$<<'](",\n  // Push each slide change to the browser history. Implies `hash: true`\n  history: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_history", false)));
        _buf['$<<'](",\n  // Enable keyboard shortcuts for navigation\n  keyboard: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_keyboard", true)));
        _buf['$<<'](",\n  // Enable the slide overview mode\n  overview: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_overview", true)));
        _buf['$<<'](",\n  // Disables the default reveal.js slide layout so that you can use custom CSS layout\n  disableLayout: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_disablelayout", false)));
        _buf['$<<'](",\n  // Vertical centering of slides\n  center: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_center", true)));
        _buf['$<<'](",\n  // Enables touch navigation on devices with touch input\n  touch: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_touch", true)));
        _buf['$<<'](",\n  // Loop the presentation\n  loop: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_loop", false)));
        _buf['$<<'](",\n  // Change the presentation direction to be RTL\n  rtl: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_rtl", false)));
        _buf['$<<'](",\n  // See https://github.com/hakimel/reveal.js/#navigation-mode\n  navigationMode: '");
        _buf['$<<'](self.$attr("revealjs_navigationmode", "default"));
        _buf['$<<']("',\n  // Randomizes the order of slides each time the presentation loads\n  shuffle: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_shuffle", false)));
        _buf['$<<'](",\n  // Turns fragments on and off globally\n  fragments: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_fragments", true)));
        _buf['$<<'](",\n  // Flags whether to include the current fragment in the URL,\n  // so that reloading brings you to the same fragment position\n  fragmentInURL: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_fragmentinurl", false)));
        _buf['$<<'](",\n  // Flags if the presentation is running in an embedded mode,\n  // i.e. contained within a limited portion of the screen\n  embedded: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_embedded", false)));
        _buf['$<<'](",\n  // Flags if we should show a help overlay when the questionmark\n  // key is pressed\n  help: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_help", true)));
        _buf['$<<'](",\n  // Flags if speaker notes should be visible to all viewers\n  showNotes: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_shownotes", false)));
        _buf['$<<'](",\n  // Global override for autolaying embedded media (video/audio/iframe)\n  // - null: Media will only autoplay if data-autoplay is present\n  // - true: All media will autoplay, regardless of individual setting\n  // - false: No media will autoplay, regardless of individual setting\n  autoPlayMedia: ");
        _buf['$<<'](self.$attr("revealjs_autoplaymedia", "null"));
        _buf['$<<'](",\n  // Global override for preloading lazy-loaded iframes\n  // - null: Iframes with data-src AND data-preload will be loaded when within\n  //   the viewDistance, iframes with only data-src will be loaded when visible\n  // - true: All iframes with data-src will be loaded when within the viewDistance\n  // - false: All iframes with data-src will be loaded only when visible\n  preloadIframes: ");
        _buf['$<<'](self.$attr("revealjs_preloadiframes", "null"));
        _buf['$<<'](",\n  // Number of milliseconds between automatically proceeding to the\n  // next slide, disabled when set to 0, this value can be overwritten\n  // by using a data-autoslide attribute on your slides\n  autoSlide: ");
        _buf['$<<'](self.$attr("revealjs_autoslide", 0));
        _buf['$<<'](",\n  // Stop auto-sliding after user input\n  autoSlideStoppable: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_autoslidestoppable", true)));
        _buf['$<<'](",\n  // Use this method for navigation when auto-sliding\n  autoSlideMethod: ");
        _buf['$<<'](self.$attr("revealjs_autoslidemethod", "Reveal.navigateNext"));
        _buf['$<<'](",\n  // Specify the average time in seconds that you think you will spend\n  // presenting each slide. This is used to show a pacing timer in the\n  // speaker view\n  defaultTiming: ");
        _buf['$<<'](self.$attr("revealjs_defaulttiming", 120));
        _buf['$<<'](",\n  // Specify the total time in seconds that is available to\n  // present.  If this is set to a nonzero value, the pacing\n  // timer will work out the time available for each slide,\n  // instead of using the defaultTiming value\n  totalTime: ");
        _buf['$<<'](self.$attr("revealjs_totaltime", 0));
        _buf['$<<'](",\n  // Specify the minimum amount of time you want to allot to\n  // each slide, if using the totalTime calculation method.  If\n  // the automated time allocation causes slide pacing to fall\n  // below this threshold, then you will see an alert in the\n  // speaker notes window\n  minimumTimePerSlide: ");
        _buf['$<<'](self.$attr("revealjs_minimumtimeperslide", 0));
        _buf['$<<'](",\n  // Enable slide navigation via mouse wheel\n  mouseWheel: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_mousewheel", false)));
        _buf['$<<'](",\n  // Hide cursor if inactive\n  hideInactiveCursor: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_hideinactivecursor", true)));
        _buf['$<<'](",\n  // Time before the cursor is hidden (in ms)\n  hideCursorTime: ");
        _buf['$<<'](self.$attr("revealjs_hidecursortime", 5000));
        _buf['$<<'](",\n  // Hides the address bar on mobile devices\n  hideAddressBar: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_hideaddressbar", true)));
        _buf['$<<'](",\n  // Opens links in an iframe preview overlay\n  // Add `data-preview-link` and `data-preview-link=\"false\"` to customise each link\n  // individually\n  previewLinks: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_previewlinks", false)));
        _buf['$<<'](",\n  // Transition style (e.g., none, fade, slide, convex, concave, zoom)\n  transition: '");
        _buf['$<<'](self.$attr("revealjs_transition", "slide"));
        _buf['$<<']("',\n  // Transition speed (e.g., default, fast, slow)\n  transitionSpeed: '");
        _buf['$<<'](self.$attr("revealjs_transitionspeed", "default"));
        _buf['$<<']("',\n  // Transition style for full page slide backgrounds (e.g., none, fade, slide, convex, concave, zoom)\n  backgroundTransition: '");
        _buf['$<<'](self.$attr("revealjs_backgroundtransition", "fade"));
        _buf['$<<']("',\n  // Number of slides away from the current that are visible\n  viewDistance: ");
        _buf['$<<'](self.$attr("revealjs_viewdistance", 3));
        _buf['$<<'](",\n  // Number of slides away from the current that are visible on mobile\n  // devices. It is advisable to set this to a lower number than\n  // viewDistance in order to save resources.\n  mobileViewDistance: ");
        _buf['$<<'](self.$attr("revealjs_mobileviewdistance", 3));
        _buf['$<<'](",\n  // Parallax background image (e.g., \"'https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg'\")\n  parallaxBackgroundImage: '");
        _buf['$<<'](self.$attr("revealjs_parallaxbackgroundimage", ""));
        _buf['$<<']("',\n  // Parallax background size in CSS syntax (e.g., \"2100px 900px\")\n  parallaxBackgroundSize: '");
        _buf['$<<'](self.$attr("revealjs_parallaxbackgroundsize", ""));
        _buf['$<<']("',\n  // Number of pixels to move the parallax background per slide\n  // - Calculated automatically unless specified\n  // - Set to 0 to disable movement along an axis\n  parallaxBackgroundHorizontal: ");
        _buf['$<<'](self.$attr("revealjs_parallaxbackgroundhorizontal", "null"));
        _buf['$<<'](",\n  parallaxBackgroundVertical: ");
        _buf['$<<'](self.$attr("revealjs_parallaxbackgroundvertical", "null"));
        _buf['$<<'](",\n  // The display mode that will be used to show slides\n  display: '");
        _buf['$<<'](self.$attr("revealjs_display", "block"));
        _buf['$<<']("',\n\n  // The \"normal\" size of the presentation, aspect ratio will be preserved\n  // when the presentation is scaled to fit different resolutions. Can be\n  // specified using percentage units.\n  width: ");
        _buf['$<<'](self.$attr("revealjs_width", 960));
        _buf['$<<'](",\n  height: ");
        _buf['$<<'](self.$attr("revealjs_height", 700));
        _buf['$<<'](",\n\n  // Factor of the display size that should remain empty around the content\n  margin: ");
        _buf['$<<'](self.$attr("revealjs_margin", 0.1));
        _buf['$<<'](",\n\n  // Bounds for smallest/largest possible scale to apply to content\n  minScale: ");
        _buf['$<<'](self.$attr("revealjs_minscale", 0.2));
        _buf['$<<'](",\n  maxScale: ");
        _buf['$<<'](self.$attr("revealjs_maxscale", 1.5));
        _buf['$<<'](",\n\n  // PDF Export Options\n  // Put each fragment on a separate page\n  pdfSeparateFragments: ");
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_pdfseparatefragments", true)));
        _buf['$<<'](",\n  // For slides that do not fit on a page, max number of pages\n  pdfMaxPagesPerSlide: ");
        _buf['$<<'](self.$attr("revealjs_pdfmaxpagesperslide", 1));
        _buf['$<<'](",\n\n  // Optional libraries used to extend on reveal.js\n  dependencies: [\n      ");
        _buf['$<<'](self.$revealjs_dependencies(self.$document(), self, revealjsdir));
        _buf['$<<']("\n  ],\n});</script><script>var dom = {};\ndom.slides = document.querySelector('.reveal .slides');\n\nfunction getRemainingHeight(element, slideElement, height) {\n  height = height || 0;\n  if (element) {\n    var newHeight, oldHeight = element.style.height;\n    // Change the .stretch element height to 0 in order find the height of all\n    // the other elements\n    element.style.height = '0px';\n    // In Overview mode, the parent (.slide) height is set of 700px.\n    // Restore it temporarily to its natural height.\n    slideElement.style.height = 'auto';\n    newHeight = height - slideElement.offsetHeight;\n    // Restore the old height, just in case\n    element.style.height = oldHeight + 'px';\n    // Clear the parent (.slide) height. .removeProperty works in IE9+\n    slideElement.style.removeProperty('height');\n    return newHeight;\n  }\n  return height;\n}\n\nfunction layoutSlideContents(width, height) {\n  // Handle sizing of elements with the 'stretch' class\n  toArray(dom.slides.querySelectorAll('section .stretch')).forEach(function (element) {\n    // Determine how much vertical space we can use\n    var limit = 5; // hard limit\n    var parent = element.parentNode;\n    while (parent.nodeName !== 'SECTION' && limit > 0) {\n      parent = parent.parentNode;\n      limit--;\n    }\n    if (limit === 0) {\n      // unable to find parent, aborting!\n      return;\n    }\n    var remainingHeight = getRemainingHeight(element, parent, height);\n    // Consider the aspect ratio of media elements\n    if (/(img|video)/gi.test(element.nodeName)) {\n      var nw = element.naturalWidth || element.videoWidth, nh = element.naturalHeight || element.videoHeight;\n      var es = Math.min(width / nw, remainingHeight / nh);\n      element.style.width = (nw * es) + 'px';\n      element.style.height = (nh * es) + 'px';\n    } else {\n      element.style.width = width + 'px';\n      element.style.height = remainingHeight + 'px';\n    }\n  });\n}\n\nfunction toArray(o) {\n  return Array.prototype.slice.call(o);\n}\n\nReveal.addEventListener('slidechanged', function () {\n  layoutSlideContents(");
        _buf['$<<'](self.$attr("revealjs_width", 960));
        _buf['$<<'](", ");
        _buf['$<<'](self.$attr("revealjs_height", 700));
        _buf['$<<'](")\n});\nReveal.addEventListener('ready', function () {\n  layoutSlideContents(");
        _buf['$<<'](self.$attr("revealjs_width", 960));
        _buf['$<<'](", ");
        _buf['$<<'](self.$attr("revealjs_height", 700));
        _buf['$<<'](")\n});\nReveal.addEventListener('resize', function () {\n  layoutSlideContents(");
        _buf['$<<'](self.$attr("revealjs_width", 960));
        _buf['$<<'](", ");
        _buf['$<<'](self.$attr("revealjs_height", 700));
        _buf['$<<'](")\n});</script>");
        if (($truthy(syntax_hl) && ($truthy(syntax_hl['$docinfo?']("footer"))))) {
          _buf['$<<'](syntax_hl.$docinfo("footer", self, $hash2(["cdn_base_url", "linkcss", "self_closing_tag_slash"], {"cdn_base_url": cdn_base, "linkcss": linkcss, "self_closing_tag_slash": "/"})))
        };
        if (!$truthy((docinfo_content = self.$docinfo("footer", ".html"))['$empty?']())) {
          _buf['$<<'](docinfo_content)
        };
        _buf['$<<']("</body></html>");
        return (_buf = _buf.$join(""));}, {$$s: self});
    }, -2);
    
    $def(self, '$convert_floating_title', function $$convert_floating_title(node, opts) {
      var self = this;

      
      if (opts == null) opts = $hash2([], {});
      node.$extend($$('Helpers'));
      return $send(node, 'instance_eval', [], function $$54(){var self = $$54.$$s == null ? this : $$54.$$s, _buf = nil, _slim_htag_filter1 = nil, _slim_codeattributes1 = nil, _temple_html_attributeremover1 = nil, _slim_codeattributes2 = nil;

        
        if (!$truthy(opts['$empty?']())) {
          self.$converter().$set_local_variables(Opal.Binding.$new(  function($code) {    return eval($code);  },  ["node", "opts"],  self,  ['asciidoctor-revealjs/converter.rb', 1175]), opts)
        };
        _buf = [];
        _slim_htag_filter1 = $rb_plus(self.$level(), 1).$to_s();
        _buf['$<<']("<h");
        _buf['$<<'](_slim_htag_filter1);
        _slim_codeattributes1 = self.$id();
        if ($truthy(_slim_codeattributes1)) {
          if ($eqeq(_slim_codeattributes1, true)) {
            _buf['$<<'](" id")
          } else {
            
            _buf['$<<'](" id=\"");
            _buf['$<<'](_slim_codeattributes1);
            _buf['$<<']("\"");
          }
        };
        _temple_html_attributeremover1 = [];
        _slim_codeattributes2 = [self.$style(), self.$role()];
        if ($eqeqeq($$('Array'), _slim_codeattributes2)) {
          
          _slim_codeattributes2 = _slim_codeattributes2.$flatten();
          $send(_slim_codeattributes2, 'map!', [], "to_s".$to_proc());
          $send(_slim_codeattributes2, 'reject!', [], "empty?".$to_proc());
          _temple_html_attributeremover1['$<<'](_slim_codeattributes2.$join(" "));
        } else {
          _temple_html_attributeremover1['$<<'](_slim_codeattributes2)
        };
        _temple_html_attributeremover1 = _temple_html_attributeremover1.$join("");
        if ($not(_temple_html_attributeremover1['$empty?']())) {
          
          _buf['$<<'](" class=\"");
          _buf['$<<'](_temple_html_attributeremover1);
          _buf['$<<']("\"");
        };
        _buf['$<<'](">");
        _buf['$<<'](self.$title());
        _buf['$<<']("</h");
        _buf['$<<'](_slim_htag_filter1);
        _buf['$<<'](">");
        return (_buf = _buf.$join(""));}, {$$s: self});
    }, -2);
    
    $def(self, '$convert_page_break', function $$convert_page_break(node, opts) {
      var self = this;

      
      if (opts == null) opts = $hash2([], {});
      node.$extend($$('Helpers'));
      return $send(node, 'instance_eval', [], function $$55(){var self = $$55.$$s == null ? this : $$55.$$s, _buf = nil;

        
        if (!$truthy(opts['$empty?']())) {
          self.$converter().$set_local_variables(Opal.Binding.$new(  function($code) {    return eval($code);  },  ["node", "opts"],  self,  ['asciidoctor-revealjs/converter.rb', 1185]), opts)
        };
        _buf = [];
        _buf['$<<']("<div style=\"page-break-after: always;\"></div>");
        return (_buf = _buf.$join(""));}, {$$s: self});
    }, -2);
    
    $def(self, '$convert_inline_callout', function $$convert_inline_callout(node, opts) {
      var self = this;

      
      if (opts == null) opts = $hash2([], {});
      node.$extend($$('Helpers'));
      return $send(node, 'instance_eval', [], function $$56(){var self = $$56.$$s == null ? this : $$56.$$s, _buf = nil, _slim_codeattributes1 = nil, _slim_codeattributes2 = nil, _slim_codeattributes3 = nil;
        if (self.document == null) self.document = nil;
        if (self.text == null) self.text = nil;

        
        if (!$truthy(opts['$empty?']())) {
          self.$converter().$set_local_variables(Opal.Binding.$new(  function($code) {    return eval($code);  },  ["node", "opts"],  self,  ['asciidoctor-revealjs/converter.rb', 1194]), opts)
        };
        _buf = [];
        if ($truthy(self.document['$attr?']("icons", "font"))) {
          
          _buf['$<<']("<i class=\"conum\"");
          _slim_codeattributes1 = self.text;
          if ($truthy(_slim_codeattributes1)) {
            if ($eqeq(_slim_codeattributes1, true)) {
              _buf['$<<'](" data-value")
            } else {
              
              _buf['$<<'](" data-value=\"");
              _buf['$<<'](_slim_codeattributes1);
              _buf['$<<']("\"");
            }
          };
          _buf['$<<']("></i><b>");
          _buf['$<<']("(" + (self.text) + ")");
          _buf['$<<']("</b>");
        } else if ($truthy(self.document['$attr?']("icons"))) {
          
          _buf['$<<']("<img");
          _slim_codeattributes2 = self.$icon_uri("callouts/" + (self.text));
          if ($truthy(_slim_codeattributes2)) {
            if ($eqeq(_slim_codeattributes2, true)) {
              _buf['$<<'](" src")
            } else {
              
              _buf['$<<'](" src=\"");
              _buf['$<<'](_slim_codeattributes2);
              _buf['$<<']("\"");
            }
          };
          _slim_codeattributes3 = self.text;
          if ($truthy(_slim_codeattributes3)) {
            if ($eqeq(_slim_codeattributes3, true)) {
              _buf['$<<'](" alt")
            } else {
              
              _buf['$<<'](" alt=\"");
              _buf['$<<'](_slim_codeattributes3);
              _buf['$<<']("\"");
            }
          };
          _buf['$<<'](">");
        } else {
          
          _buf['$<<']("<b>");
          _buf['$<<']("(" + (self.text) + ")");
          _buf['$<<']("</b>");
        };
        return (_buf = _buf.$join(""));}, {$$s: self});
    }, -2);
    
    $def(self, '$convert_pass', function $$convert_pass(node, opts) {
      var self = this;

      
      if (opts == null) opts = $hash2([], {});
      node.$extend($$('Helpers'));
      return $send(node, 'instance_eval', [], function $$57(){var self = $$57.$$s == null ? this : $$57.$$s, _buf = nil;

        
        if (!$truthy(opts['$empty?']())) {
          self.$converter().$set_local_variables(Opal.Binding.$new(  function($code) {    return eval($code);  },  ["node", "opts"],  self,  ['asciidoctor-revealjs/converter.rb', 1209]), opts)
        };
        _buf = [];
        _buf['$<<'](self.$content());
        return (_buf = _buf.$join(""));}, {$$s: self});
    }, -2);
    
    $def(self, '$convert_embedded', function $$convert_embedded(node, opts) {
      var self = this;

      
      if (opts == null) opts = $hash2([], {});
      node.$extend($$('Helpers'));
      return $send(node, 'instance_eval', [], function $$58(){var self = $$58.$$s == null ? this : $$58.$$s, _buf = nil, _slim_codeattributes1 = nil;
        if (self.id == null) self.id = nil;
        if (self.header == null) self.header = nil;

        
        if (!$truthy(opts['$empty?']())) {
          self.$converter().$set_local_variables(Opal.Binding.$new(  function($code) {    return eval($code);  },  ["node", "opts"],  self,  ['asciidoctor-revealjs/converter.rb', 1218]), opts)
        };
        _buf = [];
        if (!($truthy(self.$notitle()) || ($not(self['$has_header?']())))) {
          
          _buf['$<<']("<h1");
          _slim_codeattributes1 = self.id;
          if ($truthy(_slim_codeattributes1)) {
            if ($eqeq(_slim_codeattributes1, true)) {
              _buf['$<<'](" id")
            } else {
              
              _buf['$<<'](" id=\"");
              _buf['$<<'](_slim_codeattributes1);
              _buf['$<<']("\"");
            }
          };
          _buf['$<<'](">");
          _buf['$<<'](self.header.$title());
          _buf['$<<']("</h1>");
        };
        _buf['$<<'](self.$content());
        if (!($not(self['$footnotes?']()) || ($truthy(self['$attr?']("nofootnotes"))))) {
          
          _buf['$<<']("<div id=\"footnotes\"><hr>");
          $send(self.$footnotes(), 'each', [], function $$59(fn){
            
            if (fn == null) fn = nil;
            _buf['$<<']("<div class=\"footnote\" id=\"_footnote_");
            _buf['$<<'](fn.$index());
            _buf['$<<']("\"><a href=\"#_footnoteref_");
            _buf['$<<'](fn.$index());
            _buf['$<<']("\">");
            _buf['$<<'](fn.$index());
            _buf['$<<']("</a>. ");
            _buf['$<<'](fn.$text());
            return _buf['$<<']("</div>");});
          _buf['$<<']("</div>");
        };
        return (_buf = _buf.$join(""));}, {$$s: self});
    }, -2);
    
    $def(self, '$convert_listing', function $$convert_listing(node, opts) {
      var self = this;

      
      if (opts == null) opts = $hash2([], {});
      node.$extend($$('Helpers'));
      return $send(node, 'instance_eval', [], function $$60(){var self = $$60.$$s == null ? this : $$60.$$s, _buf = nil, nowrap = nil, $ret_or_1 = nil, syntax_hl = nil, lang = nil, doc_attrs = nil, css_mode = nil, style = nil, _slim_controls1 = nil;
        if (self.style == null) self.style = nil;
        if (self.attributes == null) self.attributes = nil;

        
        if (!$truthy(opts['$empty?']())) {
          self.$converter().$set_local_variables(Opal.Binding.$new(  function($code) {    return eval($code);  },  ["node", "opts"],  self,  ['asciidoctor-revealjs/converter.rb', 1235]), opts)
        };
        _buf = [];
        nowrap = ($truthy(($ret_or_1 = self['$option?']("nowrap"))) ? ($ret_or_1) : (self.$document()['$attr?']("prewrap")['$!']()));
        if ($eqeq(self.style, "source")) {
          
          syntax_hl = self.$document().$syntax_highlighter();
          lang = self.$attr("language");
          if ($truthy(syntax_hl)) {
            
            doc_attrs = self.$document().$attributes();
            css_mode = ($truthy(($ret_or_1 = doc_attrs['$[]']("" + (syntax_hl.$name()) + "-css"))) ? ($ret_or_1) : ("class")).$to_sym();
            style = doc_attrs['$[]']("" + (syntax_hl.$name()) + "-style");
            opts = ($truthy(syntax_hl['$highlight?']()) ? ($hash2(["css_mode", "style"], {"css_mode": css_mode, "style": style})) : ($hash2([], {})));
            opts['$[]=']("nowrap", nowrap);
          };
        };
        _slim_controls1 = $send(self, 'html_tag', ["div", $hash2(["id", "class"], {"id": self.$id(), "class": ["listingblock", self.$role(), (($truthy(self['$option?']("step")) || ($truthy(self['$attr?']("step")))) ? ("fragment") : nil)]}).$merge(self.$data_attrs($send(self.attributes, 'reject', [], function $$61(key, _){
          
          if (key == null) key = nil;
          if (_ == null) _ = nil;
          return key['$==']("data-id");})))], function $$62(){var self = $$62.$$s == null ? this : $$62.$$s, _slim_controls2 = nil, _temple_html_attributeremover1 = nil, _slim_codeattributes1 = nil, _temple_html_attributeremover2 = nil, _slim_codeattributes2 = nil, _slim_codeattributes3 = nil, _temple_html_attributeremover3 = nil, _slim_codeattributes4 = nil;
          if (self.style == null) self.style = nil;

          
          _slim_controls2 = [];
          if ($truthy(self['$title?']())) {
            
            _slim_controls2['$<<']("<div class=\"title\">");
            _slim_controls2['$<<'](self.$captioned_title());
            _slim_controls2['$<<']("</div>");
          };
          _slim_controls2['$<<']("<div class=\"content\">");
          if ($truthy(syntax_hl)) {
            _slim_controls2['$<<'](syntax_hl.$format(self, lang, opts))
          } else if ($eqeq(self.style, "source")) {
            
            _slim_controls2['$<<']("<pre");
            _temple_html_attributeremover1 = [];
            _slim_codeattributes1 = ["highlight", ($truthy(nowrap) ? ("nowrap") : nil)];
            if ($eqeqeq($$('Array'), _slim_codeattributes1)) {
              
              _slim_codeattributes1 = _slim_codeattributes1.$flatten();
              $send(_slim_codeattributes1, 'map!', [], "to_s".$to_proc());
              $send(_slim_codeattributes1, 'reject!', [], "empty?".$to_proc());
              _temple_html_attributeremover1['$<<'](_slim_codeattributes1.$join(" "));
            } else {
              _temple_html_attributeremover1['$<<'](_slim_codeattributes1)
            };
            _temple_html_attributeremover1 = _temple_html_attributeremover1.$join("");
            if ($not(_temple_html_attributeremover1['$empty?']())) {
              
              _slim_controls2['$<<'](" class=\"");
              _slim_controls2['$<<'](_temple_html_attributeremover1);
              _slim_controls2['$<<']("\"");
            };
            _slim_controls2['$<<']("><code");
            _temple_html_attributeremover2 = [];
            _slim_codeattributes2 = [($truthy(lang) ? ("language-" + (lang)) : nil)];
            if ($eqeqeq($$('Array'), _slim_codeattributes2)) {
              
              _slim_codeattributes2 = _slim_codeattributes2.$flatten();
              $send(_slim_codeattributes2, 'map!', [], "to_s".$to_proc());
              $send(_slim_codeattributes2, 'reject!', [], "empty?".$to_proc());
              _temple_html_attributeremover2['$<<'](_slim_codeattributes2.$join(" "));
            } else {
              _temple_html_attributeremover2['$<<'](_slim_codeattributes2)
            };
            _temple_html_attributeremover2 = _temple_html_attributeremover2.$join("");
            if ($not(_temple_html_attributeremover2['$empty?']())) {
              
              _slim_controls2['$<<'](" class=\"");
              _slim_controls2['$<<'](_temple_html_attributeremover2);
              _slim_controls2['$<<']("\"");
            };
            _slim_codeattributes3 = ($truthy(lang) ? ("" + (lang)) : nil);
            if ($truthy(_slim_codeattributes3)) {
              if ($eqeq(_slim_codeattributes3, true)) {
                _slim_controls2['$<<'](" data-lang")
              } else {
                
                _slim_controls2['$<<'](" data-lang=\"");
                _slim_controls2['$<<'](_slim_codeattributes3);
                _slim_controls2['$<<']("\"");
              }
            };
            _slim_controls2['$<<'](">");
            _slim_controls2['$<<'](($truthy(($ret_or_1 = self.$content())) ? ($ret_or_1) : ("")));
            _slim_controls2['$<<']("</code></pre>");
          } else {
            
            _slim_controls2['$<<']("<pre");
            _temple_html_attributeremover3 = [];
            _slim_codeattributes4 = [($truthy(nowrap) ? ("nowrap") : nil)];
            if ($eqeqeq($$('Array'), _slim_codeattributes4)) {
              
              _slim_codeattributes4 = _slim_codeattributes4.$flatten();
              $send(_slim_codeattributes4, 'map!', [], "to_s".$to_proc());
              $send(_slim_codeattributes4, 'reject!', [], "empty?".$to_proc());
              _temple_html_attributeremover3['$<<'](_slim_codeattributes4.$join(" "));
            } else {
              _temple_html_attributeremover3['$<<'](_slim_codeattributes4)
            };
            _temple_html_attributeremover3 = _temple_html_attributeremover3.$join("");
            if ($not(_temple_html_attributeremover3['$empty?']())) {
              
              _slim_controls2['$<<'](" class=\"");
              _slim_controls2['$<<'](_temple_html_attributeremover3);
              _slim_controls2['$<<']("\"");
            };
            _slim_controls2['$<<'](">");
            _slim_controls2['$<<'](($truthy(($ret_or_1 = self.$content())) ? ($ret_or_1) : ("")));
            _slim_controls2['$<<']("</pre>");
          };
          _slim_controls2['$<<']("</div>");
          return (_slim_controls2 = _slim_controls2.$join(""));}, {$$s: self});
        _buf['$<<'](_slim_controls1);
        return (_buf = _buf.$join(""));}, {$$s: self});
    }, -2);
    
    $def(self, '$convert_inline_break', function $$convert_inline_break(node, opts) {
      var self = this;

      
      if (opts == null) opts = $hash2([], {});
      node.$extend($$('Helpers'));
      return $send(node, 'instance_eval', [], function $$63(){var self = $$63.$$s == null ? this : $$63.$$s, _buf = nil;
        if (self.text == null) self.text = nil;

        
        if (!$truthy(opts['$empty?']())) {
          self.$converter().$set_local_variables(Opal.Binding.$new(  function($code) {    return eval($code);  },  ["node", "opts"],  self,  ['asciidoctor-revealjs/converter.rb', 1268]), opts)
        };
        _buf = [];
        _buf['$<<'](self.text);
        _buf['$<<']("<br>");
        return (_buf = _buf.$join(""));}, {$$s: self});
    }, -2);
    
    $def(self, '$convert_ulist', function $$convert_ulist(node, opts) {
      var self = this;

      
      if (opts == null) opts = $hash2([], {});
      node.$extend($$('Helpers'));
      return $send(node, 'instance_eval', [], function $$64(){var self = $$64.$$s == null ? this : $$64.$$s, _buf = nil, checklist = nil, marker_checked = nil, marker_unchecked = nil, _slim_controls1 = nil;
        if (self.document == null) self.document = nil;
        if (self.id == null) self.id = nil;
        if (self.style == null) self.style = nil;
        if (self.attributes == null) self.attributes = nil;

        
        if (!$truthy(opts['$empty?']())) {
          self.$converter().$set_local_variables(Opal.Binding.$new(  function($code) {    return eval($code);  },  ["node", "opts"],  self,  ['asciidoctor-revealjs/converter.rb', 1278]), opts)
        };
        _buf = [];
        if ($truthy((checklist = ($truthy(self['$option?']("checklist")) ? ("checklist") : (nil))))) {
          if ($truthy(self['$option?']("interactive"))) {
            
            marker_checked = "<input type=\"checkbox\" data-item-complete=\"1\" checked>";
            marker_unchecked = "<input type=\"checkbox\" data-item-complete=\"0\">";
          } else if ($truthy(self.document['$attr?']("icons", "font"))) {
            
            marker_checked = "<i class=\"icon-check\"></i>";
            marker_unchecked = "<i class=\"icon-check-empty\"></i>";
          } else {
            
            marker_checked = "<input type=\"checkbox\" data-item-complete=\"1\" checked disabled>";
            marker_unchecked = "<input type=\"checkbox\" data-item-complete=\"0\" disabled>";
          }
        };
        _slim_controls1 = $send(self, 'html_tag', ["div", $hash2(["id", "class"], {"id": self.id, "class": ["ulist", checklist, self.style, self.$role()]}).$merge(self.$data_attrs(self.attributes))], function $$65(){var self = $$65.$$s == null ? this : $$65.$$s, _slim_controls2 = nil, _temple_html_attributeremover1 = nil, _slim_codeattributes1 = nil, $ret_or_1 = nil;
          if (self.style == null) self.style = nil;

          
          _slim_controls2 = [];
          if ($truthy(self['$title?']())) {
            
            _slim_controls2['$<<']("<div class=\"title\">");
            _slim_controls2['$<<'](self.$title());
            _slim_controls2['$<<']("</div>");
          };
          _slim_controls2['$<<']("<ul");
          _temple_html_attributeremover1 = [];
          _slim_codeattributes1 = ($truthy(($ret_or_1 = checklist)) ? ($ret_or_1) : (self.style));
          if ($eqeqeq($$('Array'), _slim_codeattributes1)) {
            
            _slim_codeattributes1 = _slim_codeattributes1.$flatten();
            $send(_slim_codeattributes1, 'map!', [], "to_s".$to_proc());
            $send(_slim_codeattributes1, 'reject!', [], "empty?".$to_proc());
            _temple_html_attributeremover1['$<<'](_slim_codeattributes1.$join(" "));
          } else {
            _temple_html_attributeremover1['$<<'](_slim_codeattributes1)
          };
          _temple_html_attributeremover1 = _temple_html_attributeremover1.$join("");
          if ($not(_temple_html_attributeremover1['$empty?']())) {
            
            _slim_controls2['$<<'](" class=\"");
            _slim_controls2['$<<'](_temple_html_attributeremover1);
            _slim_controls2['$<<']("\"");
          };
          _slim_controls2['$<<'](">");
          $send(self.$items(), 'each', [], function $$66(item){var self = $$66.$$s == null ? this : $$66.$$s, _temple_html_attributeremover2 = nil, _slim_codeattributes2 = nil;

            
            if (item == null) item = nil;
            _slim_controls2['$<<']("<li");
            _temple_html_attributeremover2 = [];
            _slim_codeattributes2 = ((($truthy(self['$option?']("step")) || ($truthy(self['$has_role?']("step")))) || ($truthy(self['$attr?']("step")))) ? ("fragment") : nil);
            if ($eqeqeq($$('Array'), _slim_codeattributes2)) {
              
              _slim_codeattributes2 = _slim_codeattributes2.$flatten();
              $send(_slim_codeattributes2, 'map!', [], "to_s".$to_proc());
              $send(_slim_codeattributes2, 'reject!', [], "empty?".$to_proc());
              _temple_html_attributeremover2['$<<'](_slim_codeattributes2.$join(" "));
            } else {
              _temple_html_attributeremover2['$<<'](_slim_codeattributes2)
            };
            _temple_html_attributeremover2 = _temple_html_attributeremover2.$join("");
            if ($not(_temple_html_attributeremover2['$empty?']())) {
              
              _slim_controls2['$<<'](" class=\"");
              _slim_controls2['$<<'](_temple_html_attributeremover2);
              _slim_controls2['$<<']("\"");
            };
            _slim_controls2['$<<']("><p>");
            if (($truthy(checklist) && ($truthy(item['$attr?']("checkbox"))))) {
              _slim_controls2['$<<']("" + (($truthy(item['$attr?']("checked")) ? (marker_checked) : (marker_unchecked))) + (item.$text()))
            } else {
              _slim_controls2['$<<'](item.$text())
            };
            _slim_controls2['$<<']("</p>");
            if ($truthy(item['$blocks?']())) {
              _slim_controls2['$<<'](item.$content())
            };
            return _slim_controls2['$<<']("</li>");}, {$$s: self});
          _slim_controls2['$<<']("</ul>");
          return (_slim_controls2 = _slim_controls2.$join(""));}, {$$s: self});
        _buf['$<<'](_slim_controls1);
        return (_buf = _buf.$join(""));}, {$$s: self});
    }, -2);
    
    $def(self, '$convert_quote', function $$convert_quote(node, opts) {
      var self = this;

      
      if (opts == null) opts = $hash2([], {});
      node.$extend($$('Helpers'));
      return $send(node, 'instance_eval', [], function $$67(){var self = $$67.$$s == null ? this : $$67.$$s, _buf = nil, _slim_controls1 = nil;
        if (self.id == null) self.id = nil;
        if (self.attributes == null) self.attributes = nil;

        
        if (!$truthy(opts['$empty?']())) {
          self.$converter().$set_local_variables(Opal.Binding.$new(  function($code) {    return eval($code);  },  ["node", "opts"],  self,  ['asciidoctor-revealjs/converter.rb', 1311]), opts)
        };
        _buf = [];
        _slim_controls1 = $send(self, 'html_tag', ["div", $hash2(["id", "class"], {"id": self.id, "class": ["quoteblock", self.$role(), (($truthy(self['$option?']("step")) || ($truthy(self['$attr?']("step")))) ? ("fragment") : nil)]}).$merge(self.$data_attrs(self.attributes))], function $$68(){var self = $$68.$$s == null ? this : $$68.$$s, _slim_controls2 = nil, attribution = nil, citetitle = nil;

          
          _slim_controls2 = [];
          if ($truthy(self['$title?']())) {
            
            _slim_controls2['$<<']("<div class=\"title\">");
            _slim_controls2['$<<'](self.$title());
            _slim_controls2['$<<']("</div>");
          };
          _slim_controls2['$<<']("<blockquote>");
          _slim_controls2['$<<'](self.$content());
          _slim_controls2['$<<']("</blockquote>");
          attribution = ($truthy(self['$attr?']("attribution")) ? (self.$attr("attribution")) : (nil));
          citetitle = ($truthy(self['$attr?']("citetitle")) ? (self.$attr("citetitle")) : (nil));
          if (($truthy(attribution) || ($truthy(citetitle)))) {
            
            _slim_controls2['$<<']("<div class=\"attribution\">");
            if ($truthy(citetitle)) {
              
              _slim_controls2['$<<']("<cite>");
              _slim_controls2['$<<'](citetitle);
              _slim_controls2['$<<']("</cite>");
            };
            if ($truthy(attribution)) {
              
              if ($truthy(citetitle)) {
                _slim_controls2['$<<']("<br>")
              };
              _slim_controls2['$<<']("&#8212; ");
              _slim_controls2['$<<'](attribution);
            };
            _slim_controls2['$<<']("</div>");
          };
          return (_slim_controls2 = _slim_controls2.$join(""));}, {$$s: self});
        _buf['$<<'](_slim_controls1);
        return (_buf = _buf.$join(""));}, {$$s: self});
    }, -2);
    
    $def(self, '$convert_verse', function $$convert_verse(node, opts) {
      var self = this;

      
      if (opts == null) opts = $hash2([], {});
      node.$extend($$('Helpers'));
      return $send(node, 'instance_eval', [], function $$69(){var self = $$69.$$s == null ? this : $$69.$$s, _buf = nil, _slim_controls1 = nil;
        if (self.id == null) self.id = nil;
        if (self.attributes == null) self.attributes = nil;

        
        if (!$truthy(opts['$empty?']())) {
          self.$converter().$set_local_variables(Opal.Binding.$new(  function($code) {    return eval($code);  },  ["node", "opts"],  self,  ['asciidoctor-revealjs/converter.rb', 1333]), opts)
        };
        _buf = [];
        _slim_controls1 = $send(self, 'html_tag', ["div", $hash2(["id", "class"], {"id": self.id, "class": ["verseblock", self.$role(), (($truthy(self['$option?']("step")) || ($truthy(self['$attr?']("step")))) ? ("fragment") : nil)]}).$merge(self.$data_attrs(self.attributes))], function $$70(){var self = $$70.$$s == null ? this : $$70.$$s, _slim_controls2 = nil, attribution = nil, citetitle = nil;

          
          _slim_controls2 = [];
          if ($truthy(self['$title?']())) {
            
            _slim_controls2['$<<']("<div class=\"title\">");
            _slim_controls2['$<<'](self.$title());
            _slim_controls2['$<<']("</div>");
          };
          _slim_controls2['$<<']("<pre class=\"content\">");
          _slim_controls2['$<<'](self.$content());
          _slim_controls2['$<<']("</pre>");
          attribution = ($truthy(self['$attr?']("attribution")) ? (self.$attr("attribution")) : (nil));
          citetitle = ($truthy(self['$attr?']("citetitle")) ? (self.$attr("citetitle")) : (nil));
          if (($truthy(attribution) || ($truthy(citetitle)))) {
            
            _slim_controls2['$<<']("<div class=\"attribution\">");
            if ($truthy(citetitle)) {
              
              _slim_controls2['$<<']("<cite>");
              _slim_controls2['$<<'](citetitle);
              _slim_controls2['$<<']("</cite>");
            };
            if ($truthy(attribution)) {
              
              if ($truthy(citetitle)) {
                _slim_controls2['$<<']("<br>")
              };
              _slim_controls2['$<<']("&#8212; ");
              _slim_controls2['$<<'](attribution);
            };
            _slim_controls2['$<<']("</div>");
          };
          return (_slim_controls2 = _slim_controls2.$join(""));}, {$$s: self});
        _buf['$<<'](_slim_controls1);
        return (_buf = _buf.$join(""));}, {$$s: self});
    }, -2);
    
    $def(self, '$convert_video', function $$convert_video(node, opts) {
      var self = this;

      
      if (opts == null) opts = $hash2([], {});
      node.$extend($$('Helpers'));
      return $send(node, 'instance_eval', [], function $$71(){var self = $$71.$$s == null ? this : $$71.$$s, _buf = nil, no_stretch = nil, $ret_or_1 = nil, width = nil, height = nil, _slim_controls1 = nil;
        if (self.id == null) self.id = nil;
        if (self.style == null) self.style = nil;
        if (self.attributes == null) self.attributes = nil;

        
        if (!$truthy(opts['$empty?']())) {
          self.$converter().$set_local_variables(Opal.Binding.$new(  function($code) {    return eval($code);  },  ["node", "opts"],  self,  ['asciidoctor-revealjs/converter.rb', 1355]), opts)
        };
        _buf = [];
        no_stretch = ($truthy(($ret_or_1 = self['$attr?']("width"))) ? ($ret_or_1) : (self['$attr?']("height")));
        width = ($truthy(self['$attr?']("width")) ? (self.$attr("width")) : ("100%"));
        height = ($truthy(self['$attr?']("height")) ? (self.$attr("height")) : ("100%"));
        _slim_controls1 = $send(self, 'html_tag', ["div", $hash2(["id", "class"], {"id": self.id, "class": ["videoblock", self.style, self.$role(), ($truthy(no_stretch) ? (nil) : ("stretch")), ((($truthy(self['$option?']("step")) || ($truthy(self['$has_role?']("step")))) || ($truthy(self['$attr?']("step")))) ? ("fragment") : nil)]}).$merge(self.$data_attrs(self.attributes))], function $$72(){var self = $$72.$$s == null ? this : $$72.$$s, _slim_controls2 = nil, asset_uri_scheme = nil, start_anchor = nil, delimiter = nil, loop_param = nil, $ret_or_2 = nil, muted_param = nil, src = nil, _slim_codeattributes1 = nil, _slim_codeattributes2 = nil, _slim_codeattributes3 = nil, _slim_codeattributes4 = nil, _slim_codeattributes5 = nil, _slim_codeattributes6 = nil, params = nil, _slim_codeattributes7 = nil, _slim_codeattributes8 = nil, _slim_codeattributes9 = nil, _slim_codeattributes10 = nil, _slim_codeattributes11 = nil, _slim_codeattributes12 = nil, _slim_codeattributes13 = nil, _slim_codeattributes14 = nil, _slim_codeattributes15 = nil, _slim_codeattributes16 = nil, _slim_codeattributes17 = nil, _slim_codeattributes18 = nil, _slim_codeattributes19 = nil, _slim_codeattributes20 = nil;

          
          _slim_controls2 = [];
          if ($truthy(self['$title?']())) {
            
            _slim_controls2['$<<']("<div class=\"title\">");
            _slim_controls2['$<<'](self.$captioned_title());
            _slim_controls2['$<<']("</div>");
          };
          
          switch (self.$attr("poster")) {
            case "vimeo":
              
              if (!$truthy((asset_uri_scheme = self.$attr("asset_uri_scheme", "https"))['$empty?']())) {
                asset_uri_scheme = "" + (asset_uri_scheme) + ":"
              };
              start_anchor = ($truthy(self['$attr?']("start")) ? ("#at=" + (self.$attr("start"))) : (nil));
              delimiter = ["?"];
              loop_param = ($truthy(self['$option?']("loop")) ? ("" + (($truthy(($ret_or_2 = delimiter.$pop())) ? ($ret_or_2) : ("&amp;"))) + "loop=1") : (""));
              muted_param = ($truthy(self['$option?']("muted")) ? ("" + (($truthy(($ret_or_2 = delimiter.$pop())) ? ($ret_or_2) : ("&amp;"))) + "muted=1") : (""));
              src = "" + (asset_uri_scheme) + "//player.vimeo.com/video/" + (self.$attr("target")) + (loop_param) + (muted_param) + (start_anchor);
              _slim_controls2['$<<']("<iframe");
              _slim_codeattributes1 = width;
              if ($truthy(_slim_codeattributes1)) {
                if ($eqeq(_slim_codeattributes1, true)) {
                  _slim_controls2['$<<'](" width")
                } else {
                  
                  _slim_controls2['$<<'](" width=\"");
                  _slim_controls2['$<<'](_slim_codeattributes1);
                  _slim_controls2['$<<']("\"");
                }
              };
              _slim_codeattributes2 = height;
              if ($truthy(_slim_codeattributes2)) {
                if ($eqeq(_slim_codeattributes2, true)) {
                  _slim_controls2['$<<'](" height")
                } else {
                  
                  _slim_controls2['$<<'](" height=\"");
                  _slim_controls2['$<<'](_slim_codeattributes2);
                  _slim_controls2['$<<']("\"");
                }
              };
              _slim_codeattributes3 = src;
              if ($truthy(_slim_codeattributes3)) {
                if ($eqeq(_slim_codeattributes3, true)) {
                  _slim_controls2['$<<'](" src")
                } else {
                  
                  _slim_controls2['$<<'](" src=\"");
                  _slim_controls2['$<<'](_slim_codeattributes3);
                  _slim_controls2['$<<']("\"");
                }
              };
              _slim_codeattributes4 = 0;
              if ($truthy(_slim_codeattributes4)) {
                if ($eqeq(_slim_codeattributes4, true)) {
                  _slim_controls2['$<<'](" frameborder")
                } else {
                  
                  _slim_controls2['$<<'](" frameborder=\"");
                  _slim_controls2['$<<'](_slim_codeattributes4);
                  _slim_controls2['$<<']("\"");
                }
              };
              _slim_controls2['$<<'](" webkitAllowFullScreen mozallowfullscreen allowFullScreen");
              _slim_codeattributes5 = self['$option?']("autoplay");
              if ($truthy(_slim_codeattributes5)) {
                if ($eqeq(_slim_codeattributes5, true)) {
                  _slim_controls2['$<<'](" data-autoplay")
                } else {
                  
                  _slim_controls2['$<<'](" data-autoplay=\"");
                  _slim_controls2['$<<'](_slim_codeattributes5);
                  _slim_controls2['$<<']("\"");
                }
              };
              _slim_codeattributes6 = ($truthy(self['$option?']("autoplay")) ? ("autoplay") : (nil));
              if ($truthy(_slim_codeattributes6)) {
                if ($eqeq(_slim_codeattributes6, true)) {
                  _slim_controls2['$<<'](" allow")
                } else {
                  
                  _slim_controls2['$<<'](" allow=\"");
                  _slim_controls2['$<<'](_slim_codeattributes6);
                  _slim_controls2['$<<']("\"");
                }
              };
              _slim_controls2['$<<']("></iframe>");
              break;
            case "youtube":
              
              if (!$truthy((asset_uri_scheme = self.$attr("asset_uri_scheme", "https"))['$empty?']())) {
                asset_uri_scheme = "" + (asset_uri_scheme) + ":"
              };
              params = ["rel=0"];
              if ($truthy(self['$attr?']("start"))) {
                params['$<<']("start=" + (self.$attr("start")))
              };
              if ($truthy(self['$attr?']("end"))) {
                params['$<<']("end=" + (self.$attr("end")))
              };
              if ($truthy(self['$option?']("loop"))) {
                params['$<<']("loop=1")
              };
              if ($truthy(self['$option?']("muted"))) {
                params['$<<']("mute=1")
              };
              if ($truthy(self['$option?']("nocontrols"))) {
                params['$<<']("controls=0")
              };
              src = "" + (asset_uri_scheme) + "//www.youtube.com/embed/" + (self.$attr("target")) + "?" + ($rb_times(params, "&amp;"));
              _slim_controls2['$<<']("<iframe");
              _slim_codeattributes7 = width;
              if ($truthy(_slim_codeattributes7)) {
                if ($eqeq(_slim_codeattributes7, true)) {
                  _slim_controls2['$<<'](" width")
                } else {
                  
                  _slim_controls2['$<<'](" width=\"");
                  _slim_controls2['$<<'](_slim_codeattributes7);
                  _slim_controls2['$<<']("\"");
                }
              };
              _slim_codeattributes8 = height;
              if ($truthy(_slim_codeattributes8)) {
                if ($eqeq(_slim_codeattributes8, true)) {
                  _slim_controls2['$<<'](" height")
                } else {
                  
                  _slim_controls2['$<<'](" height=\"");
                  _slim_controls2['$<<'](_slim_codeattributes8);
                  _slim_controls2['$<<']("\"");
                }
              };
              _slim_codeattributes9 = src;
              if ($truthy(_slim_codeattributes9)) {
                if ($eqeq(_slim_codeattributes9, true)) {
                  _slim_controls2['$<<'](" src")
                } else {
                  
                  _slim_controls2['$<<'](" src=\"");
                  _slim_controls2['$<<'](_slim_codeattributes9);
                  _slim_controls2['$<<']("\"");
                }
              };
              _slim_codeattributes10 = 0;
              if ($truthy(_slim_codeattributes10)) {
                if ($eqeq(_slim_codeattributes10, true)) {
                  _slim_controls2['$<<'](" frameborder")
                } else {
                  
                  _slim_controls2['$<<'](" frameborder=\"");
                  _slim_controls2['$<<'](_slim_codeattributes10);
                  _slim_controls2['$<<']("\"");
                }
              };
              _slim_codeattributes11 = self['$option?']("nofullscreen")['$!']();
              if ($truthy(_slim_codeattributes11)) {
                if ($eqeq(_slim_codeattributes11, true)) {
                  _slim_controls2['$<<'](" allowfullscreen")
                } else {
                  
                  _slim_controls2['$<<'](" allowfullscreen=\"");
                  _slim_controls2['$<<'](_slim_codeattributes11);
                  _slim_controls2['$<<']("\"");
                }
              };
              _slim_codeattributes12 = self['$option?']("autoplay");
              if ($truthy(_slim_codeattributes12)) {
                if ($eqeq(_slim_codeattributes12, true)) {
                  _slim_controls2['$<<'](" data-autoplay")
                } else {
                  
                  _slim_controls2['$<<'](" data-autoplay=\"");
                  _slim_controls2['$<<'](_slim_codeattributes12);
                  _slim_controls2['$<<']("\"");
                }
              };
              _slim_codeattributes13 = ($truthy(self['$option?']("autoplay")) ? ("autoplay") : (nil));
              if ($truthy(_slim_codeattributes13)) {
                if ($eqeq(_slim_codeattributes13, true)) {
                  _slim_controls2['$<<'](" allow")
                } else {
                  
                  _slim_controls2['$<<'](" allow=\"");
                  _slim_controls2['$<<'](_slim_codeattributes13);
                  _slim_controls2['$<<']("\"");
                }
              };
              _slim_controls2['$<<']("></iframe>");
              break;
            default:
              
              _slim_controls2['$<<']("<video");
              _slim_codeattributes14 = self.$media_uri(self.$attr("target"));
              if ($truthy(_slim_codeattributes14)) {
                if ($eqeq(_slim_codeattributes14, true)) {
                  _slim_controls2['$<<'](" src")
                } else {
                  
                  _slim_controls2['$<<'](" src=\"");
                  _slim_controls2['$<<'](_slim_codeattributes14);
                  _slim_controls2['$<<']("\"");
                }
              };
              _slim_codeattributes15 = width;
              if ($truthy(_slim_codeattributes15)) {
                if ($eqeq(_slim_codeattributes15, true)) {
                  _slim_controls2['$<<'](" width")
                } else {
                  
                  _slim_controls2['$<<'](" width=\"");
                  _slim_controls2['$<<'](_slim_codeattributes15);
                  _slim_controls2['$<<']("\"");
                }
              };
              _slim_codeattributes16 = height;
              if ($truthy(_slim_codeattributes16)) {
                if ($eqeq(_slim_codeattributes16, true)) {
                  _slim_controls2['$<<'](" height")
                } else {
                  
                  _slim_controls2['$<<'](" height=\"");
                  _slim_controls2['$<<'](_slim_codeattributes16);
                  _slim_controls2['$<<']("\"");
                }
              };
              _slim_codeattributes17 = ($truthy(self.$attr("poster")) ? (self.$media_uri(self.$attr("poster"))) : (nil));
              if ($truthy(_slim_codeattributes17)) {
                if ($eqeq(_slim_codeattributes17, true)) {
                  _slim_controls2['$<<'](" poster")
                } else {
                  
                  _slim_controls2['$<<'](" poster=\"");
                  _slim_controls2['$<<'](_slim_codeattributes17);
                  _slim_controls2['$<<']("\"");
                }
              };
              _slim_codeattributes18 = self['$option?']("autoplay");
              if ($truthy(_slim_codeattributes18)) {
                if ($eqeq(_slim_codeattributes18, true)) {
                  _slim_controls2['$<<'](" data-autoplay")
                } else {
                  
                  _slim_controls2['$<<'](" data-autoplay=\"");
                  _slim_controls2['$<<'](_slim_codeattributes18);
                  _slim_controls2['$<<']("\"");
                }
              };
              _slim_codeattributes19 = self['$option?']("nocontrols")['$!']();
              if ($truthy(_slim_codeattributes19)) {
                if ($eqeq(_slim_codeattributes19, true)) {
                  _slim_controls2['$<<'](" controls")
                } else {
                  
                  _slim_controls2['$<<'](" controls=\"");
                  _slim_controls2['$<<'](_slim_codeattributes19);
                  _slim_controls2['$<<']("\"");
                }
              };
              _slim_codeattributes20 = self['$option?']("loop");
              if ($truthy(_slim_codeattributes20)) {
                if ($eqeq(_slim_codeattributes20, true)) {
                  _slim_controls2['$<<'](" loop")
                } else {
                  
                  _slim_controls2['$<<'](" loop=\"");
                  _slim_controls2['$<<'](_slim_codeattributes20);
                  _slim_controls2['$<<']("\"");
                }
              };
              _slim_controls2['$<<'](">Your browser does not support the video tag.</video>");
          };
          return (_slim_controls2 = _slim_controls2.$join(""));}, {$$s: self});
        _buf['$<<'](_slim_controls1);
        return (_buf = _buf.$join(""));}, {$$s: self});
    }, -2);
    
    $def(self, '$convert_outline', function $$convert_outline(node, opts) {
      var self = this;

      
      if (opts == null) opts = $hash2([], {});
      node.$extend($$('Helpers'));
      return $send(node, 'instance_eval', [], function $$73(){var self = $$73.$$s == null ? this : $$73.$$s, _buf = nil, toclevels = nil, $ret_or_1 = nil, slevel = nil;

        
        if (!$truthy(opts['$empty?']())) {
          self.$converter().$set_local_variables(Opal.Binding.$new(  function($code) {    return eval($code);  },  ["node", "opts"],  self,  ['asciidoctor-revealjs/converter.rb', 1409]), opts)
        };
        _buf = [];
        if (!$truthy(self.$sections()['$empty?']())) {
          
          toclevels = ($truthy(($ret_or_1 = toclevels)) ? ($ret_or_1) : (self.$document().$attr("toclevels", $$('DEFAULT_TOCLEVELS')).$to_i()));
          slevel = self.$section_level(self.$sections().$first());
          _buf['$<<']("<ol class=\"sectlevel");
          _buf['$<<'](slevel);
          _buf['$<<']("\">");
          $send(self.$sections(), 'each', [], function $$74(sec){var self = $$74.$$s == null ? this : $$74.$$s, child_toc = nil;

            
            if (sec == null) sec = nil;
            _buf['$<<']("<li><a href=\"#");
            _buf['$<<'](sec.$id());
            _buf['$<<']("\">");
            _buf['$<<'](self.$section_title(sec));
            _buf['$<<']("</a>");
            if (($truthy($rb_lt(sec.$level(), toclevels)) && ($truthy((child_toc = self.$converter().$convert(sec, "outline")))))) {
              _buf['$<<'](child_toc)
            };
            return _buf['$<<']("</li>");}, {$$s: self});
          _buf['$<<']("</ol>");
        };
        return (_buf = _buf.$join(""));}, {$$s: self});
    }, -2);
    
    $def(self, '$convert_inline_indexterm', function $$convert_inline_indexterm(node, opts) {
      var self = this;

      
      if (opts == null) opts = $hash2([], {});
      node.$extend($$('Helpers'));
      return $send(node, 'instance_eval', [], function $$75(){var self = $$75.$$s == null ? this : $$75.$$s, _buf = nil;
        if (self.type == null) self.type = nil;
        if (self.text == null) self.text = nil;

        
        if (!$truthy(opts['$empty?']())) {
          self.$converter().$set_local_variables(Opal.Binding.$new(  function($code) {    return eval($code);  },  ["node", "opts"],  self,  ['asciidoctor-revealjs/converter.rb', 1426]), opts)
        };
        _buf = [];
        if ($eqeq(self.type, "visible")) {
          _buf['$<<'](self.text)
        };
        return (_buf = _buf.$join(""));}, {$$s: self});
    }, -2);
    
    $def(self, '$convert_title_slide', function $$convert_title_slide(node, opts) {
      var self = this;

      
      if (opts == null) opts = $hash2([], {});
      node.$extend($$('Helpers'));
      return $send(node, 'instance_eval', [], function $$76(){var self = $$76.$$s == null ? this : $$76.$$s, _buf = nil, bg_image = nil, bg_video = nil, _temple_html_attributeremover1 = nil, _temple_html_attributemerger1 = nil, _slim_codeattributes1 = nil, _slim_codeattributes2 = nil, _slim_codeattributes3 = nil, _slim_codeattributes4 = nil, _slim_codeattributes5 = nil, _slim_codeattributes6 = nil, _slim_codeattributes7 = nil, _slim_codeattributes8 = nil, _slim_codeattributes9 = nil, _slim_codeattributes10 = nil, _slim_codeattributes11 = nil, _slim_codeattributes12 = nil, _slim_codeattributes13 = nil, _slim_codeattributes14 = nil, _slim_codeattributes15 = nil, _title_obj = nil, _slice = nil, preamble = nil;
        if (self.header == null) self.header = nil;
        if (self.document == null) self.document = nil;

        
        if (!$truthy(opts['$empty?']())) {
          self.$converter().$set_local_variables(Opal.Binding.$new(  function($code) {    return eval($code);  },  ["node", "opts"],  self,  ['asciidoctor-revealjs/converter.rb', 1436]), opts)
        };
        _buf = [];
        bg_image = ($truthy(self['$attr?']("title-slide-background-image")) ? (self.$image_uri(self.$attr("title-slide-background-image"))) : (nil));
        bg_video = ($truthy(self['$attr?']("title-slide-background-video")) ? (self.$media_uri(self.$attr("title-slide-background-video"))) : (nil));
        _buf['$<<']("<section");
        _temple_html_attributeremover1 = [];
        _temple_html_attributemerger1 = [];
        _temple_html_attributemerger1['$[]='](0, "title");
        _temple_html_attributemerger1['$[]='](1, []);
        _slim_codeattributes1 = self.$role();
        if ($eqeqeq($$('Array'), _slim_codeattributes1)) {
          
          _slim_codeattributes1 = _slim_codeattributes1.$flatten();
          $send(_slim_codeattributes1, 'map!', [], "to_s".$to_proc());
          $send(_slim_codeattributes1, 'reject!', [], "empty?".$to_proc());
          _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1.$join(" "));
        } else {
          _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1)
        };
        _temple_html_attributemerger1['$[]='](1, _temple_html_attributemerger1['$[]'](1).$join(""));
        _temple_html_attributeremover1['$<<']($send(_temple_html_attributemerger1, 'reject', [], "empty?".$to_proc()).$join(" "));
        _temple_html_attributeremover1 = _temple_html_attributeremover1.$join("");
        if ($not(_temple_html_attributeremover1['$empty?']())) {
          
          _buf['$<<'](" class=\"");
          _buf['$<<'](_temple_html_attributeremover1);
          _buf['$<<']("\"");
        };
        _buf['$<<'](" data-state=\"title\"");
        _slim_codeattributes2 = self.$attr("title-slide-transition");
        if ($truthy(_slim_codeattributes2)) {
          if ($eqeq(_slim_codeattributes2, true)) {
            _buf['$<<'](" data-transition")
          } else {
            
            _buf['$<<'](" data-transition=\"");
            _buf['$<<'](_slim_codeattributes2);
            _buf['$<<']("\"");
          }
        };
        _slim_codeattributes3 = self.$attr("title-slide-transition-speed");
        if ($truthy(_slim_codeattributes3)) {
          if ($eqeq(_slim_codeattributes3, true)) {
            _buf['$<<'](" data-transition-speed")
          } else {
            
            _buf['$<<'](" data-transition-speed=\"");
            _buf['$<<'](_slim_codeattributes3);
            _buf['$<<']("\"");
          }
        };
        _slim_codeattributes4 = self.$attr("title-slide-background");
        if ($truthy(_slim_codeattributes4)) {
          if ($eqeq(_slim_codeattributes4, true)) {
            _buf['$<<'](" data-background")
          } else {
            
            _buf['$<<'](" data-background=\"");
            _buf['$<<'](_slim_codeattributes4);
            _buf['$<<']("\"");
          }
        };
        _slim_codeattributes5 = self.$attr("title-slide-background-size");
        if ($truthy(_slim_codeattributes5)) {
          if ($eqeq(_slim_codeattributes5, true)) {
            _buf['$<<'](" data-background-size")
          } else {
            
            _buf['$<<'](" data-background-size=\"");
            _buf['$<<'](_slim_codeattributes5);
            _buf['$<<']("\"");
          }
        };
        _slim_codeattributes6 = bg_image;
        if ($truthy(_slim_codeattributes6)) {
          if ($eqeq(_slim_codeattributes6, true)) {
            _buf['$<<'](" data-background-image")
          } else {
            
            _buf['$<<'](" data-background-image=\"");
            _buf['$<<'](_slim_codeattributes6);
            _buf['$<<']("\"");
          }
        };
        _slim_codeattributes7 = bg_video;
        if ($truthy(_slim_codeattributes7)) {
          if ($eqeq(_slim_codeattributes7, true)) {
            _buf['$<<'](" data-background-video")
          } else {
            
            _buf['$<<'](" data-background-video=\"");
            _buf['$<<'](_slim_codeattributes7);
            _buf['$<<']("\"");
          }
        };
        _slim_codeattributes8 = self.$attr("title-slide-background-video-loop");
        if ($truthy(_slim_codeattributes8)) {
          if ($eqeq(_slim_codeattributes8, true)) {
            _buf['$<<'](" data-background-video-loop")
          } else {
            
            _buf['$<<'](" data-background-video-loop=\"");
            _buf['$<<'](_slim_codeattributes8);
            _buf['$<<']("\"");
          }
        };
        _slim_codeattributes9 = self.$attr("title-slide-background-video-muted");
        if ($truthy(_slim_codeattributes9)) {
          if ($eqeq(_slim_codeattributes9, true)) {
            _buf['$<<'](" data-background-video-muted")
          } else {
            
            _buf['$<<'](" data-background-video-muted=\"");
            _buf['$<<'](_slim_codeattributes9);
            _buf['$<<']("\"");
          }
        };
        _slim_codeattributes10 = self.$attr("title-slide-background-opacity");
        if ($truthy(_slim_codeattributes10)) {
          if ($eqeq(_slim_codeattributes10, true)) {
            _buf['$<<'](" data-background-opacity")
          } else {
            
            _buf['$<<'](" data-background-opacity=\"");
            _buf['$<<'](_slim_codeattributes10);
            _buf['$<<']("\"");
          }
        };
        _slim_codeattributes11 = self.$attr("title-slide-background-iframe");
        if ($truthy(_slim_codeattributes11)) {
          if ($eqeq(_slim_codeattributes11, true)) {
            _buf['$<<'](" data-background-iframe")
          } else {
            
            _buf['$<<'](" data-background-iframe=\"");
            _buf['$<<'](_slim_codeattributes11);
            _buf['$<<']("\"");
          }
        };
        _slim_codeattributes12 = self.$attr("title-slide-background-color");
        if ($truthy(_slim_codeattributes12)) {
          if ($eqeq(_slim_codeattributes12, true)) {
            _buf['$<<'](" data-background-color")
          } else {
            
            _buf['$<<'](" data-background-color=\"");
            _buf['$<<'](_slim_codeattributes12);
            _buf['$<<']("\"");
          }
        };
        _slim_codeattributes13 = self.$attr("title-slide-background-repeat");
        if ($truthy(_slim_codeattributes13)) {
          if ($eqeq(_slim_codeattributes13, true)) {
            _buf['$<<'](" data-background-repeat")
          } else {
            
            _buf['$<<'](" data-background-repeat=\"");
            _buf['$<<'](_slim_codeattributes13);
            _buf['$<<']("\"");
          }
        };
        _slim_codeattributes14 = self.$attr("title-slide-background-position");
        if ($truthy(_slim_codeattributes14)) {
          if ($eqeq(_slim_codeattributes14, true)) {
            _buf['$<<'](" data-background-position")
          } else {
            
            _buf['$<<'](" data-background-position=\"");
            _buf['$<<'](_slim_codeattributes14);
            _buf['$<<']("\"");
          }
        };
        _slim_codeattributes15 = self.$attr("title-slide-background-transition");
        if ($truthy(_slim_codeattributes15)) {
          if ($eqeq(_slim_codeattributes15, true)) {
            _buf['$<<'](" data-background-transition")
          } else {
            
            _buf['$<<'](" data-background-transition=\"");
            _buf['$<<'](_slim_codeattributes15);
            _buf['$<<']("\"");
          }
        };
        _buf['$<<'](">");
        if ($truthy((_title_obj = self.$doctitle($hash2(["partition", "use_fallback"], {"partition": true, "use_fallback": true})))['$subtitle?']())) {
          
          _buf['$<<']("<h1>");
          _buf['$<<'](self.$slice_text(_title_obj.$title(), (_slice = self.$header()['$option?']("slice"))));
          _buf['$<<']("</h1><h2>");
          _buf['$<<'](self.$slice_text(_title_obj.$subtitle(), _slice));
          _buf['$<<']("</h2>");
        } else {
          
          _buf['$<<']("<h1>");
          _buf['$<<'](self.header.$title());
          _buf['$<<']("</h1>");
        };
        preamble = self.document.$find_by($hash2(["context"], {"context": "preamble"}));
        if (!($truthy(preamble['$nil?']()) || ($eqeq(preamble.$length(), 0)))) {
          
          _buf['$<<']("<div class=\"preamble\">");
          _buf['$<<'](preamble.$pop().$content());
          _buf['$<<']("</div>");
        };
        _buf['$<<'](self.$generate_authors(self.document));
        _buf['$<<']("</section>");
        return (_buf = _buf.$join(""));}, {$$s: self});
    }, -2);
    
    $def(self, '$convert_admonition', function $$convert_admonition(node, opts) {
      var self = this;

      
      if (opts == null) opts = $hash2([], {});
      node.$extend($$('Helpers'));
      return $send(node, 'instance_eval', [], function $$77(){var self = $$77.$$s == null ? this : $$77.$$s, _buf = nil, _slim_controls1 = nil;
        if (self.id == null) self.id = nil;
        if (self.attributes == null) self.attributes = nil;

        
        if (!$truthy(opts['$empty?']())) {
          self.$converter().$set_local_variables(Opal.Binding.$new(  function($code) {    return eval($code);  },  ["node", "opts"],  self,  ['asciidoctor-revealjs/converter.rb', 1471]), opts)
        };
        _buf = [];
        if ((($truthy(self['$has_role?']("aside")) || ($truthy(self['$has_role?']("speaker")))) || ($truthy(self['$has_role?']("notes"))))) {
          
          _buf['$<<']("<aside class=\"notes\">");
          _buf['$<<'](self.$resolve_content());
          _buf['$<<']("</aside>");
        } else {
          
          _slim_controls1 = $send(self, 'html_tag', ["div", $hash2(["id", "class"], {"id": self.id, "class": ["admonitionblock", self.$attr("name"), self.$role(), (($truthy(self['$option?']("step")) || ($truthy(self['$attr?']("step")))) ? ("fragment") : nil)]}).$merge(self.$data_attrs(self.attributes))], function $$78(){var self = $$78.$$s == null ? this : $$78.$$s, _slim_controls2 = nil, icon_mapping = nil, _temple_html_attributeremover1 = nil, _slim_codeattributes1 = nil, _slim_codeattributes2 = nil, $ret_or_1 = nil, _slim_codeattributes3 = nil, _slim_codeattributes4 = nil;
            if (self.document == null) self.document = nil;
            if (self.caption == null) self.caption = nil;

            
            _slim_controls2 = [];
            _slim_controls2['$<<']("<table><tr><td class=\"icon\">");
            if ($truthy(self.document['$attr?']("icons", "font"))) {
              
              icon_mapping = $$('Hash')['$[]']("caution", "fire", "important", "exclamation-circle", "note", "info-circle", "tip", "lightbulb-o", "warning", "warning");
              _slim_controls2['$<<']("<i");
              _temple_html_attributeremover1 = [];
              _slim_codeattributes1 = "fa fa-" + (icon_mapping['$[]'](self.$attr("name")));
              if ($eqeqeq($$('Array'), _slim_codeattributes1)) {
                
                _slim_codeattributes1 = _slim_codeattributes1.$flatten();
                $send(_slim_codeattributes1, 'map!', [], "to_s".$to_proc());
                $send(_slim_codeattributes1, 'reject!', [], "empty?".$to_proc());
                _temple_html_attributeremover1['$<<'](_slim_codeattributes1.$join(" "));
              } else {
                _temple_html_attributeremover1['$<<'](_slim_codeattributes1)
              };
              _temple_html_attributeremover1 = _temple_html_attributeremover1.$join("");
              if ($not(_temple_html_attributeremover1['$empty?']())) {
                
                _slim_controls2['$<<'](" class=\"");
                _slim_controls2['$<<'](_temple_html_attributeremover1);
                _slim_controls2['$<<']("\"");
              };
              _slim_codeattributes2 = self.$attr(($truthy(($ret_or_1 = "textlabel")) ? ($ret_or_1) : (self.caption)));
              if ($truthy(_slim_codeattributes2)) {
                if ($eqeq(_slim_codeattributes2, true)) {
                  _slim_controls2['$<<'](" title")
                } else {
                  
                  _slim_controls2['$<<'](" title=\"");
                  _slim_controls2['$<<'](_slim_codeattributes2);
                  _slim_controls2['$<<']("\"");
                }
              };
              _slim_controls2['$<<']("></i>");
            } else if ($truthy(self.document['$attr?']("icons"))) {
              
              _slim_controls2['$<<']("<img");
              _slim_codeattributes3 = self.$icon_uri(self.$attr("name"));
              if ($truthy(_slim_codeattributes3)) {
                if ($eqeq(_slim_codeattributes3, true)) {
                  _slim_controls2['$<<'](" src")
                } else {
                  
                  _slim_controls2['$<<'](" src=\"");
                  _slim_controls2['$<<'](_slim_codeattributes3);
                  _slim_controls2['$<<']("\"");
                }
              };
              _slim_codeattributes4 = self.caption;
              if ($truthy(_slim_codeattributes4)) {
                if ($eqeq(_slim_codeattributes4, true)) {
                  _slim_controls2['$<<'](" alt")
                } else {
                  
                  _slim_controls2['$<<'](" alt=\"");
                  _slim_controls2['$<<'](_slim_codeattributes4);
                  _slim_controls2['$<<']("\"");
                }
              };
              _slim_controls2['$<<'](">");
            } else {
              
              _slim_controls2['$<<']("<div class=\"title\">");
              _slim_controls2['$<<'](($truthy(($ret_or_1 = self.$attr("textlabel"))) ? ($ret_or_1) : (self.caption)));
              _slim_controls2['$<<']("</div>");
            };
            _slim_controls2['$<<']("</td><td class=\"content\">");
            if ($truthy(self['$title?']())) {
              
              _slim_controls2['$<<']("<div class=\"title\">");
              _slim_controls2['$<<'](self.$title());
              _slim_controls2['$<<']("</div>");
            };
            _slim_controls2['$<<'](self.$content());
            _slim_controls2['$<<']("</td></tr></table>");
            return (_slim_controls2 = _slim_controls2.$join(""));}, {$$s: self});
          _buf['$<<'](_slim_controls1);
        };
        return (_buf = _buf.$join(""));}, {$$s: self});
    }, -2);
    
    $def(self, '$convert_inline_kbd', function $$convert_inline_kbd(node, opts) {
      var self = this;

      
      if (opts == null) opts = $hash2([], {});
      node.$extend($$('Helpers'));
      return $send(node, 'instance_eval', [], function $$79(){var self = $$79.$$s == null ? this : $$79.$$s, _buf = nil, keys = nil, _slim_controls1 = nil, _slim_controls3 = nil;
        if (self.attributes == null) self.attributes = nil;

        
        if (!$truthy(opts['$empty?']())) {
          self.$converter().$set_local_variables(Opal.Binding.$new(  function($code) {    return eval($code);  },  ["node", "opts"],  self,  ['asciidoctor-revealjs/converter.rb', 1497]), opts)
        };
        _buf = [];
        if ($eqeq((keys = self.$attr("keys")).$size(), 1)) {
          
          _slim_controls1 = $send(self, 'html_tag', ["kbd", self.$data_attrs(self.attributes)], function $$80(){var _slim_controls2 = nil;

            
            _slim_controls2 = [];
            _slim_controls2['$<<'](keys.$first());
            return (_slim_controls2 = _slim_controls2.$join(""));});
          _buf['$<<'](_slim_controls1);
        } else {
          
          _slim_controls3 = $send(self, 'html_tag', ["span", $hash2(["class"], {"class": ["keyseq"]}).$merge(self.$data_attrs(self.attributes))], function $$81(){var _slim_controls4 = nil;

            
            _slim_controls4 = [];
            $send(keys, 'each_with_index', [], function $$82(key, idx){
              
              if (key == null) key = nil;
              if (idx == null) idx = nil;
              if (!$truthy(idx['$zero?']())) {
                _slim_controls4['$<<']("+")
              };
              _slim_controls4['$<<']("<kbd>");
              _slim_controls4['$<<'](key);
              return _slim_controls4['$<<']("</kbd>");});
            return (_slim_controls4 = _slim_controls4.$join(""));});
          _buf['$<<'](_slim_controls3);
        };
        return (_buf = _buf.$join(""));}, {$$s: self});
    }, -2);
    
    $def(self, '$convert_literal', function $$convert_literal(node, opts) {
      var self = this;

      
      if (opts == null) opts = $hash2([], {});
      node.$extend($$('Helpers'));
      return $send(node, 'instance_eval', [], function $$83(){var self = $$83.$$s == null ? this : $$83.$$s, _buf = nil, _slim_controls1 = nil;
        if (self.attributes == null) self.attributes = nil;

        
        if (!$truthy(opts['$empty?']())) {
          self.$converter().$set_local_variables(Opal.Binding.$new(  function($code) {    return eval($code);  },  ["node", "opts"],  self,  ['asciidoctor-revealjs/converter.rb', 1514]), opts)
        };
        _buf = [];
        _slim_controls1 = $send(self, 'html_tag', ["div", $hash2(["id", "class"], {"id": self.$id(), "class": ["literalblock", self.$role(), (($truthy(self['$option?']("step")) || ($truthy(self['$attr?']("step")))) ? ("fragment") : nil)]}).$merge(self.$data_attrs(self.attributes))], function $$84(){var self = $$84.$$s == null ? this : $$84.$$s, _slim_controls2 = nil, _temple_html_attributeremover1 = nil, _slim_codeattributes1 = nil;
          if (self.document == null) self.document = nil;

          
          _slim_controls2 = [];
          if ($truthy(self['$title?']())) {
            
            _slim_controls2['$<<']("<div class=\"title\">");
            _slim_controls2['$<<'](self.$title());
            _slim_controls2['$<<']("</div>");
          };
          _slim_controls2['$<<']("<div class=\"content\"><pre");
          _temple_html_attributeremover1 = [];
          _slim_codeattributes1 = (($not(self.document['$attr?']("prewrap")) || ($truthy(self['$option?']("nowrap")))) ? ("nowrap") : (nil));
          if ($eqeqeq($$('Array'), _slim_codeattributes1)) {
            
            _slim_codeattributes1 = _slim_codeattributes1.$flatten();
            $send(_slim_codeattributes1, 'map!', [], "to_s".$to_proc());
            $send(_slim_codeattributes1, 'reject!', [], "empty?".$to_proc());
            _temple_html_attributeremover1['$<<'](_slim_codeattributes1.$join(" "));
          } else {
            _temple_html_attributeremover1['$<<'](_slim_codeattributes1)
          };
          _temple_html_attributeremover1 = _temple_html_attributeremover1.$join("");
          if ($not(_temple_html_attributeremover1['$empty?']())) {
            
            _slim_controls2['$<<'](" class=\"");
            _slim_controls2['$<<'](_temple_html_attributeremover1);
            _slim_controls2['$<<']("\"");
          };
          _slim_controls2['$<<'](">");
          _slim_controls2['$<<'](self.$content());
          _slim_controls2['$<<']("</pre></div>");
          return (_slim_controls2 = _slim_controls2.$join(""));}, {$$s: self});
        _buf['$<<'](_slim_controls1);
        return (_buf = _buf.$join(""));}, {$$s: self});
    }, -2);
    
    $def(self, '$convert_section', function $$convert_section(node, opts) {
      var self = this;

      
      if (opts == null) opts = $hash2([], {});
      node.$extend($$('Helpers'));
      return $send(node, 'instance_eval', [], function $$85(){var $a, $b, self = $$85.$$s == null ? this : $$85.$$s, _buf = nil, titleless = nil, title = nil, hide_title = nil, $ret_or_1 = nil, $ret_or_2 = nil, vertical_slides = nil, data_background_image = nil, data_background_size = nil, data_background_repeat = nil, data_background_position = nil, data_background_transition = nil, section_images = nil, bg_image = nil, data_background_video = nil, data_background_color = nil, parent_section_with_vertical_slides = nil, _slim_htag_filter1 = nil;
        if (self.level == null) self.level = nil;

        
        if (!$truthy(opts['$empty?']())) {
          self.$converter().$set_local_variables(Opal.Binding.$new(  function($code) {    return eval($code);  },  ["node", "opts"],  self,  ['asciidoctor-revealjs/converter.rb', 1526]), opts)
        };
        _buf = [];
        titleless = (title = self.$title())['$==']("!");
        hide_title = ($truthy(($ret_or_1 = ($truthy(($ret_or_2 = titleless)) ? ($ret_or_2) : (self['$option?']("notitle"))))) ? ($ret_or_1) : (self['$option?']("conceal")));
        vertical_slides = $send(self, 'find_by', [$hash2(["context"], {"context": "section"})], function $$86(section){
          
          if (section == null) section = nil;
          return section.$level()['$=='](2);});
        $b = nil, $a = $to_ary($b), (data_background_image = ($a[0] == null ? nil : $a[0])), (data_background_size = ($a[1] == null ? nil : $a[1])), (data_background_repeat = ($a[2] == null ? nil : $a[2])), (data_background_position = ($a[3] == null ? nil : $a[3])), (data_background_transition = ($a[4] == null ? nil : $a[4])), $b;
        section_images = $send(self.$blocks(), 'map', [], function $$87(block){var ctx = nil;

          
          if (block == null) block = nil;
          if ($eqeq((ctx = block.$context()), "image")) {
            if ($truthy(["background", "canvas"]['$include?'](block.$attributes()['$[]'](1)))) {
              return block
            } else {
              return []
            }
          } else if ($eqeq(ctx, "section")) {
            return []
          } else if ($truthy(($ret_or_1 = $send(block, 'find_by', [$hash2(["context"], {"context": "image"})], function $$88(image){
            
            if (image == null) image = nil;
            return ["background", "canvas"]['$include?'](image.$attributes()['$[]'](1));})))) {
            return $ret_or_1
          } else {
            return []
          };});
        if ($truthy((bg_image = section_images.$flatten().$first()))) {
          
          data_background_image = self.$image_uri(bg_image.$attr("target"));
          data_background_size = bg_image.$attr("size");
          data_background_repeat = bg_image.$attr("repeat");
          data_background_transition = bg_image.$attr("transition");
          data_background_position = bg_image.$attr("position");
        };
        if ($truthy(self['$attr?']("background-image"))) {
          data_background_image = self.$image_uri(self.$attr("background-image"))
        };
        if ($truthy(self['$attr?']("background-video"))) {
          data_background_video = self.$media_uri(self.$attr("background-video"))
        };
        if ($truthy(self['$attr?']("background-color"))) {
          data_background_color = self.$attr("background-color")
        };
        parent_section_with_vertical_slides = ($truthy(($ret_or_1 = self.level['$=='](1))) ? (vertical_slides['$empty?']()['$!']()) : ($ret_or_1));
        $send(self, 'content_for', ["footnotes"], function $$89(){var self = $$89.$$s == null ? this : $$89.$$s, slide_footnotes = nil;

          
          slide_footnotes = self.$slide_footnotes(self);
          if ((($truthy(self.$document()['$footnotes?']()) && ($not(self.$parent()['$attr?']("nofootnotes")))) && ($not(slide_footnotes['$empty?']())))) {
            
            _buf['$<<']("<div class=\"footnotes\">");
            $send(slide_footnotes, 'each', [], function $$90(footnote){
              
              if (footnote == null) footnote = nil;
              _buf['$<<']("<div class=\"footnote\">");
              _buf['$<<']("" + (footnote.$index()) + ". " + (footnote.$text()));
              return _buf['$<<']("</div>");});
            return _buf['$<<']("</div>");
          } else {
            return nil
          };}, {$$s: self});
        $send(self, 'content_for', ["section"], function $$91(){var self = $$91.$$s == null ? this : $$91.$$s, _slim_codeattributes1 = nil, _temple_html_attributeremover1 = nil, _slim_codeattributes2 = nil, _slim_codeattributes3 = nil, _slim_codeattributes4 = nil, _slim_codeattributes5 = nil, _slim_codeattributes6 = nil, _slim_codeattributes7 = nil, _slim_codeattributes8 = nil, _slim_codeattributes9 = nil, _slim_codeattributes10 = nil, _slim_codeattributes11 = nil, _slim_codeattributes12 = nil, _slim_codeattributes13 = nil, _slim_codeattributes14 = nil, _slim_codeattributes15 = nil, _slim_codeattributes16 = nil, _slim_codeattributes17 = nil, _slim_codeattributes18 = nil, _slim_codeattributes19 = nil, _slim_codeattributes20 = nil, _slim_codeattributes21 = nil, _slim_codeattributes22 = nil, _slim_codeattributes23 = nil, _slim_codeattributes24 = nil, _blocks = nil, _content = nil;

          
          _buf['$<<']("<section");
          _slim_codeattributes1 = ($truthy(titleless) ? (nil) : (self.$id()));
          if ($truthy(_slim_codeattributes1)) {
            if ($eqeq(_slim_codeattributes1, true)) {
              _buf['$<<'](" id")
            } else {
              
              _buf['$<<'](" id=\"");
              _buf['$<<'](_slim_codeattributes1);
              _buf['$<<']("\"");
            }
          };
          _temple_html_attributeremover1 = [];
          _slim_codeattributes2 = self.$roles();
          if ($eqeqeq($$('Array'), _slim_codeattributes2)) {
            
            _slim_codeattributes2 = _slim_codeattributes2.$flatten();
            $send(_slim_codeattributes2, 'map!', [], "to_s".$to_proc());
            $send(_slim_codeattributes2, 'reject!', [], "empty?".$to_proc());
            _temple_html_attributeremover1['$<<'](_slim_codeattributes2.$join(" "));
          } else {
            _temple_html_attributeremover1['$<<'](_slim_codeattributes2)
          };
          _temple_html_attributeremover1 = _temple_html_attributeremover1.$join("");
          if ($not(_temple_html_attributeremover1['$empty?']())) {
            
            _buf['$<<'](" class=\"");
            _buf['$<<'](_temple_html_attributeremover1);
            _buf['$<<']("\"");
          };
          _slim_codeattributes3 = self.$attr("background-gradient");
          if ($truthy(_slim_codeattributes3)) {
            if ($eqeq(_slim_codeattributes3, true)) {
              _buf['$<<'](" data-background-gradient")
            } else {
              
              _buf['$<<'](" data-background-gradient=\"");
              _buf['$<<'](_slim_codeattributes3);
              _buf['$<<']("\"");
            }
          };
          _slim_codeattributes4 = self.$attr("transition");
          if ($truthy(_slim_codeattributes4)) {
            if ($eqeq(_slim_codeattributes4, true)) {
              _buf['$<<'](" data-transition")
            } else {
              
              _buf['$<<'](" data-transition=\"");
              _buf['$<<'](_slim_codeattributes4);
              _buf['$<<']("\"");
            }
          };
          _slim_codeattributes5 = self.$attr("transition-speed");
          if ($truthy(_slim_codeattributes5)) {
            if ($eqeq(_slim_codeattributes5, true)) {
              _buf['$<<'](" data-transition-speed")
            } else {
              
              _buf['$<<'](" data-transition-speed=\"");
              _buf['$<<'](_slim_codeattributes5);
              _buf['$<<']("\"");
            }
          };
          _slim_codeattributes6 = data_background_color;
          if ($truthy(_slim_codeattributes6)) {
            if ($eqeq(_slim_codeattributes6, true)) {
              _buf['$<<'](" data-background-color")
            } else {
              
              _buf['$<<'](" data-background-color=\"");
              _buf['$<<'](_slim_codeattributes6);
              _buf['$<<']("\"");
            }
          };
          _slim_codeattributes7 = data_background_image;
          if ($truthy(_slim_codeattributes7)) {
            if ($eqeq(_slim_codeattributes7, true)) {
              _buf['$<<'](" data-background-image")
            } else {
              
              _buf['$<<'](" data-background-image=\"");
              _buf['$<<'](_slim_codeattributes7);
              _buf['$<<']("\"");
            }
          };
          _slim_codeattributes8 = ($truthy(($ret_or_1 = data_background_size)) ? ($ret_or_1) : (self.$attr("background-size")));
          if ($truthy(_slim_codeattributes8)) {
            if ($eqeq(_slim_codeattributes8, true)) {
              _buf['$<<'](" data-background-size")
            } else {
              
              _buf['$<<'](" data-background-size=\"");
              _buf['$<<'](_slim_codeattributes8);
              _buf['$<<']("\"");
            }
          };
          _slim_codeattributes9 = ($truthy(($ret_or_1 = data_background_repeat)) ? ($ret_or_1) : (self.$attr("background-repeat")));
          if ($truthy(_slim_codeattributes9)) {
            if ($eqeq(_slim_codeattributes9, true)) {
              _buf['$<<'](" data-background-repeat")
            } else {
              
              _buf['$<<'](" data-background-repeat=\"");
              _buf['$<<'](_slim_codeattributes9);
              _buf['$<<']("\"");
            }
          };
          _slim_codeattributes10 = ($truthy(($ret_or_1 = data_background_transition)) ? ($ret_or_1) : (self.$attr("background-transition")));
          if ($truthy(_slim_codeattributes10)) {
            if ($eqeq(_slim_codeattributes10, true)) {
              _buf['$<<'](" data-background-transition")
            } else {
              
              _buf['$<<'](" data-background-transition=\"");
              _buf['$<<'](_slim_codeattributes10);
              _buf['$<<']("\"");
            }
          };
          _slim_codeattributes11 = ($truthy(($ret_or_1 = data_background_position)) ? ($ret_or_1) : (self.$attr("background-position")));
          if ($truthy(_slim_codeattributes11)) {
            if ($eqeq(_slim_codeattributes11, true)) {
              _buf['$<<'](" data-background-position")
            } else {
              
              _buf['$<<'](" data-background-position=\"");
              _buf['$<<'](_slim_codeattributes11);
              _buf['$<<']("\"");
            }
          };
          _slim_codeattributes12 = self.$attr("background-iframe");
          if ($truthy(_slim_codeattributes12)) {
            if ($eqeq(_slim_codeattributes12, true)) {
              _buf['$<<'](" data-background-iframe")
            } else {
              
              _buf['$<<'](" data-background-iframe=\"");
              _buf['$<<'](_slim_codeattributes12);
              _buf['$<<']("\"");
            }
          };
          _slim_codeattributes13 = data_background_video;
          if ($truthy(_slim_codeattributes13)) {
            if ($eqeq(_slim_codeattributes13, true)) {
              _buf['$<<'](" data-background-video")
            } else {
              
              _buf['$<<'](" data-background-video=\"");
              _buf['$<<'](_slim_codeattributes13);
              _buf['$<<']("\"");
            }
          };
          _slim_codeattributes14 = ($truthy(($ret_or_1 = self['$attr?']("background-video-loop"))) ? ($ret_or_1) : (self['$option?']("loop")));
          if ($truthy(_slim_codeattributes14)) {
            if ($eqeq(_slim_codeattributes14, true)) {
              _buf['$<<'](" data-background-video-loop")
            } else {
              
              _buf['$<<'](" data-background-video-loop=\"");
              _buf['$<<'](_slim_codeattributes14);
              _buf['$<<']("\"");
            }
          };
          _slim_codeattributes15 = ($truthy(($ret_or_1 = self['$attr?']("background-video-muted"))) ? ($ret_or_1) : (self['$option?']("muted")));
          if ($truthy(_slim_codeattributes15)) {
            if ($eqeq(_slim_codeattributes15, true)) {
              _buf['$<<'](" data-background-video-muted")
            } else {
              
              _buf['$<<'](" data-background-video-muted=\"");
              _buf['$<<'](_slim_codeattributes15);
              _buf['$<<']("\"");
            }
          };
          _slim_codeattributes16 = self.$attr("background-opacity");
          if ($truthy(_slim_codeattributes16)) {
            if ($eqeq(_slim_codeattributes16, true)) {
              _buf['$<<'](" data-background-opacity")
            } else {
              
              _buf['$<<'](" data-background-opacity=\"");
              _buf['$<<'](_slim_codeattributes16);
              _buf['$<<']("\"");
            }
          };
          _slim_codeattributes17 = self.$attr("autoslide");
          if ($truthy(_slim_codeattributes17)) {
            if ($eqeq(_slim_codeattributes17, true)) {
              _buf['$<<'](" data-autoslide")
            } else {
              
              _buf['$<<'](" data-autoslide=\"");
              _buf['$<<'](_slim_codeattributes17);
              _buf['$<<']("\"");
            }
          };
          _slim_codeattributes18 = self.$attr("state");
          if ($truthy(_slim_codeattributes18)) {
            if ($eqeq(_slim_codeattributes18, true)) {
              _buf['$<<'](" data-state")
            } else {
              
              _buf['$<<'](" data-state=\"");
              _buf['$<<'](_slim_codeattributes18);
              _buf['$<<']("\"");
            }
          };
          _slim_codeattributes19 = ($truthy(($ret_or_1 = self['$attr?']("auto-animate"))) ? ($ret_or_1) : (self['$option?']("auto-animate")));
          if ($truthy(_slim_codeattributes19)) {
            if ($eqeq(_slim_codeattributes19, true)) {
              _buf['$<<'](" data-auto-animate")
            } else {
              
              _buf['$<<'](" data-auto-animate=\"");
              _buf['$<<'](_slim_codeattributes19);
              _buf['$<<']("\"");
            }
          };
          _slim_codeattributes20 = ($truthy(($ret_or_1 = self.$attr("auto-animate-easing"))) ? ($ret_or_1) : (self['$option?']("auto-animate-easing")));
          if ($truthy(_slim_codeattributes20)) {
            if ($eqeq(_slim_codeattributes20, true)) {
              _buf['$<<'](" data-auto-animate-easing")
            } else {
              
              _buf['$<<'](" data-auto-animate-easing=\"");
              _buf['$<<'](_slim_codeattributes20);
              _buf['$<<']("\"");
            }
          };
          _slim_codeattributes21 = ($truthy(($ret_or_1 = self.$attr("auto-animate-unmatched"))) ? ($ret_or_1) : (self['$option?']("auto-animate-unmatched")));
          if ($truthy(_slim_codeattributes21)) {
            if ($eqeq(_slim_codeattributes21, true)) {
              _buf['$<<'](" data-auto-animate-unmatched")
            } else {
              
              _buf['$<<'](" data-auto-animate-unmatched=\"");
              _buf['$<<'](_slim_codeattributes21);
              _buf['$<<']("\"");
            }
          };
          _slim_codeattributes22 = ($truthy(($ret_or_1 = self.$attr("auto-animate-duration"))) ? ($ret_or_1) : (self['$option?']("auto-animate-duration")));
          if ($truthy(_slim_codeattributes22)) {
            if ($eqeq(_slim_codeattributes22, true)) {
              _buf['$<<'](" data-auto-animate-duration")
            } else {
              
              _buf['$<<'](" data-auto-animate-duration=\"");
              _buf['$<<'](_slim_codeattributes22);
              _buf['$<<']("\"");
            }
          };
          _slim_codeattributes23 = self.$attr("auto-animate-id");
          if ($truthy(_slim_codeattributes23)) {
            if ($eqeq(_slim_codeattributes23, true)) {
              _buf['$<<'](" data-auto-animate-id")
            } else {
              
              _buf['$<<'](" data-auto-animate-id=\"");
              _buf['$<<'](_slim_codeattributes23);
              _buf['$<<']("\"");
            }
          };
          _slim_codeattributes24 = ($truthy(($ret_or_1 = self['$attr?']("auto-animate-restart"))) ? ($ret_or_1) : (self['$option?']("auto-animate-restart")));
          if ($truthy(_slim_codeattributes24)) {
            if ($eqeq(_slim_codeattributes24, true)) {
              _buf['$<<'](" data-auto-animate-restart")
            } else {
              
              _buf['$<<'](" data-auto-animate-restart=\"");
              _buf['$<<'](_slim_codeattributes24);
              _buf['$<<']("\"");
            }
          };
          _buf['$<<'](">");
          if (!$truthy(hide_title)) {
            
            _buf['$<<']("<h2>");
            _buf['$<<'](self.$section_title());
            _buf['$<<']("</h2>");
          };
          if ($truthy(parent_section_with_vertical_slides)) {
            
            if (!$truthy((_blocks = $rb_minus(self.$blocks(), vertical_slides))['$empty?']())) {
              
              _buf['$<<']("<div class=\"slide-content\">");
              $send(_blocks, 'each', [], function $$92(block){
                
                if (block == null) block = nil;
                return _buf['$<<'](block.$convert());});
              _buf['$<<']("</div>");
            };
            self.$yield_content("footnotes");
          } else {
            
            if (!$truthy((_content = self.$content().$chomp())['$empty?']())) {
              
              _buf['$<<']("<div class=\"slide-content\">");
              _buf['$<<'](_content);
              _buf['$<<']("</div>");
            };
            self.$yield_content("footnotes");
          };
          self.$clear_slide_footnotes();
          return _buf['$<<']("</section>");}, {$$s: self});
        if ($truthy(parent_section_with_vertical_slides)) {
          
          _buf['$<<']("<section>");
          self.$yield_content("section");
          $send(vertical_slides, 'each', [], function $$93(subsection){
            
            if (subsection == null) subsection = nil;
            return _buf['$<<'](subsection.$convert());});
          _buf['$<<']("</section>");
        } else if ($truthy($rb_ge(self.level, 3))) {
          
          _slim_htag_filter1 = self.level.$to_s();
          _buf['$<<']("<h");
          _buf['$<<'](_slim_htag_filter1);
          _buf['$<<'](">");
          _buf['$<<'](title);
          _buf['$<<']("</h");
          _buf['$<<'](_slim_htag_filter1);
          _buf['$<<'](">");
          _buf['$<<'](self.$content().$chomp());
        } else {
          self.$yield_content("section")
        };
        return (_buf = _buf.$join(""));}, {$$s: self});
    }, -2);
    
    $def(self, '$convert_table', function $$convert_table(node, opts) {
      var self = this;

      
      if (opts == null) opts = $hash2([], {});
      node.$extend($$('Helpers'));
      return $send(node, 'instance_eval', [], function $$94(){var self = $$94.$$s == null ? this : $$94.$$s, _buf = nil, classes = nil, styles = nil, _slim_controls1 = nil;
        if (self.id == null) self.id = nil;
        if (self.attributes == null) self.attributes = nil;

        
        if (!$truthy(opts['$empty?']())) {
          self.$converter().$set_local_variables(Opal.Binding.$new(  function($code) {    return eval($code);  },  ["node", "opts"],  self,  ['asciidoctor-revealjs/converter.rb', 1640]), opts)
        };
        _buf = [];
        classes = ["tableblock", "frame-" + (self.$attr("frame", "all")), "grid-" + (self.$attr("grid", "all")), self.$role(), (($truthy(self['$option?']("step")) || ($truthy(self['$attr?']("step")))) ? ("fragment") : nil)];
        styles = [($truthy(self['$option?']("autowidth")) ? (nil) : ("width:" + (self.$attr("tablepcwidth")) + "%")), ($truthy(self['$attr?']("float")) ? ("float:" + (self.$attr("float"))) : nil)].$compact().$join("; ");
        _slim_controls1 = $send(self, 'html_tag', ["table", $hash2(["id", "class", "style"], {"id": self.id, "class": classes, "style": styles}).$merge(self.$data_attrs(self.attributes))], function $$95(){var self = $$95.$$s == null ? this : $$95.$$s, _slim_controls2 = nil;
          if (self.columns == null) self.columns = nil;

          
          _slim_controls2 = [];
          if ($truthy(self['$title?']())) {
            
            _slim_controls2['$<<']("<caption class=\"title\">");
            _slim_controls2['$<<'](self.$captioned_title());
            _slim_controls2['$<<']("</caption>");
          };
          if (!$truthy(self.$attr("rowcount")['$zero?']())) {
            
            _slim_controls2['$<<']("<colgroup>");
            if ($truthy(self['$option?']("autowidth"))) {
              $send(self.columns, 'each', [], function $$96(){
                return _slim_controls2['$<<']("<col>")})
            } else {
              $send(self.columns, 'each', [], function $$97(col){
                
                if (col == null) col = nil;
                _slim_controls2['$<<']("<col style=\"width:");
                _slim_controls2['$<<'](col.$attr("colpcwidth"));
                return _slim_controls2['$<<']("%\">");})
            };
            _slim_controls2['$<<']("</colgroup>");
            $send($send(["head", "foot", "body"], 'select', [], function $$98(tblsec){var self = $$98.$$s == null ? this : $$98.$$s;
              if (self.rows == null) self.rows = nil;

              
              if (tblsec == null) tblsec = nil;
              return self.rows['$[]'](tblsec)['$empty?']()['$!']();}, {$$s: self}), 'each', [], function $$99(tblsec){var self = $$99.$$s == null ? this : $$99.$$s;
              if (self.rows == null) self.rows = nil;

              
              if (tblsec == null) tblsec = nil;
              _slim_controls2['$<<']("<t");
              _slim_controls2['$<<'](tblsec);
              _slim_controls2['$<<'](">");
              return $send(self.rows['$[]'](tblsec), 'each', [], function $$100(row){var self = $$100.$$s == null ? this : $$100.$$s;

                
                if (row == null) row = nil;
                _slim_controls2['$<<']("<tr>");
                $send(row, 'each', [], function $$101(cell){var self = $$101.$$s == null ? this : $$101.$$s, cell_content = nil, _slim_controls3 = nil;
                  if (self.document == null) self.document = nil;

                  
                  if (cell == null) cell = nil;
                  if ($eqeq(tblsec, "head")) {
                    cell_content = cell.$text()
                  } else 
                  switch (cell.$style()) {
                    case "literal":
                      cell_content = cell.$text()
                      break;
                    default:
                      cell_content = cell.$content()
                  };
                  _slim_controls3 = $send(self, 'html_tag', [(($eqeq(tblsec, "head") || ($eqeq(cell.$style(), "header"))) ? ("th") : ("td")), $hash2(["class", "colspan", "rowspan", "style"], {"class": ["tableblock", "halign-" + (cell.$attr("halign")), "valign-" + (cell.$attr("valign"))], "colspan": cell.$colspan(), "rowspan": cell.$rowspan(), "style": ($truthy(self.document['$attr?']("cellbgcolor")) ? ("background-color:" + (self.document.$attr("cellbgcolor")) + ";") : (nil))})], function $$102(){var _slim_controls4 = nil;

                    
                    _slim_controls4 = [];
                    if ($eqeq(tblsec, "head")) {
                      _slim_controls4['$<<'](cell_content)
                    } else 
                    switch (cell.$style()) {
                      case "asciidoc":
                        
                        _slim_controls4['$<<']("<div>");
                        _slim_controls4['$<<'](cell_content);
                        _slim_controls4['$<<']("</div>");
                        break;
                      case "literal":
                        
                        _slim_controls4['$<<']("<div class=\"literal\"><pre>");
                        _slim_controls4['$<<'](cell_content);
                        _slim_controls4['$<<']("</pre></div>");
                        break;
                      case "header":
                        $send(cell_content, 'each', [], function $$103(text){
                          
                          if (text == null) text = nil;
                          _slim_controls4['$<<']("<p class=\"tableblock header\">");
                          _slim_controls4['$<<'](text);
                          return _slim_controls4['$<<']("</p>");})
                        break;
                      default:
                        $send(cell_content, 'each', [], function $$104(text){
                          
                          if (text == null) text = nil;
                          _slim_controls4['$<<']("<p class=\"tableblock\">");
                          _slim_controls4['$<<'](text);
                          return _slim_controls4['$<<']("</p>");})
                    };
                    return (_slim_controls4 = _slim_controls4.$join(""));});
                  return _slim_controls2['$<<'](_slim_controls3);}, {$$s: self});
                return _slim_controls2['$<<']("</tr>");}, {$$s: self});}, {$$s: self});
          };
          return (_slim_controls2 = _slim_controls2.$join(""));}, {$$s: self});
        _buf['$<<'](_slim_controls1);
        return (_buf = _buf.$join(""));}, {$$s: self});
    }, -2);
    
    $def(self, '$convert_stretch_nested_elements', function $$convert_stretch_nested_elements(node, opts) {
      var self = this;

      
      if (opts == null) opts = $hash2([], {});
      node.$extend($$('Helpers'));
      return $send(node, 'instance_eval', [], function $$105(){var self = $$105.$$s == null ? this : $$105.$$s, _buf = nil;

        
        if (!$truthy(opts['$empty?']())) {
          self.$converter().$set_local_variables(Opal.Binding.$new(  function($code) {    return eval($code);  },  ["node", "opts"],  self,  ['asciidoctor-revealjs/converter.rb', 1694]), opts)
        };
        _buf = [];
        _buf['$<<']("<script>var dom = {};\ndom.slides = document.querySelector('.reveal .slides');\n\nfunction getRemainingHeight(element, slideElement, height) {\n  height = height || 0;\n  if (element) {\n    var newHeight, oldHeight = element.style.height;\n    // Change the .stretch element height to 0 in order find the height of all\n    // the other elements\n    element.style.height = '0px';\n    // In Overview mode, the parent (.slide) height is set of 700px.\n    // Restore it temporarily to its natural height.\n    slideElement.style.height = 'auto';\n    newHeight = height - slideElement.offsetHeight;\n    // Restore the old height, just in case\n    element.style.height = oldHeight + 'px';\n    // Clear the parent (.slide) height. .removeProperty works in IE9+\n    slideElement.style.removeProperty('height');\n    return newHeight;\n  }\n  return height;\n}\n\nfunction layoutSlideContents(width, height) {\n  // Handle sizing of elements with the 'stretch' class\n  toArray(dom.slides.querySelectorAll('section .stretch')).forEach(function (element) {\n    // Determine how much vertical space we can use\n    var limit = 5; // hard limit\n    var parent = element.parentNode;\n    while (parent.nodeName !== 'SECTION' && limit > 0) {\n      parent = parent.parentNode;\n      limit--;\n    }\n    if (limit === 0) {\n      // unable to find parent, aborting!\n      return;\n    }\n    var remainingHeight = getRemainingHeight(element, parent, height);\n    // Consider the aspect ratio of media elements\n    if (/(img|video)/gi.test(element.nodeName)) {\n      var nw = element.naturalWidth || element.videoWidth, nh = element.naturalHeight || element.videoHeight;\n      var es = Math.min(width / nw, remainingHeight / nh);\n      element.style.width = (nw * es) + 'px';\n      element.style.height = (nh * es) + 'px';\n    } else {\n      element.style.width = width + 'px';\n      element.style.height = remainingHeight + 'px';\n    }\n  });\n}\n\nfunction toArray(o) {\n  return Array.prototype.slice.call(o);\n}\n\nReveal.addEventListener('slidechanged', function () {\n  layoutSlideContents(");
        _buf['$<<'](self.$attr("revealjs_width", 960));
        _buf['$<<'](", ");
        _buf['$<<'](self.$attr("revealjs_height", 700));
        _buf['$<<'](")\n});\nReveal.addEventListener('ready', function () {\n  layoutSlideContents(");
        _buf['$<<'](self.$attr("revealjs_width", 960));
        _buf['$<<'](", ");
        _buf['$<<'](self.$attr("revealjs_height", 700));
        _buf['$<<'](")\n});\nReveal.addEventListener('resize', function () {\n  layoutSlideContents(");
        _buf['$<<'](self.$attr("revealjs_width", 960));
        _buf['$<<'](", ");
        _buf['$<<'](self.$attr("revealjs_height", 700));
        _buf['$<<'](")\n});</script>");
        return (_buf = _buf.$join(""));}, {$$s: self});
    }, -2);
    
    $def(self, '$convert_olist', function $$convert_olist(node, opts) {
      var self = this;

      
      if (opts == null) opts = $hash2([], {});
      node.$extend($$('Helpers'));
      return $send(node, 'instance_eval', [], function $$106(){var self = $$106.$$s == null ? this : $$106.$$s, _buf = nil, _slim_controls1 = nil;
        if (self.id == null) self.id = nil;
        if (self.style == null) self.style = nil;
        if (self.attributes == null) self.attributes = nil;

        
        if (!$truthy(opts['$empty?']())) {
          self.$converter().$set_local_variables(Opal.Binding.$new(  function($code) {    return eval($code);  },  ["node", "opts"],  self,  ['asciidoctor-revealjs/converter.rb', 1767]), opts)
        };
        _buf = [];
        _slim_controls1 = $send(self, 'html_tag', ["div", $hash2(["id", "class"], {"id": self.id, "class": ["olist", self.style, self.$role()]}).$merge(self.$data_attrs(self.attributes))], function $$107(){var self = $$107.$$s == null ? this : $$107.$$s, _slim_controls2 = nil, _temple_html_attributeremover1 = nil, _slim_codeattributes1 = nil, _slim_codeattributes2 = nil, _slim_codeattributes3 = nil;
          if (self.style == null) self.style = nil;

          
          _slim_controls2 = [];
          if ($truthy(self['$title?']())) {
            
            _slim_controls2['$<<']("<div class=\"title\">");
            _slim_controls2['$<<'](self.$title());
            _slim_controls2['$<<']("</div>");
          };
          _slim_controls2['$<<']("<ol");
          _temple_html_attributeremover1 = [];
          _slim_codeattributes1 = self.style;
          if ($eqeqeq($$('Array'), _slim_codeattributes1)) {
            
            _slim_codeattributes1 = _slim_codeattributes1.$flatten();
            $send(_slim_codeattributes1, 'map!', [], "to_s".$to_proc());
            $send(_slim_codeattributes1, 'reject!', [], "empty?".$to_proc());
            _temple_html_attributeremover1['$<<'](_slim_codeattributes1.$join(" "));
          } else {
            _temple_html_attributeremover1['$<<'](_slim_codeattributes1)
          };
          _temple_html_attributeremover1 = _temple_html_attributeremover1.$join("");
          if ($not(_temple_html_attributeremover1['$empty?']())) {
            
            _slim_controls2['$<<'](" class=\"");
            _slim_controls2['$<<'](_temple_html_attributeremover1);
            _slim_controls2['$<<']("\"");
          };
          _slim_codeattributes2 = self.$attr("start");
          if ($truthy(_slim_codeattributes2)) {
            if ($eqeq(_slim_codeattributes2, true)) {
              _slim_controls2['$<<'](" start")
            } else {
              
              _slim_controls2['$<<'](" start=\"");
              _slim_controls2['$<<'](_slim_codeattributes2);
              _slim_controls2['$<<']("\"");
            }
          };
          _slim_codeattributes3 = self.$list_marker_keyword();
          if ($truthy(_slim_codeattributes3)) {
            if ($eqeq(_slim_codeattributes3, true)) {
              _slim_controls2['$<<'](" type")
            } else {
              
              _slim_controls2['$<<'](" type=\"");
              _slim_controls2['$<<'](_slim_codeattributes3);
              _slim_controls2['$<<']("\"");
            }
          };
          _slim_controls2['$<<'](">");
          $send(self.$items(), 'each', [], function $$108(item){var self = $$108.$$s == null ? this : $$108.$$s, _temple_html_attributeremover2 = nil, _slim_codeattributes4 = nil;

            
            if (item == null) item = nil;
            _slim_controls2['$<<']("<li");
            _temple_html_attributeremover2 = [];
            _slim_codeattributes4 = ((($truthy(self['$option?']("step")) || ($truthy(self['$has_role?']("step")))) || ($truthy(self['$attr?']("step")))) ? ("fragment") : nil);
            if ($eqeqeq($$('Array'), _slim_codeattributes4)) {
              
              _slim_codeattributes4 = _slim_codeattributes4.$flatten();
              $send(_slim_codeattributes4, 'map!', [], "to_s".$to_proc());
              $send(_slim_codeattributes4, 'reject!', [], "empty?".$to_proc());
              _temple_html_attributeremover2['$<<'](_slim_codeattributes4.$join(" "));
            } else {
              _temple_html_attributeremover2['$<<'](_slim_codeattributes4)
            };
            _temple_html_attributeremover2 = _temple_html_attributeremover2.$join("");
            if ($not(_temple_html_attributeremover2['$empty?']())) {
              
              _slim_controls2['$<<'](" class=\"");
              _slim_controls2['$<<'](_temple_html_attributeremover2);
              _slim_controls2['$<<']("\"");
            };
            _slim_controls2['$<<']("><p>");
            _slim_controls2['$<<'](item.$text());
            _slim_controls2['$<<']("</p>");
            if ($truthy(item['$blocks?']())) {
              _slim_controls2['$<<'](item.$content())
            };
            return _slim_controls2['$<<']("</li>");}, {$$s: self});
          _slim_controls2['$<<']("</ol>");
          return (_slim_controls2 = _slim_controls2.$join(""));}, {$$s: self});
        _buf['$<<'](_slim_controls1);
        return (_buf = _buf.$join(""));}, {$$s: self});
    }, -2);
    
    $def(self, '$convert_audio', function $$convert_audio(node, opts) {
      var self = this;

      
      if (opts == null) opts = $hash2([], {});
      node.$extend($$('Helpers'));
      return $send(node, 'instance_eval', [], function $$109(){var self = $$109.$$s == null ? this : $$109.$$s, _buf = nil, _slim_controls1 = nil;
        if (self.id == null) self.id = nil;
        if (self.style == null) self.style = nil;
        if (self.attributes == null) self.attributes = nil;

        
        if (!$truthy(opts['$empty?']())) {
          self.$converter().$set_local_variables(Opal.Binding.$new(  function($code) {    return eval($code);  },  ["node", "opts"],  self,  ['asciidoctor-revealjs/converter.rb', 1784]), opts)
        };
        _buf = [];
        _slim_controls1 = $send(self, 'html_tag', ["div", $hash2(["id", "class"], {"id": self.id, "class": ["audioblock", self.style, self.$role()]}).$merge(self.$data_attrs(self.attributes))], function $$110(){var self = $$110.$$s == null ? this : $$110.$$s, _slim_controls2 = nil, _slim_codeattributes1 = nil, _slim_codeattributes2 = nil, _slim_codeattributes3 = nil, _slim_codeattributes4 = nil;

          
          _slim_controls2 = [];
          if ($truthy(self['$title?']())) {
            
            _slim_controls2['$<<']("<div class=\"title\">");
            _slim_controls2['$<<'](self.$captioned_title());
            _slim_controls2['$<<']("</div>");
          };
          _slim_controls2['$<<']("<div class=\"content\"><audio");
          _slim_codeattributes1 = self.$media_uri(self.$attr("target"));
          if ($truthy(_slim_codeattributes1)) {
            if ($eqeq(_slim_codeattributes1, true)) {
              _slim_controls2['$<<'](" src")
            } else {
              
              _slim_controls2['$<<'](" src=\"");
              _slim_controls2['$<<'](_slim_codeattributes1);
              _slim_controls2['$<<']("\"");
            }
          };
          _slim_codeattributes2 = self['$option?']("autoplay");
          if ($truthy(_slim_codeattributes2)) {
            if ($eqeq(_slim_codeattributes2, true)) {
              _slim_controls2['$<<'](" autoplay")
            } else {
              
              _slim_controls2['$<<'](" autoplay=\"");
              _slim_controls2['$<<'](_slim_codeattributes2);
              _slim_controls2['$<<']("\"");
            }
          };
          _slim_codeattributes3 = self['$option?']("nocontrols")['$!']();
          if ($truthy(_slim_codeattributes3)) {
            if ($eqeq(_slim_codeattributes3, true)) {
              _slim_controls2['$<<'](" controls")
            } else {
              
              _slim_controls2['$<<'](" controls=\"");
              _slim_controls2['$<<'](_slim_codeattributes3);
              _slim_controls2['$<<']("\"");
            }
          };
          _slim_codeattributes4 = self['$option?']("loop");
          if ($truthy(_slim_codeattributes4)) {
            if ($eqeq(_slim_codeattributes4, true)) {
              _slim_controls2['$<<'](" loop")
            } else {
              
              _slim_controls2['$<<'](" loop=\"");
              _slim_controls2['$<<'](_slim_codeattributes4);
              _slim_controls2['$<<']("\"");
            }
          };
          _slim_controls2['$<<'](">Your browser does not support the audio tag.</audio></div>");
          return (_slim_controls2 = _slim_controls2.$join(""));}, {$$s: self});
        _buf['$<<'](_slim_controls1);
        return (_buf = _buf.$join(""));}, {$$s: self});
    }, -2);
    
    $def(self, '$convert_image', function $$convert_image(node, opts) {
      var self = this;

      
      if (opts == null) opts = $hash2([], {});
      node.$extend($$('Helpers'));
      return $send(node, 'instance_eval', [], function $$111(){var self = $$111.$$s == null ? this : $$111.$$s, _buf = nil, inline_style = nil, _slim_controls1 = nil;
        if (self.id == null) self.id = nil;
        if (self.attributes == null) self.attributes = nil;

        
        if (!$truthy(opts['$empty?']())) {
          self.$converter().$set_local_variables(Opal.Binding.$new(  function($code) {    return eval($code);  },  ["node", "opts"],  self,  ['asciidoctor-revealjs/converter.rb', 1798]), opts)
        };
        _buf = [];
        if (!($eqeq(self.$attributes()['$[]'](1), "background") || ($eqeq(self.$attributes()['$[]'](1), "canvas")))) {
          
          inline_style = [($truthy(self['$attr?']("align")) ? ("text-align: " + (self.$attr("align"))) : nil), ($truthy(self['$attr?']("float")) ? ("float: " + (self.$attr("float"))) : nil)].$compact().$join("; ");
          _slim_controls1 = $send(self, 'html_tag', ["div", $hash2(["id", "class", "style"], {"id": self.id, "class": ["imageblock", self.$role(), (($truthy(self['$option?']("step")) || ($truthy(self['$attr?']("step")))) ? ("fragment") : nil)], "style": inline_style}).$merge(self.$data_attrs(self.attributes))], function $$112(){var self = $$112.$$s == null ? this : $$112.$$s, _slim_controls2 = nil;

            
            _slim_controls2 = [];
            _slim_controls2['$<<'](self.$convert_image());
            return (_slim_controls2 = _slim_controls2.$join(""));}, {$$s: self});
          _buf['$<<'](_slim_controls1);
          if ($truthy(self['$title?']())) {
            
            _buf['$<<']("<div class=\"title\">");
            _buf['$<<'](self.$captioned_title());
            _buf['$<<']("</div>");
          };
        };
        return (_buf = _buf.$join(""));}, {$$s: self});
    }, -2);
    
    $def(self, '$convert_inline_footnote', function $$convert_inline_footnote(node, opts) {
      var self = this;

      
      if (opts == null) opts = $hash2([], {});
      node.$extend($$('Helpers'));
      return $send(node, 'instance_eval', [], function $$113(){var self = $$113.$$s == null ? this : $$113.$$s, _buf = nil, footnote = nil, index = nil, id = nil, _slim_controls1 = nil, _slim_controls3 = nil;
        if (self.type == null) self.type = nil;

        
        if (!$truthy(opts['$empty?']())) {
          self.$converter().$set_local_variables(Opal.Binding.$new(  function($code) {    return eval($code);  },  ["node", "opts"],  self,  ['asciidoctor-revealjs/converter.rb', 1812]), opts)
        };
        _buf = [];
        footnote = self.$slide_footnote(self);
        index = footnote.$attr("index");
        id = footnote.$id();
        if ($eqeq(self.type, "xref")) {
          
          _slim_controls1 = $send(self, 'html_tag', ["sup", $hash2(["class"], {"class": ["footnoteref"]}).$merge(self.$data_attrs(footnote.$attributes()))], function $$114(){var _slim_controls2 = nil;

            
            _slim_controls2 = [];
            _slim_controls2['$<<']("[<span class=\"footnote\" title=\"View footnote.\">");
            _slim_controls2['$<<'](index);
            _slim_controls2['$<<']("</span>]");
            return (_slim_controls2 = _slim_controls2.$join(""));});
          _buf['$<<'](_slim_controls1);
        } else {
          
          _slim_controls3 = $send(self, 'html_tag', ["sup", $hash2(["id", "class"], {"id": ($truthy(id) ? ("_footnote_" + (id)) : nil), "class": ["footnote"]}).$merge(self.$data_attrs(footnote.$attributes()))], function $$115(){var _slim_controls4 = nil;

            
            _slim_controls4 = [];
            _slim_controls4['$<<']("[<span class=\"footnote\" title=\"View footnote.\">");
            _slim_controls4['$<<'](index);
            _slim_controls4['$<<']("</span>]");
            return (_slim_controls4 = _slim_controls4.$join(""));});
          _buf['$<<'](_slim_controls3);
        };
        return (_buf = _buf.$join(""));}, {$$s: self});
    }, -2);
    
    $def(self, '$convert_notes', function $$convert_notes(node, opts) {
      var self = this;

      
      if (opts == null) opts = $hash2([], {});
      node.$extend($$('Helpers'));
      return $send(node, 'instance_eval', [], function $$116(){var self = $$116.$$s == null ? this : $$116.$$s, _buf = nil;

        
        if (!$truthy(opts['$empty?']())) {
          self.$converter().$set_local_variables(Opal.Binding.$new(  function($code) {    return eval($code);  },  ["node", "opts"],  self,  ['asciidoctor-revealjs/converter.rb', 1833]), opts)
        };
        _buf = [];
        _buf['$<<']("<aside class=\"notes\">");
        _buf['$<<'](self.$resolve_content());
        _buf['$<<']("</aside>");
        return (_buf = _buf.$join(""));}, {$$s: self});
    }, -2);
    
    $def(self, '$convert_inline_image', function $$convert_inline_image(node, opts) {
      var self = this;

      
      if (opts == null) opts = $hash2([], {});
      node.$extend($$('Helpers'));
      return $send(node, 'instance_eval', [], function $$117(){var self = $$117.$$s == null ? this : $$117.$$s, _buf = nil, _slim_controls1 = nil;
        if (self.type == null) self.type = nil;
        if (self.attributes == null) self.attributes = nil;

        
        if (!$truthy(opts['$empty?']())) {
          self.$converter().$set_local_variables(Opal.Binding.$new(  function($code) {    return eval($code);  },  ["node", "opts"],  self,  ['asciidoctor-revealjs/converter.rb', 1842]), opts)
        };
        _buf = [];
        _slim_controls1 = $send(self, 'html_tag', ["span", $hash2(["class", "style"], {"class": [self.type, self.$role(), (($truthy(self['$option?']("step")) || ($truthy(self['$attr?']("step")))) ? ("fragment") : nil)], "style": ($truthy(self['$attr?']("float")) ? ("float: " + (self.$attr("float"))) : nil)}).$merge(self.$data_attrs(self.attributes))], function $$118(){var self = $$118.$$s == null ? this : $$118.$$s, _slim_controls2 = nil;

          
          _slim_controls2 = [];
          _slim_controls2['$<<'](self.$convert_inline_image());
          return (_slim_controls2 = _slim_controls2.$join(""));}, {$$s: self});
        _buf['$<<'](_slim_controls1);
        return (_buf = _buf.$join(""));}, {$$s: self});
    }, -2);
    return $def(self, '$set_local_variables', function $$set_local_variables(binding, vars) {
      
      return $send(vars, 'each', [], function $$119(key, val){
        
        if (key == null) key = nil;
        if (val == null) val = nil;
        return binding.$local_variable_set(key.$to_sym(), val);})
    });
  })($$$($$('Asciidoctor'), 'Revealjs'), $$$($$$($$$('Asciidoctor'), 'Converter'), 'Base'), $nesting);
};

Opal.modules["asciidoctor-revealjs/version"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $module = Opal.module, $const_set = Opal.const_set, $nesting = [], nil = Opal.nil;

  return (function($base, $parent_nesting) {
    var self = $module($base, 'Asciidoctor');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Revealjs');

      var $nesting = [self].concat($parent_nesting);

      return $const_set($nesting[0], 'VERSION', "5.1.0")
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.modules["asciidoctor-revealjs/highlightjs"] = function(Opal) {/* Generated by Opal 1.7.3 */
  var $module = Opal.module, $klass = Opal.klass, $const_set = Opal.const_set, $slice = Opal.slice, $send2 = Opal.send2, $find_super = Opal.find_super, $to_a = Opal.to_a, $def = Opal.def, $send = Opal.send, $hash2 = Opal.hash2, $truthy = Opal.truthy, $eqeq = Opal.eqeq, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('register_for,join,collect,split,[],attributes,resolve_lines_to_highlight,content,merge,proc,[]=,attr,option?,key?,_convert_highlight_to_revealjs,==,attr?,map,lstrip');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Asciidoctor');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Revealjs');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'SyntaxHighlighter');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

        return (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'HighlightJsAdapter');

          var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

          
          self.$register_for("highlightjs", "highlight.js");
          $const_set($nesting[0], 'HIGHLIGHT_JS_VERSION', "10.7.3");
          
          $def(self, '$initialize', function $$initialize($a) {
            var $post_args, args, $yield = $$initialize.$$p || nil, self = this;

            $$initialize.$$p = null;
            
            $post_args = $slice(arguments);
            args = $post_args;
            $send2(self, $find_super(self, 'initialize', $$initialize, false, true), 'initialize', $to_a(args), $yield);
            return (self.name = (self.pre_class = "highlightjs"));
          }, -1);
          
          $def(self, '$_convert_highlight_to_revealjs', function $$_convert_highlight_to_revealjs(node) {
            
            return $send(node.$attributes()['$[]']("highlight").$split("|"), 'collect', [], function $$1(linenums){
              
              if (linenums == null) linenums = nil;
              return node.$resolve_lines_to_highlight(node.$content(), linenums).$join(",");}).$join("|")
          });
          
          $def(self, '$format', function $$format(node, lang, opts) {
            var $yield = $$format.$$p || nil, self = this;

            $$format.$$p = null;
            return $send2(self, $find_super(self, 'format', $$format, false, true), 'format', [node, lang, opts.$merge($hash2(["transform"], {"transform": $send(self, 'proc', [], function $$2(pre, code){var $a, self = $$2.$$s == null ? this : $$2.$$s, $ret_or_1 = nil, id = nil;

              
              if (pre == null) pre = nil;
              if (code == null) code = nil;
              code['$[]=']("class", "language-" + (($truthy(($ret_or_1 = lang)) ? ($ret_or_1) : ("none"))) + " hljs");
              code['$[]=']("data-noescape", true);
              if ($truthy((id = node.$attr("data-id")))) {
                pre['$[]=']("data-id", id)
              };
              if ($truthy(node['$option?']("trim"))) {
                code['$[]=']("data-trim", "")
              };
              if ($truthy(node.$attributes()['$key?']("highlight"))) {
                return ($a = ["data-line-numbers", self.$_convert_highlight_to_revealjs(node)], $send(code, '[]=', $a), $a[$a.length - 1])
              } else if ($truthy(node.$attributes()['$key?']("linenums"))) {
                return ($a = ["data-line-numbers", ""], $send(code, '[]=', $a), $a[$a.length - 1])
              } else {
                return nil
              };}, {$$s: self})}))], null)
          });
          
          $def(self, '$docinfo?', function $HighlightJsAdapter_docinfo$ques$3(location) {
            
            return location['$==']("footer")
          });
          
          $def(self, '$docinfo', function $$docinfo(location, doc, opts) {
            var revealjsdir = nil, theme_href = nil, base_url = nil;

            
            if (($eqeq($$('RUBY_ENGINE'), "opal") && ($eqeq($$('JAVASCRIPT_PLATFORM'), "node")))) {
              revealjsdir = doc.$attr("revealjsdir", "node_modules/reveal.js")
            } else {
              revealjsdir = doc.$attr("revealjsdir", "reveal.js")
            };
            if ($truthy(doc['$attr?']("highlightjs-theme"))) {
              theme_href = doc.$attr("highlightjs-theme")
            } else {
              theme_href = "" + (revealjsdir) + "/plugin/highlight/monokai.css"
            };
            base_url = doc.$attr("highlightjsdir", "" + (opts['$[]']("cdn_base_url")) + "/highlight.js/" + ($$('HIGHLIGHT_JS_VERSION')));
            return "<link rel=\"stylesheet\" href=\"" + (theme_href) + "\"" + (opts['$[]']("self_closing_tag_slash")) + ">\n" + "<script src=\"" + (base_url) + "/highlight.min.js\"></script>\n" + (($truthy(doc['$attr?']("highlightjs-languages")) ? ($send(doc.$attr("highlightjs-languages").$split(","), 'map', [], function $$4(lang){
              
              if (lang == null) lang = nil;
              return "<script src=\"" + (base_url) + "/languages/" + (lang.$lstrip()) + ".min.js\"></script>\n";}).$join()) : (""))) + "\n" + "<script>\n" + ($$('HIGHLIGHT_PLUGIN_SOURCE')) + "\n" + "hljs.configure({\n" + "  ignoreUnescapedHTML: true,\n" + "});\n" + "hljs.highlightAll();\n" + "</script>";
          });
          return $const_set($nesting[0], 'HIGHLIGHT_PLUGIN_SOURCE', "\n" + "/* highlightjs-line-numbers.js 2.6.0 | (C) 2018 Yauheni Pakala | MIT License | github.com/wcoder/highlightjs-line-numbers.js */\n" + "/* Edited by Hakim for reveal.js; removed async timeout */\n" + "!function(n,e){\"use strict\";function t(){var n=e.createElement(\"style\");n.type=\"text/css\",n.innerHTML=g(\".{0}{border-collapse:collapse}.{0} td{padding:0}.{1}:before{content:attr({2})}\",[v,L,b]),e.getElementsByTagName(\"head\")[0].appendChild(n)}function r(t){\"interactive\"===e.readyState||\"complete\"===e.readyState?i(t):n.addEventListener(\"DOMContentLoaded\",function(){i(t)})}function i(t){try{var r=e.querySelectorAll(\"code.hljs,code.nohighlight\");for(var i in r)r.hasOwnProperty(i)&&l(r[i],t)}catch(o){n.console.error(\"LineNumbers error: \",o)}}function l(n,e){\"object\"==typeof n&&f(function(){n.innerHTML=s(n,e)})}function o(n,e){if(\"string\"==typeof n){var t=document.createElement(\"code\");return t.innerHTML=n,s(t,e)}}function s(n,e){e=e||{singleLine:!1};var t=e.singleLine?0:1;return c(n),a(n.innerHTML,t)}function a(n,e){var t=u(n);if(\"\"===t[t.length-1].trim()&&t.pop(),t.length>e){for(var r=\"\",i=0,l=t.length;i<l;i++)r+=g('<tr><td class=\"{0}\"><div class=\"{1} {2}\" {3}=\"{5}\"></div></td><td class=\"{4}\"><div class=\"{1}\">{6}</div></td></tr>',[j,m,L,b,p,i+1,t[i].length>0?t[i]:\" \"]);return g('<table class=\"{0}\">{1}</table>',[v,r])}return n}function c(n){var e=n.childNodes;for(var t in e)if(e.hasOwnProperty(t)){var r=e[t];h(r.textContent)>0&&(r.childNodes.length>0?c(r):d(r.parentNode))}}function d(n){var e=n.className;if(/hljs-/.test(e)){for(var t=u(n.innerHTML),r=0,i=\"\";r<t.length;r++){var l=t[r].length>0?t[r]:\" \";i+=g('<span class=\"{0}\">{1}</span>\\n',[e,l])}n.innerHTML=i.trim()}}function u(n){return 0===n.length?[]:n.split(y)}function h(n){return(n.trim().match(y)||[]).length}function f(e){e()}function g(n,e){return n.replace(/{(\\d+)}/g,function(n,t){return e[t]?e[t]:n})}var v=\"hljs-ln\",m=\"hljs-ln-line\",p=\"hljs-ln-code\",j=\"hljs-ln-numbers\",L=\"hljs-ln-n\",b=\"data-line-number\",y=/\\r\\n|\\r|\\n/g;n.hljs?(n.hljs.initLineNumbersOnLoad=r,n.hljs.lineNumbersBlock=l,n.hljs.lineNumbersValue=o,t()):n.console.error(\"highlight.js not detected!\")}(window,document);\n" + "\n" + "/**\n" + " * This reveal.js plugin is wrapper around the highlight.js\n" + " * syntax highlighting library.\n" + " */\n" + "(function( root, factory ) {\n" + "  if (typeof define === 'function' && define.amd) {\n" + "    root.RevealHighlight = factory();\n" + "  } else if( typeof exports === 'object' ) {\n" + "    module.exports = factory();\n" + "  } else {\n" + "    // Browser globals (root is window)\n" + "    root.RevealHighlight = factory();\n" + "  }\n" + "}( this, function() {\n" + "\n" + "  // Function to perform a better \"data-trim\" on code snippets\n" + "  // Will slice an indentation amount on each line of the snippet (amount based on the line having the lowest indentation length)\n" + "  function betterTrim(snippetEl) {\n" + "    // Helper functions\n" + "    function trimLeft(val) {\n" + "      // Adapted from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill\n" + "      return val.replace(/^[\\s\\uFEFF\\xA0]+/g, '');\n" + "    }\n" + "    function trimLineBreaks(input) {\n" + "      var lines = input.split('\\n');\n" + "\n" + "      // Trim line-breaks from the beginning\n" + "      for (var i = 0; i < lines.length; i++) {\n" + "        if (lines[i].trim() === '') {\n" + "          lines.splice(i--, 1);\n" + "        } else break;\n" + "      }\n" + "\n" + "      // Trim line-breaks from the end\n" + "      for (var i = lines.length-1; i >= 0; i--) {\n" + "        if (lines[i].trim() === '') {\n" + "          lines.splice(i, 1);\n" + "        } else break;\n" + "      }\n" + "\n" + "      return lines.join('\\n');\n" + "    }\n" + "\n" + "    // Main function for betterTrim()\n" + "    return (function(snippetEl) {\n" + "      var content = trimLineBreaks(snippetEl.innerHTML);\n" + "      var lines = content.split('\\n');\n" + "      // Calculate the minimum amount to remove on each line start of the snippet (can be 0)\n" + "      var pad = lines.reduce(function(acc, line) {\n" + "        if (line.length > 0 && trimLeft(line).length > 0 && acc > line.length - trimLeft(line).length) {\n" + "          return line.length - trimLeft(line).length;\n" + "        }\n" + "        return acc;\n" + "      }, Number.POSITIVE_INFINITY);\n" + "      // Slice each line with this amount\n" + "      return lines.map(function(line, index) {\n" + "        return line.slice(pad);\n" + "      })\n" + "        .join('\\n');\n" + "    })(snippetEl);\n" + "  }\n" + "\n" + "  var RevealHighlight = {\n" + "\n" + "    HIGHLIGHT_STEP_DELIMITER: '|',\n" + "    HIGHLIGHT_LINE_DELIMITER: ',',\n" + "    HIGHLIGHT_LINE_RANGE_DELIMITER: '-',\n" + "\n" + "    init: function( reveal ) {\n" + "\n" + "      // Read the plugin config options and provide fallbacks\n" + "      var config = Reveal.getConfig().highlight || {};\n" + "      config.highlightOnLoad = typeof config.highlightOnLoad === 'boolean' ? config.highlightOnLoad : true;\n" + "      config.escapeHTML = typeof config.escapeHTML === 'boolean' ? config.escapeHTML : true;\n" + "\n" + "      [].slice.call( reveal.getRevealElement().querySelectorAll( 'pre code' ) ).forEach( function( block ) {\n" + "\n" + "        block.parentNode.className = 'code-wrapper';\n" + "\n" + "        // Code can optionally be wrapped in script template to avoid\n" + "        // HTML being parsed by the browser (i.e. when you need to\n" + "        // include <, > or & in your code).\n" + "        let substitute = block.querySelector( 'script[type=\"text/template\"]' );\n" + "        if( substitute ) {\n" + "          // textContent handles the HTML entity escapes for us\n" + "          block.textContent = substitute.innerHTML;\n" + "        }\n" + "\n" + "        // Trim whitespace if the \"data-trim\" attribute is present\n" + "        if( block.hasAttribute( 'data-trim' ) && typeof block.innerHTML.trim === 'function' ) {\n" + "          block.innerHTML = betterTrim( block );\n" + "        }\n" + "\n" + "        // Escape HTML tags unless the \"data-noescape\" attrbute is present\n" + "        if( config.escapeHTML && !block.hasAttribute( 'data-noescape' )) {\n" + "          block.innerHTML = block.innerHTML.replace( /</g,\"&lt;\").replace(/>/g, '&gt;' );\n" + "        }\n" + "\n" + "        // Re-highlight when focus is lost (for contenteditable code)\n" + "        block.addEventListener( 'focusout', function( event ) {\n" + "          hljs.highlightElement( event.currentTarget );\n" + "        }, false );\n" + "\n" + "        if( config.highlightOnLoad ) {\n" + "          RevealHighlight.highlightBlock( block );\n" + "        }\n" + "      } );\n" + "\n" + "      // If we're printing to PDF, scroll the code highlights of\n" + "      // all blocks in the deck into view at once\n" + "      reveal.on( 'pdf-ready', function() {\n" + "        [].slice.call( reveal.getRevealElement().querySelectorAll( 'pre code[data-line-numbers].current-fragment' ) ).forEach( function( block ) {\n" + "          RevealHighlight.scrollHighlightedLineIntoView( block, {}, true );\n" + "        } );\n" + "      } );\n" + "    },\n" + "\n" + "    /**\n" + "     * Highlights a code block. If the <code> node has the\n" + "     * 'data-line-numbers' attribute we also generate slide\n" + "     * numbers.\n" + "     *\n" + "     * If the block contains multiple line highlight steps,\n" + "     * we clone the block and create a fragment for each step.\n" + "     */\n" + "    highlightBlock: function( block ) {\n" + "\n" + "      hljs.highlightElement( block );\n" + "\n" + "      // Don't generate line numbers for empty code blocks\n" + "      if( block.innerHTML.trim().length === 0 ) return;\n" + "\n" + "      if( block.hasAttribute( 'data-line-numbers' ) ) {\n" + "        hljs.lineNumbersBlock( block, { singleLine: true } );\n" + "\n" + "        var scrollState = { currentBlock: block };\n" + "\n" + "        // If there is at least one highlight step, generate\n" + "        // fragments\n" + "        var highlightSteps = RevealHighlight.deserializeHighlightSteps( block.getAttribute( 'data-line-numbers' ) );\n" + "        if( highlightSteps.length > 1 ) {\n" + "\n" + "          // If the original code block has a fragment-index,\n" + "          // each clone should follow in an incremental sequence\n" + "          var fragmentIndex = parseInt( block.getAttribute( 'data-fragment-index' ), 10 );\n" + "\n" + "          if( typeof fragmentIndex !== 'number' || isNaN( fragmentIndex ) ) {\n" + "            fragmentIndex = null;\n" + "          }\n" + "\n" + "          // Generate fragments for all steps except the original block\n" + "          highlightSteps.slice(1).forEach( function( highlight ) {\n" + "\n" + "            var fragmentBlock = block.cloneNode( true );\n" + "            fragmentBlock.setAttribute( 'data-line-numbers', RevealHighlight.serializeHighlightSteps( [ highlight ] ) );\n" + "            fragmentBlock.classList.add( 'fragment' );\n" + "            block.parentNode.appendChild( fragmentBlock );\n" + "            RevealHighlight.highlightLines( fragmentBlock );\n" + "\n" + "            if( typeof fragmentIndex === 'number' ) {\n" + "              fragmentBlock.setAttribute( 'data-fragment-index', fragmentIndex );\n" + "              fragmentIndex += 1;\n" + "            }\n" + "            else {\n" + "              fragmentBlock.removeAttribute( 'data-fragment-index' );\n" + "            }\n" + "\n" + "            // Scroll highlights into view as we step through them\n" + "            fragmentBlock.addEventListener( 'visible', RevealHighlight.scrollHighlightedLineIntoView.bind( Plugin, fragmentBlock, scrollState ) );\n" + "            fragmentBlock.addEventListener( 'hidden', RevealHighlight.scrollHighlightedLineIntoView.bind( Plugin, fragmentBlock.previousSibling, scrollState ) );\n" + "\n" + "          } );\n" + "\n" + "          block.removeAttribute( 'data-fragment-index' )\n" + "          block.setAttribute( 'data-line-numbers', RevealHighlight.serializeHighlightSteps( [ highlightSteps[0] ] ) );\n" + "\n" + "        }\n" + "\n" + "        // Scroll the first highlight into view when the slide\n" + "        // becomes visible. Note supported in IE11 since it lacks\n" + "        // support for Element.closest.\n" + "        var slide = typeof block.closest === 'function' ? block.closest( 'section:not(.stack)' ) : null;\n" + "        if( slide ) {\n" + "          var scrollFirstHighlightIntoView = function() {\n" + "            RevealHighlight.scrollHighlightedLineIntoView( block, scrollState, true );\n" + "            slide.removeEventListener( 'visible', scrollFirstHighlightIntoView );\n" + "          }\n" + "          slide.addEventListener( 'visible', scrollFirstHighlightIntoView );\n" + "        }\n" + "\n" + "        RevealHighlight.highlightLines( block );\n" + "\n" + "      }\n" + "\n" + "    },\n" + "\n" + "    /**\n" + "     * Animates scrolling to the first highlighted line\n" + "     * in the given code block.\n" + "     */\n" + "    scrollHighlightedLineIntoView: function( block, scrollState, skipAnimation ) {\n" + "\n" + "      cancelAnimationFrame( scrollState.animationFrameID );\n" + "\n" + "      // Match the scroll position of the currently visible\n" + "      // code block\n" + "      if( scrollState.currentBlock ) {\n" + "        block.scrollTop = scrollState.currentBlock.scrollTop;\n" + "      }\n" + "\n" + "      // Remember the current code block so that we can match\n" + "      // its scroll position when showing/hiding fragments\n" + "      scrollState.currentBlock = block;\n" + "\n" + "      var highlightBounds = RevealHighlight.getHighlightedLineBounds( block )\n" + "      var viewportHeight = block.offsetHeight;\n" + "\n" + "      // Subtract padding from the viewport height\n" + "      var blockStyles = getComputedStyle( block );\n" + "      viewportHeight -= parseInt( blockStyles.paddingTop ) + parseInt( blockStyles.paddingBottom );\n" + "\n" + "      // Scroll position which centers all highlights\n" + "      var startTop = block.scrollTop;\n" + "      var targetTop = highlightBounds.top + ( Math.min( highlightBounds.bottom - highlightBounds.top, viewportHeight ) - viewportHeight ) / 2;\n" + "\n" + "      // Account for offsets in position applied to the\n" + "      // <table> that holds our lines of code\n" + "      var lineTable = block.querySelector( '.hljs-ln' );\n" + "      if( lineTable ) targetTop += lineTable.offsetTop - parseInt( blockStyles.paddingTop );\n" + "\n" + "      // Make sure the scroll target is within bounds\n" + "      targetTop = Math.max( Math.min( targetTop, block.scrollHeight - viewportHeight ), 0 );\n" + "\n" + "      if( skipAnimation === true || startTop === targetTop ) {\n" + "        block.scrollTop = targetTop;\n" + "      }\n" + "      else {\n" + "\n" + "        // Don't attempt to scroll if there is no overflow\n" + "        if( block.scrollHeight <= viewportHeight ) return;\n" + "\n" + "        var time = 0;\n" + "        var animate = function() {\n" + "          time = Math.min( time + 0.02, 1 );\n" + "\n" + "          // Update our eased scroll position\n" + "          block.scrollTop = startTop + ( targetTop - startTop ) * RevealHighlight.easeInOutQuart( time );\n" + "\n" + "          // Keep animating unless we've reached the end\n" + "          if( time < 1 ) {\n" + "            scrollState.animationFrameID = requestAnimationFrame( animate );\n" + "          }\n" + "        };\n" + "\n" + "        animate();\n" + "\n" + "      }\n" + "\n" + "    },\n" + "\n" + "    /**\n" + "     * The easing function used when scrolling.\n" + "     */\n" + "    easeInOutQuart: function( t ) {\n" + "\n" + "      // easeInOutQuart\n" + "      return t<.5 ? 8*t*t*t*t : 1-8*(--t)*t*t*t;\n" + "\n" + "    },\n" + "\n" + "    getHighlightedLineBounds: function( block ) {\n" + "\n" + "      var highlightedLines = block.querySelectorAll( '.highlight-line' );\n" + "      if( highlightedLines.length === 0 ) {\n" + "        return { top: 0, bottom: 0 };\n" + "      }\n" + "      else {\n" + "        var firstHighlight = highlightedLines[0];\n" + "        var lastHighlight = highlightedLines[ highlightedLines.length -1 ];\n" + "\n" + "        return {\n" + "          top: firstHighlight.offsetTop,\n" + "          bottom: lastHighlight.offsetTop + lastHighlight.offsetHeight\n" + "        }\n" + "      }\n" + "\n" + "    },\n" + "\n" + "    /**\n" + "     * Visually emphasize specific lines within a code block.\n" + "     * This only works on blocks with line numbering turned on.\n" + "     *\n" + "     * @param {HTMLElement} block a <code> block\n" + "     * @param {String} [linesToHighlight] The lines that should be\n" + "     * highlighted in this format:\n" + "     * \"1\" \t\t= highlights line 1\n" + "     * \"2,5\"\t= highlights lines 2 & 5\n" + "     * \"2,5-7\"\t= highlights lines 2, 5, 6 & 7\n" + "     */\n" + "    highlightLines: function( block, linesToHighlight ) {\n" + "\n" + "      var highlightSteps = RevealHighlight.deserializeHighlightSteps( linesToHighlight || block.getAttribute( 'data-line-numbers' ) );\n" + "\n" + "      if( highlightSteps.length ) {\n" + "\n" + "        highlightSteps[0].forEach( function( highlight ) {\n" + "\n" + "          var elementsToHighlight = [];\n" + "\n" + "          // Highlight a range\n" + "          if( typeof highlight.end === 'number' ) {\n" + "            elementsToHighlight = [].slice.call( block.querySelectorAll( 'table tr:nth-child(n+'+highlight.start+'):nth-child(-n+'+highlight.end+')' ) );\n" + "          }\n" + "          // Highlight a single line\n" + "          else if( typeof highlight.start === 'number' ) {\n" + "            elementsToHighlight = [].slice.call( block.querySelectorAll( 'table tr:nth-child('+highlight.start+')' ) );\n" + "          }\n" + "\n" + "          if( elementsToHighlight.length ) {\n" + "            elementsToHighlight.forEach( function( lineElement ) {\n" + "              lineElement.classList.add( 'highlight-line' );\n" + "            } );\n" + "\n" + "            block.classList.add( 'has-highlights' );\n" + "          }\n" + "\n" + "        } );\n" + "\n" + "      }\n" + "\n" + "    },\n" + "\n" + "    /**\n" + "     * Parses and formats a user-defined string of line\n" + "     * numbers to highlight.\n" + "     *\n" + "     * @example\n" + "     * RevealHighlight.deserializeHighlightSteps( '1,2|3,5-10' )\n" + "     * // [\n" + "     * //   [ { start: 1 }, { start: 2 } ],\n" + "     * //   [ { start: 3 }, { start: 5, end: 10 } ]\n" + "     * // ]\n" + "     */\n" + "    deserializeHighlightSteps: function( highlightSteps ) {\n" + "\n" + "      // Remove whitespace\n" + "      highlightSteps = highlightSteps.replace( /\\s/g, '' );\n" + "\n" + "      // Divide up our line number groups\n" + "      highlightSteps = highlightSteps.split( RevealHighlight.HIGHLIGHT_STEP_DELIMITER );\n" + "\n" + "      return highlightSteps.map( function( highlights ) {\n" + "\n" + "        return highlights.split( RevealHighlight.HIGHLIGHT_LINE_DELIMITER ).map( function( highlight ) {\n" + "\n" + "          // Parse valid line numbers\n" + "          if( /^[\\d-]+$/.test( highlight ) ) {\n" + "\n" + "            highlight = highlight.split( RevealHighlight.HIGHLIGHT_LINE_RANGE_DELIMITER );\n" + "\n" + "            var lineStart = parseInt( highlight[0], 10 ),\n" + "              lineEnd = parseInt( highlight[1], 10 );\n" + "\n" + "            if( isNaN( lineEnd ) ) {\n" + "              return {\n" + "                start: lineStart\n" + "              };\n" + "            }\n" + "            else {\n" + "              return {\n" + "                start: lineStart,\n" + "                end: lineEnd\n" + "              };\n" + "            }\n" + "\n" + "          }\n" + "          // If no line numbers are provided, no code will be highlighted\n" + "          else {\n" + "\n" + "            return {};\n" + "\n" + "          }\n" + "\n" + "        } );\n" + "\n" + "      } );\n" + "\n" + "    },\n" + "\n" + "    /**\n" + "     * Serializes parsed line number data into a string so\n" + "     * that we can store it in the DOM.\n" + "     */\n" + "    serializeHighlightSteps: function( highlightSteps ) {\n" + "\n" + "      return highlightSteps.map( function( highlights ) {\n" + "\n" + "        return highlights.map( function( highlight ) {\n" + "\n" + "          // Line range\n" + "          if( typeof highlight.end === 'number' ) {\n" + "            return highlight.start + RevealHighlight.HIGHLIGHT_LINE_RANGE_DELIMITER + highlight.end;\n" + "          }\n" + "          // Single line\n" + "          else if( typeof highlight.start === 'number' ) {\n" + "            return highlight.start;\n" + "          }\n" + "          // All lines\n" + "          else {\n" + "            return '';\n" + "          }\n" + "\n" + "        } ).join( RevealHighlight.HIGHLIGHT_LINE_DELIMITER );\n" + "\n" + "      } ).join( RevealHighlight.HIGHLIGHT_STEP_DELIMITER );\n" + "\n" + "    }\n" + "\n" + "  }\n" + "\n" + "  Reveal.registerPlugin( 'highlight', RevealHighlight );\n" + "\n" + "  return RevealHighlight;\n" + "\n" + "}));\n" + "        ");
        })($nesting[0], $$$($$$($$('Asciidoctor'), 'SyntaxHighlighter'), 'Base'), $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

Opal.queue(function(Opal) {/* Generated by Opal 1.7.3 */
  var self = Opal.top, nil = Opal.nil;

  Opal.add_stubs('require');
  
  self.$require("asciidoctor-revealjs/converter");
  self.$require("asciidoctor-revealjs/version");
  return self.$require("asciidoctor-revealjs/highlightjs");
});

  }

  var mainModule

  function resolveModule () {
    if (!mainModule) {
      checkAsciidoctor()
      initialize(Opal)
      mainModule = Opal.const_get_qualified(Opal.Asciidoctor, 'Revealjs')
    }
    return mainModule
  }

  function checkAsciidoctor () {
    if (typeof Opal.Asciidoctor === 'undefined') {
      throw new TypeError('Asciidoctor.js is not loaded')
    }
  }

  /**
   * @return {string} Version of this extension.
   */
  function getVersion () {
    return resolveModule().$$const.VERSION.toString()
  }

  /**
   * Registers the reveal.js converter.
   */
  function register () {
    return resolveModule()
  }

  var facade = {
    getVersion: getVersion,
    register: register,
  }

  if (typeof module !== 'undefined' && module.exports) {
    module.exports = facade
  }
  return facade
})(Opal);
